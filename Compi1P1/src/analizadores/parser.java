
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 19 20:34:18 CST 2018
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 19 20:34:18 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\005\000\002\042" +
    "\005\000\002\042\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\050\006\000\002\051\006\000\002\052" +
    "\005\000\002\052\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\040\005\000\002\040\003" +
    "\000\002\043\005\000\002\043\003\000\002\044\010\000" +
    "\002\044\006\000\002\010\006\000\002\011\005\000\002" +
    "\012\005\000\002\012\003\000\002\013\011\000\002\014" +
    "\010\000\002\015\010\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\004\000\002\006\004\000\002\006\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\004" +
    "\000\002\007\004\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\025\007\000\002\027\007\000\002\027\003\000\002\026" +
    "\006\000\002\026\004\000\002\031\007\000\002\032\016" +
    "\000\002\033\007\000\002\034\007\000\002\035\006\000" +
    "\002\035\005\000\002\036\007\000\002\036\004\000\002" +
    "\016\003\000\002\016\003\000\002\017\007\000\002\020" +
    "\007\000\002\053\005\000\002\053\004\000\002\021\005" +
    "\000\002\021\004\000\002\022\012\000\002\054\004\000" +
    "\002\054\003\000\002\023\005\000\002\023\004\000\002" +
    "\003\005\000\002\003\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\004\025\004\001\002\000\004\074\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\040\026\017\027\030\030\014\031\047\032\035\042" +
    "\025\044\034\047\020\050\026\054\015\055\051\061\037" +
    "\064\012\071\010\074\032\001\002\000\006\054\331\055" +
    "\330\001\002\000\040\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\042\uffc6\044\uffc6\047\uffc6\050\uffc6\054\uffc6\055" +
    "\uffc6\061\uffc6\064\uffc6\071\uffc6\074\uffc6\001\002\000\004" +
    "\065\305\001\002\000\004\002\000\001\002\000\010\044" +
    "\uffe2\046\uffe2\074\uffe2\001\002\000\016\023\112\024\114" +
    "\072\113\074\115\075\106\076\117\001\002\000\040\026" +
    "\277\027\030\030\014\031\047\032\035\042\025\044\034" +
    "\047\020\050\026\054\015\055\051\061\037\064\012\071" +
    "\010\074\032\001\002\000\004\025\276\001\002\000\016" +
    "\023\112\024\114\072\113\074\115\075\106\076\117\001" +
    "\002\000\040\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6" +
    "\042\uffa6\044\uffa6\047\uffa6\050\uffa6\054\uffa6\055\uffa6\061" +
    "\uffa6\064\uffa6\071\uffa6\074\uffa6\001\002\000\040\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\042\uffa7\044\uffa7\047" +
    "\uffa7\050\uffa7\054\uffa7\055\uffa7\061\uffa7\064\uffa7\071\uffa7" +
    "\074\uffa7\001\002\000\040\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\042\uffc7\044\uffc7\047\uffc7\050\uffc7\054\uffc7" +
    "\055\uffc7\061\uffc7\064\uffc7\071\uffc7\074\uffc7\001\002\000" +
    "\010\044\234\046\235\074\071\001\002\000\004\013\227" +
    "\001\002\000\016\023\112\024\114\072\113\074\115\075" +
    "\106\076\117\001\002\000\052\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\042\uffbc\044\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\060\uffbc\061\uffbc\062\uffbc" +
    "\064\uffbc\065\uffbc\071\uffbc\074\uffbc\001\002\000\010\044" +
    "\uffe3\046\uffe3\074\uffe3\001\002\000\052\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\042\uffc0\044\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\053\uffc0\054\uffc0\055\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\064\uffc0\065\uffc0\071\uffc0\074\uffc0\001\002\000" +
    "\006\020\200\077\201\001\002\000\040\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\042\uffc8\044\uffc8\047\uffc8\050" +
    "\uffc8\054\uffc8\055\uffc8\061\uffc8\064\uffc8\071\uffc8\074\uffc8" +
    "\001\002\000\004\045\166\001\002\000\010\044\uffe0\046" +
    "\uffe0\074\uffe0\001\002\000\052\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\042\uffbf\044\uffbf\047\uffbf\050\uffbf\051" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\064\uffbf\065\uffbf\071\uffbf\074\uffbf\001\002\000\032\027" +
    "\030\030\014\031\047\032\035\042\025\050\026\054\015" +
    "\055\051\061\037\064\012\071\010\074\032\001\002\000" +
    "\052\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\042\uffc1" +
    "\044\uffc1\047\uffc1\050\uffc1\051\uffc1\053\uffc1\054\uffc1\055" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\064\uffc1\065\uffc1\071\uffc1" +
    "\074\uffc1\001\002\000\052\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\042\uffb9\044\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\053\uffb9\054\uffb9\055\uffb9\060\uffb9\061\uffb9\062\uffb9\064" +
    "\uffb9\065\uffb9\071\uffb9\074\uffb9\001\002\000\052\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\042\uffb8\044\uffb8\047" +
    "\uffb8\050\uffb8\051\uffb8\053\uffb8\054\uffb8\055\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\064\uffb8\065\uffb8\071\uffb8\074\uffb8\001" +
    "\002\000\052\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\042\uffb6\044\uffb6\047\uffb6\050\uffb6\051\uffb6\053\uffb6\054" +
    "\uffb6\055\uffb6\060\uffb6\061\uffb6\062\uffb6\064\uffb6\065\uffb6" +
    "\071\uffb6\074\uffb6\001\002\000\052\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\042\uffbd\044\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\053\uffbd\054\uffbd\055\uffbd\060\uffbd\061\uffbd\062" +
    "\uffbd\064\uffbd\065\uffbd\071\uffbd\074\uffbd\001\002\000\052" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\042\uffbe\044" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\060\uffbe\061\uffbe\062\uffbe\064\uffbe\065\uffbe\071\uffbe\074" +
    "\uffbe\001\002\000\052\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\042\uffb7\044\uffb7\047\uffb7\050\uffb7\051\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\060\uffb7\061\uffb7\062\uffb7\064\uffb7" +
    "\065\uffb7\071\uffb7\074\uffb7\001\002\000\010\044\uffe1\046" +
    "\uffe1\074\uffe1\001\002\000\052\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\042\uffb5\044\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\060\uffb5\061\uffb5\062\uffb5" +
    "\064\uffb5\065\uffb5\071\uffb5\074\uffb5\001\002\000\004\074" +
    "\053\001\002\000\040\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\042\uffc5\044\uffc5\047\uffc5\050\uffc5\054\uffc5\055" +
    "\uffc5\061\uffc5\064\uffc5\071\uffc5\074\uffc5\001\002\000\004" +
    "\033\054\001\002\000\004\034\055\001\002\000\004\020" +
    "\056\001\002\000\004\072\057\001\002\000\004\056\060" +
    "\001\002\000\004\072\061\001\002\000\004\057\062\001" +
    "\002\000\004\072\063\001\002\000\032\027\030\030\014" +
    "\031\047\032\035\042\025\050\026\054\015\055\051\061" +
    "\037\064\012\071\010\074\032\001\002\000\046\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\042\uffc2\050\uffc2\051" +
    "\uffc2\053\uffc2\054\uffc2\055\uffc2\060\uffc2\061\uffc2\062\uffc2" +
    "\064\uffc2\065\uffc2\071\uffc2\074\uffc2\001\002\000\004\074" +
    "\071\001\002\000\034\027\030\030\014\031\047\032\035" +
    "\042\025\050\026\054\015\055\051\060\070\061\037\064" +
    "\012\071\010\074\032\001\002\000\046\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\042\uffc3\050\uffc3\051\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\060\uffc3\061\uffc3\062\uffc3\064\uffc3" +
    "\065\uffc3\071\uffc3\074\uffc3\001\002\000\052\026\uffae\027" +
    "\uffae\030\uffae\031\uffae\032\uffae\042\uffae\044\uffae\047\uffae" +
    "\050\uffae\051\uffae\053\uffae\054\uffae\055\uffae\060\uffae\061" +
    "\uffae\062\uffae\064\uffae\065\uffae\071\uffae\074\uffae\001\002" +
    "\000\010\012\uffd5\033\uffd5\077\155\001\002\000\006\012" +
    "\073\033\074\001\002\000\004\074\154\001\002\000\016" +
    "\034\076\035\104\036\103\037\101\040\100\041\102\001" +
    "\002\000\054\020\105\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\042\uffcd\044\uffcd\047\uffcd\050\uffcd\051\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\060\uffcd\061\uffcd\062\uffcd\064\uffcd" +
    "\065\uffcd\071\uffcd\074\uffcd\001\002\000\060\011\uffd9\012" +
    "\uffd9\020\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\042\uffd9\044\uffd9\047\uffd9\050\uffd9\051\uffd9\053\uffd9\054" +
    "\uffd9\055\uffd9\060\uffd9\061\uffd9\062\uffd9\064\uffd9\065\uffd9" +
    "\071\uffd9\074\uffd9\001\002\000\052\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\042\uffd0\044\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\053\uffd0\054\uffd0\055\uffd0\060\uffd0\061\uffd0\062" +
    "\uffd0\064\uffd0\065\uffd0\071\uffd0\074\uffd0\001\002\000\060" +
    "\011\uffd8\012\uffd8\020\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\042\uffd8\044\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\060\uffd8\061\uffd8\062\uffd8\064" +
    "\uffd8\065\uffd8\071\uffd8\074\uffd8\001\002\000\060\011\uffda" +
    "\012\uffda\020\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\042\uffda\044\uffda\047\uffda\050\uffda\051\uffda\053\uffda" +
    "\054\uffda\055\uffda\060\uffda\061\uffda\062\uffda\064\uffda\065" +
    "\uffda\071\uffda\074\uffda\001\002\000\060\011\uffd7\012\uffd7" +
    "\020\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\042" +
    "\uffd7\044\uffd7\047\uffd7\050\uffd7\051\uffd7\053\uffd7\054\uffd7" +
    "\055\uffd7\060\uffd7\061\uffd7\062\uffd7\064\uffd7\065\uffd7\071" +
    "\uffd7\074\uffd7\001\002\000\060\011\uffdb\012\uffdb\020\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\042\uffdb\044" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\064\uffdb\065\uffdb\071\uffdb\074" +
    "\uffdb\001\002\000\060\011\uffdc\012\uffdc\020\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\042\uffdc\044\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\053\uffdc\054\uffdc\055\uffdc\060\uffdc" +
    "\061\uffdc\062\uffdc\064\uffdc\065\uffdc\071\uffdc\074\uffdc\001" +
    "\002\000\016\023\112\024\114\072\113\074\115\075\106" +
    "\076\117\001\002\000\114\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\011\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\042\uffee\044\uffee\047\uffee\050\uffee\051\uffee" +
    "\052\uffee\053\uffee\054\uffee\055\uffee\060\uffee\061\uffee\062" +
    "\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee" +
    "\074\uffee\001\002\000\114\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\011\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\042\uffe9\044\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9" +
    "\074\uffe9\001\002\000\114\004\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\011\ufffe\012\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\026\ufffe\027\ufffe\030\ufffe\031" +
    "\ufffe\032\ufffe\042\ufffe\044\ufffe\047\ufffe\050\ufffe\051\ufffe" +
    "\052\ufffe\053\ufffe\054\ufffe\055\ufffe\060\ufffe\061\ufffe\062" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe" +
    "\074\ufffe\001\002\000\106\004\144\005\137\006\141\007" +
    "\146\014\143\015\142\016\145\017\134\020\147\021\140" +
    "\022\152\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\042" +
    "\uffce\044\uffce\047\uffce\050\uffce\051\uffce\053\uffce\054\uffce" +
    "\055\uffce\060\uffce\061\uffce\062\uffce\064\uffce\065\uffce\066" +
    "\135\067\151\070\150\071\uffce\074\uffce\001\002\000\114" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\011\uffec\012\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\042\uffec\044" +
    "\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec" +
    "\055\uffec\060\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066" +
    "\uffec\067\uffec\070\uffec\071\uffec\074\uffec\001\002\000\114" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\012\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\042\uffef\044" +
    "\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef" +
    "\055\uffef\060\uffef\061\uffef\062\uffef\064\uffef\065\uffef\066" +
    "\uffef\067\uffef\070\uffef\071\uffef\074\uffef\001\002\000\114" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\012\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\042\uffeb\044" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\060\uffeb\061\uffeb\062\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\070\uffeb\071\uffeb\074\uffeb\001\002\000\120" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\010\120\011\uffed\012" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\042" +
    "\uffed\044\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\uffed\055\uffed\060\uffed\061\uffed\062\uffed\064\uffed\065" +
    "\uffed\066\uffed\067\uffed\070\uffed\071\uffed\074\uffed\077\121" +
    "\001\002\000\114\004\uffe8\005\uffe8\006\uffe8\007\uffe8\011" +
    "\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\042\uffe8\044\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\060\uffe8\061\uffe8\062\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\074\uffe8" +
    "\001\002\000\114\004\uffea\005\uffea\006\uffea\007\uffea\011" +
    "\uffea\012\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\042\uffea\044\uffea\047\uffea\050\uffea\051\uffea\052\uffea" +
    "\053\uffea\054\uffea\055\uffea\060\uffea\061\uffea\062\uffea\064" +
    "\uffea\065\uffea\066\uffea\067\uffea\070\uffea\071\uffea\074\uffea" +
    "\001\002\000\016\023\112\024\114\072\113\074\115\075" +
    "\106\076\117\001\002\000\004\072\122\001\002\000\006" +
    "\012\uffd3\100\uffd3\001\002\000\006\012\124\100\125\001" +
    "\002\000\004\072\126\001\002\000\114\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\011\uffe7\012\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\042\uffe7\044\uffe7\047\uffe7\050" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070" +
    "\uffe7\071\uffe7\074\uffe7\001\002\000\006\012\uffd4\100\uffd4" +
    "\001\002\000\042\004\144\005\137\006\141\007\146\011" +
    "\uffe4\012\uffe4\014\143\015\142\016\145\017\134\020\147" +
    "\021\140\022\152\066\135\067\151\070\150\001\002\000" +
    "\006\011\132\012\131\001\002\000\016\023\112\024\114" +
    "\072\113\074\115\075\106\076\117\001\002\000\114\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\011\uffe6\012\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\042\uffe6\044\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6" +
    "\067\uffe6\070\uffe6\071\uffe6\074\uffe6\001\002\000\042\004" +
    "\144\005\137\006\141\007\146\011\uffe5\012\uffe5\014\143" +
    "\015\142\016\145\017\134\020\147\021\140\022\152\066" +
    "\135\067\151\070\150\001\002\000\016\023\ufff5\024\ufff5" +
    "\072\ufff5\074\ufff5\075\ufff5\076\ufff5\001\002\000\016\023" +
    "\ufff2\024\ufff2\072\ufff2\074\ufff2\075\ufff2\076\ufff2\001\002" +
    "\000\016\023\112\024\114\072\113\074\115\075\106\076" +
    "\117\001\002\000\016\023\ufffc\024\ufffc\072\ufffc\074\ufffc" +
    "\075\ufffc\076\ufffc\001\002\000\016\023\ufff3\024\ufff3\072" +
    "\ufff3\074\ufff3\075\ufff3\076\ufff3\001\002\000\016\023\ufffb" +
    "\024\ufffb\072\ufffb\074\ufffb\075\ufffb\076\ufffb\001\002\000" +
    "\016\023\ufff7\024\ufff7\072\ufff7\074\ufff7\075\ufff7\076\ufff7" +
    "\001\002\000\016\023\ufff8\024\ufff8\072\ufff8\074\ufff8\075" +
    "\ufff8\076\ufff8\001\002\000\016\023\ufffd\024\ufffd\072\ufffd" +
    "\074\ufffd\075\ufffd\076\ufffd\001\002\000\016\023\ufff6\024" +
    "\ufff6\072\ufff6\074\ufff6\075\ufff6\076\ufff6\001\002\000\016" +
    "\023\ufffa\024\ufffa\072\ufffa\074\ufffa\075\ufffa\076\ufffa\001" +
    "\002\000\016\023\ufff4\024\ufff4\072\ufff4\074\ufff4\075\ufff4" +
    "\076\ufff4\001\002\000\016\023\ufff0\024\ufff0\072\ufff0\074" +
    "\ufff0\075\ufff0\076\ufff0\001\002\000\016\023\ufff1\024\ufff1" +
    "\072\ufff1\074\ufff1\075\ufff1\076\ufff1\001\002\000\016\023" +
    "\ufff9\024\ufff9\072\ufff9\074\ufff9\075\ufff9\076\ufff9\001\002" +
    "\000\114\004\uffff\005\uffff\006\uffff\007\uffff\011\uffff\012" +
    "\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff" +
    "\022\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\042" +
    "\uffff\044\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff" +
    "\054\uffff\055\uffff\060\uffff\061\uffff\062\uffff\064\uffff\065" +
    "\uffff\066\uffff\067\uffff\070\uffff\071\uffff\074\uffff\001\002" +
    "\000\006\012\uffd6\033\uffd6\001\002\000\004\072\122\001" +
    "\002\000\006\012\124\100\157\001\002\000\004\033\160" +
    "\001\002\000\016\034\076\035\104\036\103\037\101\040" +
    "\100\041\102\001\002\000\052\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\042\uffcc\044\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\060\uffcc\061\uffcc\062\uffcc" +
    "\064\uffcc\065\uffcc\071\uffcc\074\uffcc\001\002\000\034\027" +
    "\030\030\014\031\047\032\035\042\025\050\026\054\015" +
    "\055\051\061\037\062\163\064\012\071\010\074\032\001" +
    "\002\000\004\063\164\001\002\000\016\023\112\024\114" +
    "\072\113\074\115\075\106\076\117\001\002\000\106\004" +
    "\144\005\137\006\141\007\146\014\143\015\142\016\145" +
    "\017\134\020\147\021\140\022\152\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\042\uffad\044\uffad\047\uffad\050\uffad" +
    "\051\uffad\053\uffad\054\uffad\055\uffad\060\uffad\061\uffad\062" +
    "\uffad\064\uffad\065\uffad\066\135\067\151\070\150\071\uffad" +
    "\074\uffad\001\002\000\004\010\167\001\002\000\004\011" +
    "\170\001\002\000\040\026\172\027\030\030\014\031\047" +
    "\032\035\042\025\044\034\047\020\050\026\054\015\055" +
    "\051\061\037\064\012\071\010\074\032\001\002\000\040" +
    "\026\175\027\030\030\014\031\047\032\035\042\025\044" +
    "\034\047\020\050\026\054\015\055\051\061\037\064\012" +
    "\071\010\074\032\001\002\000\004\044\174\001\002\000" +
    "\040\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\042\uffa5" +
    "\044\uffa5\047\uffa5\050\uffa5\054\uffa5\055\uffa5\061\uffa5\064" +
    "\uffa5\071\uffa5\074\uffa5\001\002\000\040\026\uffa0\027\uffa0" +
    "\030\uffa0\031\uffa0\032\uffa0\042\uffa0\044\uffa0\047\uffa0\050" +
    "\uffa0\054\uffa0\055\uffa0\061\uffa0\064\uffa0\071\uffa0\074\uffa0" +
    "\001\002\000\004\044\177\001\002\000\040\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\042\uffc9\044\uffc9\047\uffc9" +
    "\050\uffc9\054\uffc9\055\uffc9\061\uffc9\064\uffc9\071\uffc9\074" +
    "\uffc9\001\002\000\040\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\042\uffa1\044\uffa1\047\uffa1\050\uffa1\054\uffa1\055" +
    "\uffa1\061\uffa1\064\uffa1\071\uffa1\074\uffa1\001\002\000\016" +
    "\023\112\024\114\072\113\074\115\075\106\076\117\001" +
    "\002\000\004\072\122\001\002\000\006\012\124\100\203" +
    "\001\002\000\004\020\204\001\002\000\016\023\112\024" +
    "\114\072\113\074\115\075\106\076\117\001\002\000\106" +
    "\004\144\005\137\006\141\007\146\014\143\015\142\016" +
    "\145\017\134\020\147\021\140\022\152\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\042\uffcb\044\uffcb\047\uffcb\050" +
    "\uffcb\051\uffcb\053\uffcb\054\uffcb\055\uffcb\060\uffcb\061\uffcb" +
    "\062\uffcb\064\uffcb\065\uffcb\066\135\067\151\070\150\071" +
    "\uffcb\074\uffcb\001\002\000\106\004\144\005\137\006\141" +
    "\007\146\014\143\015\142\016\145\017\134\020\147\021" +
    "\140\022\152\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\042\uffcf\044\uffcf\047\uffcf\050\uffcf\051\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\060\uffcf\061\uffcf\062\uffcf\064\uffcf\065\uffcf" +
    "\066\135\067\151\070\150\071\uffcf\074\uffcf\001\002\000" +
    "\040\004\144\005\137\006\141\007\146\014\143\015\142" +
    "\016\145\017\134\020\147\021\140\022\152\052\210\066" +
    "\135\067\151\070\150\001\002\000\032\027\030\030\014" +
    "\031\047\032\035\042\025\050\026\054\015\055\051\061" +
    "\037\064\012\071\010\074\032\001\002\000\040\026\213" +
    "\027\030\030\014\031\047\032\035\042\025\050\026\051" +
    "\212\053\215\054\015\055\051\061\037\064\012\071\010" +
    "\074\032\001\002\000\032\027\030\030\014\031\047\032" +
    "\035\042\025\050\026\054\015\055\051\061\037\064\012" +
    "\071\010\074\032\001\002\000\004\050\223\001\002\000" +
    "\052\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\042\uffb4" +
    "\044\uffb4\047\uffb4\050\uffb4\051\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\060\uffb4\061\uffb4\062\uffb4\064\uffb4\065\uffb4\071\uffb4" +
    "\074\uffb4\001\002\000\016\023\112\024\114\072\113\074" +
    "\115\075\106\076\117\001\002\000\052\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\042\uffb2\044\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\053\uffb2\054\uffb2\055\uffb2\060\uffb2\061\uffb2" +
    "\062\uffb2\064\uffb2\065\uffb2\071\uffb2\074\uffb2\001\002\000" +
    "\040\004\144\005\137\006\141\007\146\014\143\015\142" +
    "\016\145\017\134\020\147\021\140\022\152\052\220\066" +
    "\135\067\151\070\150\001\002\000\032\027\030\030\014" +
    "\031\047\032\035\042\025\050\026\054\015\055\051\061" +
    "\037\064\012\071\010\074\032\001\002\000\040\026\213" +
    "\027\030\030\014\031\047\032\035\042\025\050\026\051" +
    "\212\053\215\054\015\055\051\061\037\064\012\071\010" +
    "\074\032\001\002\000\052\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\042\uffb3\044\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\060\uffb3\061\uffb3\062\uffb3\064" +
    "\uffb3\065\uffb3\071\uffb3\074\uffb3\001\002\000\052\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\042\uffb0\044\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\053\uffb0\054\uffb0\055\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\064\uffb0\065\uffb0\071\uffb0\074\uffb0\001" +
    "\002\000\034\026\225\027\030\030\014\031\047\032\035" +
    "\042\025\050\026\054\015\055\051\061\037\064\012\071" +
    "\010\074\032\001\002\000\004\050\226\001\002\000\052" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\042\uffb1\044" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\060\uffb1\061\uffb1\062\uffb1\064\uffb1\065\uffb1\071\uffb1\074" +
    "\uffb1\001\002\000\004\101\230\001\002\000\004\010\231" +
    "\001\002\000\016\023\112\024\114\072\113\074\115\075" +
    "\106\076\117\001\002\000\040\004\144\005\137\006\141" +
    "\007\146\011\233\014\143\015\142\016\145\017\134\020" +
    "\147\021\140\022\152\066\135\067\151\070\150\001\002" +
    "\000\052\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\042" +
    "\uffca\044\uffca\047\uffca\050\uffca\051\uffca\053\uffca\054\uffca" +
    "\055\uffca\060\uffca\061\uffca\062\uffca\064\uffca\065\uffca\071" +
    "\uffca\074\uffca\001\002\000\004\074\265\001\002\000\004" +
    "\074\236\001\002\000\004\010\237\001\002\000\006\011" +
    "\242\043\241\001\002\000\004\033\255\001\002\000\004" +
    "\074\252\001\002\000\004\033\uff9d\001\002\000\006\011" +
    "\245\012\244\001\002\000\004\043\246\001\002\000\004" +
    "\033\uff9e\001\002\000\004\074\247\001\002\000\004\033" +
    "\250\001\002\000\016\034\076\035\104\036\103\037\101" +
    "\040\100\041\102\001\002\000\006\011\uffd2\012\uffd2\001" +
    "\002\000\004\033\253\001\002\000\016\034\076\035\104" +
    "\036\103\037\101\040\100\041\102\001\002\000\006\011" +
    "\uffd1\012\uffd1\001\002\000\016\034\076\035\104\036\103" +
    "\037\101\040\100\041\102\001\002\000\040\026\260\027" +
    "\030\030\014\031\047\032\035\042\025\044\034\047\020" +
    "\050\026\054\015\055\051\061\037\064\012\071\010\074" +
    "\032\001\002\000\040\026\263\027\030\030\014\031\047" +
    "\032\035\042\025\044\034\047\020\050\026\054\015\055" +
    "\051\061\037\064\012\071\010\074\032\001\002\000\004" +
    "\046\262\001\002\000\040\026\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\032\uff9f\042\uff9f\044\uff9f\047\uff9f\050\uff9f\054\uff9f" +
    "\055\uff9f\061\uff9f\064\uff9f\071\uff9f\074\uff9f\001\002\000" +
    "\040\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\042\uff9b" +
    "\044\uff9b\047\uff9b\050\uff9b\054\uff9b\055\uff9b\061\uff9b\064" +
    "\uff9b\071\uff9b\074\uff9b\001\002\000\004\046\264\001\002" +
    "\000\040\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\042" +
    "\uff9c\044\uff9c\047\uff9c\050\uff9c\054\uff9c\055\uff9c\061\uff9c" +
    "\064\uff9c\071\uff9c\074\uff9c\001\002\000\004\010\266\001" +
    "\002\000\006\011\270\043\241\001\002\000\040\026\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\042\uffa4\044\uffa4\047" +
    "\uffa4\050\uffa4\054\uffa4\055\uffa4\061\uffa4\064\uffa4\071\uffa4" +
    "\074\uffa4\001\002\000\040\026\172\027\030\030\014\031" +
    "\047\032\035\042\025\044\034\047\020\050\026\054\015" +
    "\055\051\061\037\064\012\071\010\074\032\001\002\000" +
    "\006\011\272\012\244\001\002\000\040\026\172\027\030" +
    "\030\014\031\047\032\035\042\025\044\034\047\020\050" +
    "\026\054\015\055\051\061\037\064\012\071\010\074\032" +
    "\001\002\000\040\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\042\uffa3\044\uffa3\047\uffa3\050\uffa3\054\uffa3\055\uffa3" +
    "\061\uffa3\064\uffa3\071\uffa3\074\uffa3\001\002\000\040\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\042\uffa2\044\uffa2" +
    "\047\uffa2\050\uffa2\054\uffa2\055\uffa2\061\uffa2\064\uffa2\071" +
    "\uffa2\074\uffa2\001\002\000\074\004\144\005\137\006\141" +
    "\007\146\014\143\015\142\016\145\017\134\020\147\021" +
    "\140\022\152\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\042\uffc4\044\uffc4\047\uffc4\050\uffc4\054\uffc4\055\uffc4\061" +
    "\uffc4\064\uffc4\066\135\067\151\070\150\071\uffc4\074\uffc4" +
    "\001\002\000\004\002\uff99\001\002\000\004\025\300\001" +
    "\002\000\004\002\uff9a\001\002\000\066\004\144\005\137" +
    "\006\141\007\146\014\143\015\142\016\145\017\134\020" +
    "\147\021\140\022\152\027\030\030\014\031\047\032\035" +
    "\042\025\050\026\054\015\055\051\061\037\064\012\066" +
    "\135\067\151\070\150\071\010\074\032\001\002\000\034" +
    "\026\303\027\030\030\014\031\047\032\035\042\025\050" +
    "\026\054\015\055\051\061\037\064\012\071\010\074\032" +
    "\001\002\000\004\054\304\001\002\000\052\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\042\uffaf\044\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\053\uffaf\054\uffaf\055\uffaf\060\uffaf\061" +
    "\uffaf\062\uffaf\064\uffaf\065\uffaf\071\uffaf\074\uffaf\001\002" +
    "\000\004\074\306\001\002\000\004\065\310\001\002\000" +
    "\006\026\320\065\317\001\002\000\010\072\312\074\311" +
    "\075\314\001\002\000\032\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\042\uffdd\050\uffdd\054\uffdd\055\uffdd\061\uffdd\064\uffdd" +
    "\071\uffdd\074\uffdd\001\002\000\032\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\042\uffdf\050\uffdf\054\uffdf\055\uffdf\061\uffdf" +
    "\064\uffdf\071\uffdf\074\uffdf\001\002\000\032\027\030\030" +
    "\014\031\047\032\035\042\025\050\026\054\015\055\051" +
    "\061\037\064\012\071\010\074\032\001\002\000\032\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\042\uffde\050\uffde\054\uffde" +
    "\055\uffde\061\uffde\064\uffde\071\uffde\074\uffde\001\002\000" +
    "\036\026\uffaa\027\030\030\014\031\047\032\035\042\025" +
    "\050\026\054\015\055\051\061\037\064\012\065\uffaa\071" +
    "\010\074\032\001\002\000\052\026\uffac\027\uffac\030\uffac" +
    "\031\uffac\032\uffac\042\uffac\044\uffac\047\uffac\050\uffac\051" +
    "\uffac\053\uffac\054\uffac\055\uffac\060\uffac\061\uffac\062\uffac" +
    "\064\uffac\065\uffac\071\uffac\074\uffac\001\002\000\012\051" +
    "\322\072\312\074\311\075\314\001\002\000\004\064\321" +
    "\001\002\000\052\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\042\uffa8\044\uffa8\047\uffa8\050\uffa8\051\uffa8\053\uffa8" +
    "\054\uffa8\055\uffa8\060\uffa8\061\uffa8\062\uffa8\064\uffa8\065" +
    "\uffa8\071\uffa8\074\uffa8\001\002\000\032\027\030\030\014" +
    "\031\047\032\035\042\025\050\026\054\015\055\051\061" +
    "\037\064\012\071\010\074\032\001\002\000\032\027\030" +
    "\030\014\031\047\032\035\042\025\050\026\054\015\055" +
    "\051\061\037\064\012\071\010\074\032\001\002\000\036" +
    "\026\uffab\027\030\030\014\031\047\032\035\042\025\050" +
    "\026\054\015\055\051\061\037\064\012\065\uffab\071\010" +
    "\074\032\001\002\000\034\026\326\027\030\030\014\031" +
    "\047\032\035\042\025\050\026\054\015\055\051\061\037" +
    "\064\012\071\010\074\032\001\002\000\004\064\327\001" +
    "\002\000\052\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\042\uffa9\044\uffa9\047\uffa9\050\uffa9\051\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\060\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9" +
    "\071\uffa9\074\uffa9\001\002\000\052\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\042\uffbb\044\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\053\uffbb\054\uffbb\055\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\064\uffbb\065\uffbb\071\uffbb\074\uffbb\001\002\000\052" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\042\uffba\044" +
    "\uffba\047\uffba\050\uffba\051\uffba\053\uffba\054\uffba\055\uffba" +
    "\060\uffba\061\uffba\062\uffba\064\uffba\065\uffba\071\uffba\074" +
    "\uffba\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\012\004\015" +
    "\005\032\007\022\010\037\011\030\013\044\014\035\015" +
    "\043\016\010\017\021\020\020\022\051\024\026\025\040" +
    "\031\041\032\045\033\042\034\047\037\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\042\300\047\107\050" +
    "\106\051\115\001\001\000\046\005\175\007\022\010\037" +
    "\011\030\013\044\014\035\015\043\016\010\017\021\020" +
    "\020\022\051\024\026\025\040\031\041\032\045\033\042" +
    "\034\047\037\023\001\001\000\002\001\001\000\012\042" +
    "\274\047\107\050\106\051\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\071\001" +
    "\001\000\002\001\001\000\012\042\206\047\107\050\106" +
    "\051\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\006" +
    "\161\007\063\010\037\011\030\013\044\014\035\015\043" +
    "\024\026\025\040\031\041\032\045\033\042\034\047\037" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\006\065\007\063\010\037\011\030\013\044" +
    "\014\035\015\043\024\026\025\040\031\041\032\045\033" +
    "\042\034\047\037\064\001\001\000\002\001\001\000\004" +
    "\040\071\001\001\000\034\007\066\010\037\011\030\013" +
    "\044\014\035\015\043\024\026\025\040\031\041\032\045" +
    "\033\042\034\047\037\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\076\041\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\042\110\047\107\050\106\051\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\042\126\047\107\050\106" +
    "\051\115\052\127\001\001\000\004\043\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\135\001\001\000" +
    "\002\001\001\000\012\042\132\047\107\050\106\051\115" +
    "\001\001\000\002\001\001\000\004\046\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\047\152\050\106" +
    "\051\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\160" +
    "\001\001\000\002\001\001\000\034\007\066\010\037\011" +
    "\030\013\044\014\035\015\043\024\026\025\040\031\041" +
    "\032\045\033\042\034\047\037\064\001\001\000\002\001" +
    "\001\000\012\042\164\047\107\050\106\051\115\001\001" +
    "\000\004\046\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\004\170\005\032\007\022\010\037\011\030" +
    "\013\044\014\035\015\043\016\010\017\021\020\020\021" +
    "\172\022\051\024\026\025\040\031\041\032\045\033\042" +
    "\034\047\037\023\001\001\000\046\005\175\007\022\010" +
    "\037\011\030\013\044\014\035\015\043\016\010\017\021" +
    "\020\020\022\051\024\026\025\040\031\041\032\045\033" +
    "\042\034\047\037\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\042\205\047\107\050\106" +
    "\051\115\001\001\000\004\043\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\042\204\047\107\050\106" +
    "\051\115\001\001\000\004\046\135\001\001\000\004\046" +
    "\135\001\001\000\004\046\135\001\001\000\036\006\210" +
    "\007\063\010\037\011\030\013\044\014\035\015\043\024" +
    "\026\025\040\031\041\032\045\033\042\034\047\037\064" +
    "\001\001\000\040\007\066\010\037\011\030\013\044\014" +
    "\035\015\043\024\026\025\040\026\215\027\213\031\041" +
    "\032\045\033\042\034\047\037\064\001\001\000\036\006" +
    "\223\007\063\010\037\011\030\013\044\014\035\015\043" +
    "\024\026\025\040\031\041\032\045\033\042\034\047\037" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\042\216\047\107\050\106\051\115\001\001\000\002\001" +
    "\001\000\004\046\135\001\001\000\036\006\220\007\063" +
    "\010\037\011\030\013\044\014\035\015\043\024\026\025" +
    "\040\031\041\032\045\033\042\034\047\037\064\001\001" +
    "\000\040\007\066\010\037\011\030\013\044\014\035\015" +
    "\043\024\026\025\040\026\215\027\221\031\041\032\045" +
    "\033\042\034\047\037\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\007\066\010\037\011\030\013\044" +
    "\014\035\015\043\024\026\025\040\031\041\032\045\033" +
    "\042\034\047\037\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\042" +
    "\231\047\107\050\106\051\115\001\001\000\004\046\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\242\054\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\253\001\001" +
    "\000\002\001\001\000\004\041\255\001\001\000\052\004" +
    "\256\005\032\007\022\010\037\011\030\013\044\014\035" +
    "\015\043\016\010\017\021\020\020\022\051\023\260\024" +
    "\026\025\040\031\041\032\045\033\042\034\047\037\023" +
    "\001\001\000\046\005\175\007\022\010\037\011\030\013" +
    "\044\014\035\015\043\016\010\017\021\020\020\022\051" +
    "\024\026\025\040\031\041\032\045\033\042\034\047\037" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\044\270\053\266\001\001\000\002\001\001" +
    "\000\052\004\170\005\032\007\022\010\037\011\030\013" +
    "\044\014\035\015\043\016\010\017\021\020\020\021\273" +
    "\022\051\024\026\025\040\031\041\032\045\033\042\034" +
    "\047\037\023\001\001\000\002\001\001\000\052\004\170" +
    "\005\032\007\022\010\037\011\030\013\044\014\035\015" +
    "\043\016\010\017\021\020\020\021\272\022\051\024\026" +
    "\025\040\031\041\032\045\033\042\034\047\037\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\006\301\007\063\010\037\011\030\013\044" +
    "\014\035\015\043\024\026\025\040\031\041\032\045\033" +
    "\042\034\047\037\064\046\135\001\001\000\034\007\066" +
    "\010\037\011\030\013\044\014\035\015\043\024\026\025" +
    "\040\031\041\032\045\033\042\034\047\037\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\306\001\001\000\004\036\315\001\001\000\004" +
    "\045\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\006\314\007\063\010\037\011\030\013\044\014\035" +
    "\015\043\024\026\025\040\031\041\032\045\033\042\034" +
    "\047\037\064\001\001\000\002\001\001\000\034\007\066" +
    "\010\037\011\030\013\044\014\035\015\043\024\026\025" +
    "\040\031\041\032\045\033\042\034\047\037\064\001\001" +
    "\000\002\001\001\000\004\045\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\006\324\007\063\010\037" +
    "\011\030\013\044\014\035\015\043\024\026\025\040\031" +
    "\041\032\045\033\042\034\047\037\064\001\001\000\036" +
    "\006\323\007\063\010\037\011\030\013\044\014\035\015" +
    "\043\024\026\025\040\031\041\032\045\033\042\034\047" +
    "\037\064\001\001\000\034\007\066\010\037\011\030\013" +
    "\044\014\035\015\043\024\026\025\040\031\041\032\045" +
    "\033\042\034\047\037\064\001\001\000\034\007\066\010" +
    "\037\011\030\013\044\014\035\015\043\024\026\025\040" +
    "\031\041\032\045\033\042\034\047\037\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
 public String salida = "";
 public String nombreclase = "";
public ArrayList<Symbol> error = new ArrayList<Symbol>();

    String expresion = "";
    public void syntax_error(Symbol s){
    System.err.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ".  " +s.value + " no reconocido." );
        this.error.add(s);
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         System.err.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". " + s.value + " no reconocido.");
        this.error.add(s);
        System.err.println(s);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

//Codigo de acciones
      

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cuerpo ::= END MODULE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n\n}\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cuerpo ::= codigo END MODULE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"\n\n}\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentenciaf ::= END FUNCTION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n\n}\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentenciaf ::= codigo END FUNCTION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"\n\n}\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaf",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // paramef ::= PAREC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramef",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // paramef ::= param PAREC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+""+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramef",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // funcion ::= acceso FUNCTION ID PAREA paramef AS tipodato sentenciaf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n\n"+a+" "+g+" "+c+"("+e+"{\n"+h;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentenciam ::= END SUB 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n\n}\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciam",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentenciam ::= codigo END SUB 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"\n\n}\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciam",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parame ::= PAREC sentenciam 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "){\n"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parame",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parame ::= param PAREC sentenciam 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"){\n"+c ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parame",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // norm ::= acceso SUB ID PAREA parame 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n\n"+a+" void "+c+"("+e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("norm",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // main ::= SUB MAIN PAREA PAREC sentenciam 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n\npublic static void main(String[] args){\n"+e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // metodo ::= norm 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // metodo ::= main 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // caselse ::= END SELECT 
            {
              String RESULT =null;
		RESULT = "\n\n}\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caselse",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // caselse ::= CASE ELSE codigos END SELECT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n\ndefault:\n"+c+"\n\n}\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caselse",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cases ::= CASE caso codigos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n\ncase "+b+":\n"+c+"\n\nBreak;\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cases ::= cases CASE caso codigos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"\n\ncase "+c+":\n"+d+"\n\nBreak;\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // switch ::= SELECT CASE ID cases caselse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n\nswitch( "+c+" ){"+d+" "+e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // do ::= DO codigos LOOP UNTIL exp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n\ndo{\n"+b+"\n\n}while("+e+");\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // for ::= FOR ID AS INTEGER IGUAL NUMERO TO NUMERO STEP NUMERO codigos NEXT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		int inicio,fin,salto;
          inicio = Integer.parseInt(f);
          fin = Integer.parseInt(h);
          salto = Integer.parseInt(j);

          if (inicio<fin && salto>0) {
            RESULT = "\n\nfor(int "+b+" = "+inicio+"; "+b+"<"+fin+"; " +b+" = "+b+" + ("+salto+")){\n"+k+"\n\n}\n";
          } else if(inicio>fin && salto<0){
            RESULT = "\n\nfor(int "+b+" = "+inicio+"; "+b+">"+fin+"; " +b+" = "+b+" + ("+salto+")){\n"+k+"\n\n}\n";
          }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // while ::= WHILE exp codigos END WHILE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n\nwhile("+b+"){\n"+c+"\n\n}\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // else ::= END IF 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n}\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // else ::= ELSE codigos END IF 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n}else{\n"+b+"\n\n}\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // elseif ::= else 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // elseif ::= ELSEIF exp THEN codigos elseif 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n}else if("+b+"){\n"+d+"\n"+e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ifelse ::= IF exp THEN codigos elseif 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n\nif("+b+"){\n"+d+"\n"+e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifelse",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentenciascontrol ::= switch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciascontrol",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentenciascontrol ::= do 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciascontrol",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentenciascontrol ::= for 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciascontrol",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentenciascontrol ::= while 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciascontrol",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentenciascontrol ::= ifelse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciascontrol",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // codigosp ::= EXIT WHILE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\nBreak;";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigosp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // codigosp ::= EXIT FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\nBreak;";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigosp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // codigosp ::= sentenciascontrol 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigosp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // codigosp ::= impresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigosp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // codigosp ::= declararreglos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigosp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // codigosp ::= asignarreglos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigosp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // codigosp ::= asignacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigosp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // codigosp ::= declaracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigosp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // codigos ::= codigosp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // codigos ::= codigos codigosp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // codigop ::= RETURN exp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\nreturn "+b+";";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // codigop ::= funcion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // codigop ::= metodo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // codigop ::= codigosp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // codigo ::= codigop 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // codigo ::= codigo codigop 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // impresion ::= CONSOLE PUNTO WRITELINE PAREA exp PAREC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "\nSystem.out.println("+a+");";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // asignarreglos ::= ID CORA lista_num CORC IGUAL exp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String listaid = c;
                    String dimcorchetes = "";
                    String[] partes = listaid.split(",");  
                    int dimension = partes.length;
                    for(int i = 0; i < dimension; i++){
                      dimcorchetes = dimcorchetes + "["+partes[i]+"]";
                    }
                    RESULT = "\n"+a+dimcorchetes+" "+e+" "+f+";";
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarreglos",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declararreglos ::= acceso ID CORA lista_num CORC AS tipodato 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String listaid = d;
                    String corchetes = "";
                    String dimcorchetes = "";
                    String[] partes = listaid.split(",");  
                    int dimension = partes.length;
                    for(int i = 0; i < dimension; i++){
                      corchetes = corchetes + "[]";
                      dimcorchetes = dimcorchetes + "["+partes[i]+"]";
                    }
                    RESULT = "\n"+a+" "+g+corchetes+" "+b+" = new "+g+" "+dimcorchetes+";";
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declararreglos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declarasignacion ::= tipodato 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarasignacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declarasignacion ::= tipodato IGUAL exp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+","+c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarasignacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacion ::= ID IGUAL exp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "\n"+a+" "+b+" "+c+";";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion ::= acceso lista_id AS declarasignacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String decla = d;
                  String[] partes = decla.split(","); 
                  if (partes.length>1){
                    RESULT = "\n"+a+" "+partes[0]+" "+b+" = "+partes[1]+";";
                  } else{
                    RESULT = "\n"+a+" "+d+" "+b+";";
                  }
                  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // param ::= BYVAL ID AS tipodato 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = d+" "+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // param ::= param COMA BYVAL ID AS tipodato 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+""+b+" "+f+" "+d;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lista_num ::= NUMERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_num",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista_num ::= lista_num COMA NUMERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+""+b+""+c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_num",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_id ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_id",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_id ::= lista_id COMA ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+""+b+""+c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_id",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipodato ::= STRING 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "String";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipodato",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipodato ::= LONG 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "long";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipodato",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipodato ::= INTEGER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipodato",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipodato ::= DOUBLE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "double";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipodato",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipodato ::= CHAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipodato",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipodato ::= BOOLEAN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipodato",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // caso ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // caso ::= CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // caso ::= NUMERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // acceso ::= STATIC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "static";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // acceso ::= DIM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "private";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // acceso ::= PRIVATE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "private";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // acceso ::= PUBLIC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "public";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fparam ::= exp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fparam",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fparam ::= fparam COMA exp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+b+" "+c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fparam",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funciones ::= ID PAREA fparam PAREC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+b+c+d;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arreglo ::= ID CORA lista_num CORC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String listaid = c;
              String dimcorchetes = "";
              String[] partes = listaid.split(",");  
              int dimension = partes.length;
              for(int i = 0; i < dimension; i++){
                dimcorchetes = dimcorchetes + "["+partes[i]+"]";
              }
              RESULT = a+dimcorchetes;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= funciones 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor ::= arreglo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor ::= NDECIMAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor ::= FALSE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor ::= TRUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valor ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valor ::= CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valor ::= NUMERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simbolo ::= NOT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "!";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simbolo ::= OR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "||";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // simbolo ::= AND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "&&";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // simbolo ::= NOIGUAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "!=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // simbolo ::= IGUAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "==";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simbolo ::= MENORIGUAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simbolo ::= MAYORIGUAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simbolo ::= MENORQUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // simbolo ::= MAYORQUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // simbolo ::= AMPERSAND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "+";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // simbolo ::= DIV 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // simbolo ::= POR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // simbolo ::= MENOS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // simbolo ::= MAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= valor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= exp simbolo valor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+" "+b+" "+c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // vb ::= MODULE ID cuerpo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  this.parser.nombreclase = b;
  this.parser.salida = "public class "+b+"{\n"+c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vb",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= vb EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

