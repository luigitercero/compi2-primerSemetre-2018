
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 10 00:03:30 CST 2018
//----------------------------------------------------

package html.org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;
import com.ParserTree.Node;
import com.ParserTree.ParserTree;
import com.ParserTree.Location;
import com.ParserTree.Term;
import com.ParserTree.Token;
import compi2.Etiqueta.*;
import java.awt.Component;
import java.util.ArrayList;
import compi2.Etiqueta.Componente.*;
import css.org.compi2.codigo3d.CompilarCSS;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 10 00:03:30 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\030\003\000\002\035" +
    "\004\000\002\047\007\000\002\047\004\000\002\047\010" +
    "\000\002\047\005\000\002\047\003\000\002\050\005\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\005\000\002\021\003\000\002\022\003\000\002\022" +
    "\007\000\002\024\005\000\002\025\004\000\002\025\004" +
    "\000\002\025\004\000\002\025\005\000\002\026\003\000" +
    "\002\026\007\000\002\023\006\000\002\023\005\000\002" +
    "\023\005\000\002\023\007\000\002\023\006\000\002\023" +
    "\005\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\053\003\000\002\053\004\000\002\054\004\000" +
    "\002\054\003\000\002\007\005\000\002\010\004\000\002" +
    "\010\004\000\002\011\003\000\002\011\007\000\002\056" +
    "\006\000\002\055\004\000\002\055\003\000\002\014\003" +
    "\000\002\014\007\000\002\012\003\000\002\012\007\000" +
    "\002\012\004\000\002\013\003\000\002\013\007\000\002" +
    "\013\004\000\002\015\003\000\002\015\007\000\002\015" +
    "\004\000\002\016\003\000\002\016\007\000\002\016\004" +
    "\000\002\017\003\000\002\017\007\000\002\017\004\000" +
    "\002\020\003\000\002\020\006\000\002\020\004\000\002" +
    "\052\005\000\002\004\005\000\002\005\005\000\002\051" +
    "\005\000\002\051\004\000\002\006\004\000\002\006\003" +
    "\000\002\027\012\000\002\027\012\000\002\027\007\000" +
    "\002\046\004\000\002\032\004\000\002\032\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\004\026\006\001\002\000\004\002\000\001" +
    "\002\000\012\003\013\025\016\032\014\040\021\001\002" +
    "\000\004\015\011\001\002\000\004\002\010\001\002\000" +
    "\004\002\001\001\002\000\012\003\uffb7\025\uffb7\032\uffb7" +
    "\040\uffb7\001\002\000\004\025\275\001\002\000\034\002" +
    "\ufffa\003\ufff4\023\ufff4\027\ufff4\041\ufff4\044\ufff4\046\ufff4" +
    "\050\ufff4\052\ufff4\054\ufff4\056\ufff4\060\ufff4\070\ufff4\001" +
    "\002\000\004\015\231\001\002\000\032\003\053\023\040" +
    "\027\036\041\033\044\030\046\051\050\055\052\031\054" +
    "\032\056\045\060\042\070\056\001\002\000\004\015\027" +
    "\001\002\000\006\004\022\015\023\001\002\000\004\002" +
    "\uffff\001\002\000\006\004\ufff3\015\ufff3\001\002\000\004" +
    "\010\024\001\002\000\032\003\ufff8\023\ufff8\027\ufff8\041" +
    "\ufff8\044\ufff8\046\ufff8\050\ufff8\052\ufff8\054\ufff8\056\ufff8" +
    "\060\ufff8\070\ufff8\001\002\000\004\017\025\001\002\000" +
    "\004\024\026\001\002\000\006\004\ufff2\015\ufff2\001\002" +
    "\000\004\002\ufffd\001\002\000\006\004\uffec\015\uffec\001" +
    "\002\000\010\003\uffcd\004\uffcd\015\uffcd\001\002\000\010" +
    "\003\uffd3\004\uffd3\015\uffd3\001\002\000\004\015\230\001" +
    "\002\000\010\003\222\004\221\047\223\001\002\000\010" +
    "\003\214\004\212\071\213\001\002\000\010\003\uffc4\004" +
    "\uffc4\030\uffc4\001\002\000\034\003\uffe2\023\uffe2\027\uffe2" +
    "\041\uffe2\044\uffe2\045\uffe2\046\uffe2\050\uffe2\052\uffe2\054" +
    "\uffe2\056\uffe2\060\uffe2\070\uffe2\001\002\000\004\015\211" +
    "\001\002\000\032\003\ufff6\023\ufff6\027\ufff6\041\ufff6\044" +
    "\ufff6\046\ufff6\050\ufff6\052\ufff6\054\ufff6\056\ufff6\060\ufff6" +
    "\070\ufff6\001\002\000\004\062\202\001\002\000\010\003" +
    "\167\004\166\015\170\001\002\000\010\003\156\004\155" +
    "\015\157\001\002\000\010\003\uffca\004\uffca\015\uffca\001" +
    "\002\000\006\004\150\015\151\001\002\000\010\003\136" +
    "\004\135\015\137\001\002\000\010\003\130\004\127\030" +
    "\131\001\002\000\010\003\uffd0\004\uffd0\047\uffd0\001\002" +
    "\000\032\003\053\023\122\027\036\044\030\045\121\046" +
    "\051\050\055\052\031\054\032\056\045\060\042\070\056" +
    "\001\002\000\034\003\uffe3\023\uffe3\027\uffe3\041\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\050\uffe3\052\uffe3\054\uffe3\056\uffe3" +
    "\060\uffe3\070\uffe3\001\002\000\032\003\ufff7\023\ufff7\027" +
    "\ufff7\041\ufff7\044\ufff7\046\ufff7\050\ufff7\052\ufff7\054\ufff7" +
    "\056\ufff7\060\ufff7\070\ufff7\001\002\000\006\004\uffda\015" +
    "\uffda\001\002\000\010\003\uffc7\004\uffc7\071\uffc7\001\002" +
    "\000\006\051\071\072\067\001\002\000\034\003\uffe4\023" +
    "\uffe4\027\uffe4\041\uffe4\044\uffe4\045\uffe4\046\uffe4\050\uffe4" +
    "\052\uffe4\054\uffe4\056\uffe4\060\uffe4\070\uffe4\001\002\000" +
    "\006\004\062\015\063\001\002\000\004\010\064\001\002" +
    "\000\006\051\uffdc\072\uffdc\001\002\000\004\017\065\001" +
    "\002\000\004\024\066\001\002\000\006\004\uffd9\015\uffd9" +
    "\001\002\000\006\004\uffd5\015\uffd5\001\002\000\006\051" +
    "\uffdb\072\uffdb\001\002\000\004\015\120\001\002\000\006" +
    "\004\073\015\074\001\002\000\004\010\115\001\002\000" +
    "\026\004\106\005\103\010\107\011\076\012\111\015\105" +
    "\016\102\020\100\022\110\073\101\001\002\000\004\015" +
    "\114\001\002\000\032\004\uffaf\005\uffaf\010\uffaf\011\uffaf" +
    "\012\uffaf\015\uffaf\016\uffaf\020\uffaf\022\uffaf\053\uffaf\065" +
    "\uffaf\073\uffaf\001\002\000\026\004\106\005\103\010\107" +
    "\011\076\012\111\015\105\016\102\020\100\022\110\073" +
    "\112\001\002\000\032\004\uffad\005\uffad\010\uffad\011\uffad" +
    "\012\uffad\015\uffad\016\uffad\020\uffad\022\uffad\053\uffad\065" +
    "\uffad\073\uffad\001\002\000\004\015\uffd6\001\002\000\032" +
    "\004\uffac\005\uffac\010\uffac\011\uffac\012\uffac\015\uffac\016" +
    "\uffac\020\uffac\022\uffac\053\uffac\065\uffac\073\uffac\001\002" +
    "\000\032\004\uffb2\005\uffb2\010\uffb2\011\uffb2\012\uffb2\015" +
    "\uffb2\016\uffb2\020\uffb2\022\uffb2\053\uffb2\065\uffb2\073\uffb2" +
    "\001\002\000\032\004\uffb5\005\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\015\uffb5\016\uffb5\020\uffb5\022\uffb5\053\uffb5\065\uffb5" +
    "\073\uffb5\001\002\000\032\004\uffb1\005\uffb1\010\uffb1\011" +
    "\uffb1\012\uffb1\015\uffb1\016\uffb1\020\uffb1\022\uffb1\053\uffb1" +
    "\065\uffb1\073\uffb1\001\002\000\032\004\uffb4\005\uffb4\010" +
    "\uffb4\011\uffb4\012\uffb4\015\uffb4\016\uffb4\020\uffb4\022\uffb4" +
    "\053\uffb4\065\uffb4\073\uffb4\001\002\000\032\004\uffb0\005" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\015\uffb0\016\uffb0\020\uffb0" +
    "\022\uffb0\053\uffb0\065\uffb0\073\uffb0\001\002\000\032\004" +
    "\uffb3\005\uffb3\010\uffb3\011\uffb3\012\uffb3\015\uffb3\016\uffb3" +
    "\020\uffb3\022\uffb3\053\uffb3\065\uffb3\073\uffb3\001\002\000" +
    "\032\004\uffae\005\uffae\010\uffae\011\uffae\012\uffae\015\uffae" +
    "\016\uffae\020\uffae\022\uffae\053\uffae\065\uffae\073\uffae\001" +
    "\002\000\004\015\uffd7\001\002\000\032\004\uffb6\005\uffb6" +
    "\010\uffb6\011\uffb6\012\uffb6\015\uffb6\016\uffb6\020\uffb6\022" +
    "\uffb6\053\uffb6\065\uffb6\073\uffb6\001\002\000\006\051\uffd8" +
    "\072\uffd8\001\002\000\004\017\116\001\002\000\004\024" +
    "\117\001\002\000\006\004\uffd4\015\uffd4\001\002\000\034" +
    "\003\uffdd\023\uffdd\027\uffdd\041\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\050\uffdd\052\uffdd\054\uffdd\056\uffdd\060\uffdd\070\uffdd" +
    "\001\002\000\004\015\126\001\002\000\004\015\125\001" +
    "\002\000\032\003\uffee\023\uffee\027\uffee\044\uffee\045\uffee" +
    "\046\uffee\050\uffee\052\uffee\054\uffee\056\uffee\060\uffee\070" +
    "\uffee\001\002\000\032\003\uffef\023\uffef\027\uffef\044\uffef" +
    "\045\uffef\046\uffef\050\uffef\052\uffef\054\uffef\056\uffef\060" +
    "\uffef\070\uffef\001\002\000\032\003\uffed\023\uffed\027\uffed" +
    "\044\uffed\045\uffed\046\uffed\050\uffed\052\uffed\054\uffed\056" +
    "\uffed\060\uffed\070\uffed\001\002\000\034\003\ufff1\023\ufff1" +
    "\027\ufff1\041\ufff1\044\ufff1\045\ufff1\046\ufff1\050\ufff1\052" +
    "\ufff1\054\ufff1\056\ufff1\060\ufff1\070\ufff1\001\002\000\004" +
    "\010\133\001\002\000\010\003\uffc2\004\uffc2\030\uffc2\001" +
    "\002\000\004\015\132\001\002\000\034\003\uffe8\023\uffe8" +
    "\027\uffe8\041\uffe8\044\uffe8\045\uffe8\046\uffe8\050\uffe8\052" +
    "\uffe8\054\uffe8\056\uffe8\060\uffe8\070\uffe8\001\002\000\004" +
    "\017\134\001\002\000\010\003\uffc3\004\uffc3\030\uffc3\001" +
    "\002\000\004\010\145\001\002\000\010\003\uffd1\004\uffd1" +
    "\015\uffd1\001\002\000\006\004\140\055\142\001\002\000" +
    "\004\055\144\001\002\000\004\015\143\001\002\000\004" +
    "\015\uffde\001\002\000\034\003\uffea\023\uffea\027\uffea\041" +
    "\uffea\044\uffea\045\uffea\046\uffea\050\uffea\052\uffea\054\uffea" +
    "\056\uffea\060\uffea\070\uffea\001\002\000\004\015\uffdf\001" +
    "\002\000\004\017\146\001\002\000\004\024\147\001\002" +
    "\000\010\003\uffd2\004\uffd2\015\uffd2\001\002\000\004\010" +
    "\152\001\002\000\032\003\ufff0\023\ufff0\027\ufff0\044\ufff0" +
    "\045\ufff0\046\ufff0\050\ufff0\052\ufff0\054\ufff0\056\ufff0\060" +
    "\ufff0\070\ufff0\001\002\000\004\017\153\001\002\000\004" +
    "\024\154\001\002\000\006\004\uffeb\015\uffeb\001\002\000" +
    "\004\010\163\001\002\000\010\003\uffcb\004\uffcb\015\uffcb" +
    "\001\002\000\024\004\106\005\103\010\107\011\076\012" +
    "\111\015\105\016\102\020\100\022\110\001\002\000\026" +
    "\004\106\005\103\010\107\011\076\012\111\015\105\016" +
    "\102\020\100\022\110\053\161\001\002\000\004\015\162" +
    "\001\002\000\034\003\uffe7\023\uffe7\027\uffe7\041\uffe7\044" +
    "\uffe7\045\uffe7\046\uffe7\050\uffe7\052\uffe7\054\uffe7\056\uffe7" +
    "\060\uffe7\070\uffe7\001\002\000\004\017\164\001\002\000" +
    "\004\024\165\001\002\000\010\003\uffcc\004\uffcc\015\uffcc" +
    "\001\002\000\004\010\176\001\002\000\010\003\uffc8\004" +
    "\uffc8\015\uffc8\001\002\000\006\004\171\057\172\001\002" +
    "\000\004\057\175\001\002\000\004\015\uffe1\001\002\000" +
    "\004\015\174\001\002\000\034\003\uffe6\023\uffe6\027\uffe6" +
    "\041\uffe6\044\uffe6\045\uffe6\046\uffe6\050\uffe6\052\uffe6\054" +
    "\uffe6\056\uffe6\060\uffe6\070\uffe6\001\002\000\004\015\uffe0" +
    "\001\002\000\004\017\177\001\002\000\004\024\200\001" +
    "\002\000\010\003\uffc9\004\uffc9\015\uffc9\001\002\000\004" +
    "\061\210\001\002\000\004\064\204\001\002\000\004\063" +
    "\207\001\002\000\024\004\106\005\103\010\107\011\076" +
    "\012\111\015\105\016\102\020\100\022\110\001\002\000" +
    "\026\004\106\005\103\010\107\011\076\012\111\015\105" +
    "\016\102\020\100\022\110\065\206\001\002\000\004\063" +
    "\uffbf\001\002\000\004\061\uffc0\001\002\000\034\003\uffc1" +
    "\023\uffc1\027\uffc1\041\uffc1\044\uffc1\045\uffc1\046\uffc1\050" +
    "\uffc1\052\uffc1\054\uffc1\056\uffc1\060\uffc1\070\uffc1\001\002" +
    "\000\032\003\ufff5\023\ufff5\027\ufff5\041\ufff5\044\ufff5\046" +
    "\ufff5\050\ufff5\052\ufff5\054\ufff5\056\ufff5\060\ufff5\070\ufff5" +
    "\001\002\000\004\010\216\001\002\000\004\015\215\001" +
    "\002\000\010\003\uffc5\004\uffc5\071\uffc5\001\002\000\034" +
    "\003\uffe5\023\uffe5\027\uffe5\041\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\050\uffe5\052\uffe5\054\uffe5\056\uffe5\060\uffe5\070\uffe5" +
    "\001\002\000\004\017\217\001\002\000\004\024\220\001" +
    "\002\000\010\003\uffc6\004\uffc6\071\uffc6\001\002\000\004" +
    "\010\225\001\002\000\010\003\uffce\004\uffce\047\uffce\001" +
    "\002\000\004\015\224\001\002\000\034\003\uffe9\023\uffe9" +
    "\027\uffe9\041\uffe9\044\uffe9\045\uffe9\046\uffe9\050\uffe9\052" +
    "\uffe9\054\uffe9\056\uffe9\060\uffe9\070\uffe9\001\002\000\004" +
    "\017\226\001\002\000\004\024\227\001\002\000\010\003" +
    "\uffcf\004\uffcf\047\uffcf\001\002\000\004\025\ufff9\001\002" +
    "\000\012\033\232\034\236\036\237\042\234\001\002\000" +
    "\004\015\274\001\002\000\010\003\267\025\270\040\021" +
    "\001\002\000\004\015\262\001\002\000\012\033\uffbb\034" +
    "\uffbb\036\uffbb\042\uffbb\001\002\000\004\004\253\001\002" +
    "\000\004\004\244\001\002\000\012\033\241\034\236\036" +
    "\237\042\234\001\002\000\004\015\243\001\002\000\012" +
    "\033\uffbc\034\uffbc\036\uffbc\042\uffbc\001\002\000\010\003" +
    "\uffbe\025\uffbe\040\uffbe\001\002\000\004\010\245\001\002" +
    "\000\004\017\246\001\002\000\004\024\247\001\002\000" +
    "\004\015\250\001\002\000\004\037\251\001\002\000\004" +
    "\015\252\001\002\000\012\033\uffb9\034\uffb9\036\uffb9\042" +
    "\uffb9\001\002\000\004\010\254\001\002\000\004\017\255" +
    "\001\002\000\004\024\256\001\002\000\004\015\257\001" +
    "\002\000\004\035\260\001\002\000\004\015\261\001\002" +
    "\000\012\033\uffba\034\uffba\036\uffba\042\uffba\001\002\000" +
    "\004\004\263\001\002\000\004\043\264\001\002\000\004" +
    "\015\265\001\002\000\012\033\uffb8\034\uffb8\036\uffb8\042" +
    "\uffb8\001\002\000\004\025\272\001\002\000\032\003\ufff4" +
    "\023\ufff4\027\ufff4\041\ufff4\044\ufff4\046\ufff4\050\ufff4\052" +
    "\ufff4\054\ufff4\056\ufff4\060\ufff4\070\ufff4\001\002\000\004" +
    "\015\271\001\002\000\004\002\ufffe\001\002\000\004\015" +
    "\273\001\002\000\004\002\ufffc\001\002\000\010\003\uffbd" +
    "\025\uffbd\040\uffbd\001\002\000\004\015\276\001\002\000" +
    "\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\010\030\006\035\003\046\004\001\001\000" +
    "\002\001\001\000\012\021\014\022\016\047\017\050\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\007\036\010\056\011\060\012" +
    "\046\013\033\015\043\016\042\017\034\020\047\023\053" +
    "\024\040\025\051\026\045\052\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\007\036\010\056" +
    "\011\060\012\046\013\033\015\043\016\042\017\034\020" +
    "\047\023\123\024\122\025\051\026\045\052\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\071\056\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\076\045\103" +
    "\055\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\157\045\103\001\001\000\004\045\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\202\001\001\000" +
    "\002\001\001\000\006\032\204\045\103\001\001\000\004" +
    "\045\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\237\027\234\051\232\001\001\000" +
    "\002\001\001\000\010\021\014\022\016\050\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
 public ParserTree parserTree;
public ArrayList<Symbol> error = new ArrayList<Symbol>();
public CHTML chtml = new CHTML();


    public String ruta ="";

   public observador.errores.RecibirError enviar = chtml;
    public String enviarError(String s){
        if (enviar != null){
            enviar.recibirError(ruta +"\n   "+s);
        }
    return s;
    }
    
    public void syntax_error(Symbol s){
    System.err.println( enviarError("Error Sintactico en la Linea  " + (s.right+1) +" Columna "+s.left+ ". Simbolo \'" +s.value + "\' no reconocido." ));

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         System.err.println(enviarError("Error Sintactico en la Linea no se logro recuperar de error" + (s.right+1)+ "Columna "+s.left+". " + s.value + " no reconocido."));
        //this.error.add(s);
        //System.err.println(s);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

//Codigo de acciones
     public Color color = new Color (); 

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // texto ::= DOSPUNTOS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // texto ::= MENOS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // texto ::= PAREC 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // texto ::= PAREA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // texto ::= IGUAL 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // texto ::= MAYORQUE 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // texto ::= ENTERO 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // texto ::= CUALQUIERA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // texto ::= ID 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		           RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // textos ::= texto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // textos ::= textos texto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a = a + b; RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // chtml ::= CHTML MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chtml",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // archivo ::= TITULO MAYORQUE ID FINTITULO MAYORQUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("el TITULO es " + a); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // archivo ::= CCSS ID IGUAL CADENA PUNTOCOMA MAYORQUE FINCCSS MAYORQUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		  
                CompilarCSS c;
                try {
                  c = new CompilarCSS(a,this.parser.chtml,this.parser.chtml);
                  this.parser.chtml.css.add(c.getParser().css);
                } catch (Exception e) {
                    System.err.println("error al compilar arcihivo " + a);
                }
                 RESULT = "";
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // archivo ::= CJS ID IGUAL CADENA PUNTOCOMA MAYORQUE FINCJS MAYORQUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            

                try {
                  
                    com.Navegador.JS.JS c = new  com.Navegador.JS.JS(a,this.parser.chtml,this.parser.chtml);
                    this.parser.chtml.enlazarObservador(c.js);
                     c.js.cssi = this.parser.chtml.componetesCSSI;
                    
                } catch (Exception e) {
                    System.err.println("error al compilar arcihivo " + a);
                }
                

            System.out.println("cargar cjs " + a); RESULT ="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Larchivo ::= archivo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Larchivo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Larchivo ::= Larchivo archivo 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Larchivo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // archivos ::= FINENCABEZADO MAYORQUE 
            {
              String RESULT =null;
		RESULT = "defautlt";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // archivos ::= Larchivo FINENCABEZADO MAYORQUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivos",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // columna ::= CB textos FINCB 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // fila ::= FIL columna FINFIL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tabla ::= TABLA fila FINTABLA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabla",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cajatexto ::= cajatexto error 
            {
              Caja_Texto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caja_Texto a = (Caja_Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cajatexto",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cajatexto ::= cajatexto ID IGUAL CADENA 
            {
              Caja_Texto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Caja_Texto a = (Caja_Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addAtributo(b,c); RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cajatexto",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cajatexto ::= CAJATEXTO 
            {
              Caja_Texto RESULT =null;
		RESULT = new Caja_Texto(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cajatexto",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // textoa ::= textoa error 
            {
              Texto_A RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Texto_A a = (Texto_A)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textoa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // textoa ::= textoa ID IGUAL CADENA PUNTOCOMA 
            {
              Texto_A RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Texto_A a = (Texto_A)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c); RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textoa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // textoa ::= TEXTOA 
            {
              Texto_A RESULT =null;
		RESULT = new Texto_A(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textoa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // enlace ::= enlace error 
            {
              Enlace RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Enlace a = (Enlace)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enlace",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // enlace ::= enlace ID IGUAL CADENA PUNTOCOMA 
            {
              Enlace RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Enlace a = (Enlace)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c); RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enlace",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // enlace ::= ENLACE 
            {
              Enlace RESULT =null;
		RESULT = new Enlace(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enlace",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // imagena ::= imagena error 
            {
              Imagen RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Imagen a = (Imagen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imagena",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // imagena ::= imagena ID IGUAL CADENA PUNTOCOMA 
            {
              Imagen RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Imagen c = (Imagen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c.addAtributo(a,b); RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imagena",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // imagena ::= IMAGEN 
            {
              Imagen RESULT =null;
		RESULT = new Imagen(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imagena",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // textoc ::= textoc error 
            {
              Texto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Texto a = (Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textoc",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // textoc ::= textoc ID IGUAL CADENA PUNTOCOMA 
            {
              Texto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Texto a = (Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c); RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textoc",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // textoc ::= TEXTO 
            {
              Texto RESULT =null;
		RESULT = new Texto(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textoc",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boton ::= boton error 
            {
              Boton RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boton a = (Boton)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boton",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // boton ::= boton ID IGUAL CADENA PUNTOCOMA 
            {
              Boton RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boton a = (Boton)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c); RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boton",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // boton ::= BOTON 
            {
              Boton RESULT =null;
		Boton a = new Boton(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);   RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boton",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // atributoOpcion ::= atributoOpcion ID IGUAL CADENA PUNTOCOMA 
            {
              Texto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Texto a = (Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c); RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributoOpcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atributoOpcion ::= OPCION 
            {
              Texto RESULT =null;
		RESULT = new Texto(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributoOpcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuepoOpcion ::= FINOPCION 
            {
              String RESULT =null;
		RESULT ="" ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuepoOpcion",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cuepoOpcion ::= textos FINOPCION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuepoOpcion",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opcion ::= atributoOpcion MAYORQUE cuepoOpcion MAYORQUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Texto a = (Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 a.addText(b); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cajaAtributo ::= cajaAtributo ID IGUAL CADENA PUNTOCOMA 
            {
              Caja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Caja a = (Caja)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c); RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cajaAtributo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cajaAtributo ::= CAJA 
            {
              Caja RESULT =null;
		 RESULT = new Caja(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cajaAtributo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cajaCuerpo ::= cajaCuerpo opcion 
            {
              Caja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caja a = (Caja)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addItem(b); RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cajaCuerpo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cajaCuerpo ::= cajaAtributo MAYORQUE 
            {
              Caja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caja a = (Caja)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cajaCuerpo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // caja ::= cajaCuerpo FINCAJA MAYORQUE 
            {
              Caja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Caja a = (Caja)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // botonCuerpo ::= FINBOTON 
            {
              String RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("botonCuerpo",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // botonCuerpo ::= ID FINBOTON 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("botonCuerpo",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // enlaceCuerpo ::= ID FINENLACE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enlaceCuerpo",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // enlaceCuerpo ::= FINENLACE 
            {
              String RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enlaceCuerpo",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cuerpoTerminal ::= caja 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caja a = (Caja)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		this.parser.chtml.componetesCSSI.add(a); this.parser.chtml.notificar(a.id, "listo");  RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cuerpoTerminal ::= error 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Texto t = new Texto(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas); RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cuerpoTerminal ::= tabla 
            {
              Component RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cuerpoTerminal ::= textoa FINTEXTOA MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texto_A a = (Texto_A)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addTexta(b);  this.parser.chtml.componetesCSSI.add(a); this.parser.chtml.notificar(a.id, "listo"); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cuerpoTerminal ::= enlace MAYORQUE enlaceCuerpo MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Enlace a = (Enlace)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addText(c);  this.parser.chtml.componetesCSSI.add(a); this.parser.chtml.notificar(a.id, "listo");  RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cuerpoTerminal ::= imagena MAYORQUE textos FINIMAGEN MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Imagen a = (Imagen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		a.addImagen(b);  this.parser.chtml.componetesCSSI.add(a); this.parser.chtml.notificar(a.id, "listo"); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cuerpoTerminal ::= cajatexto FINCAJATEXTO MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Caja_Texto a = (Caja_Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addTexta(b);  this.parser.chtml.componetesCSSI.add(a); this.parser.chtml.notificar(a.id, "listo"); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cuerpoTerminal ::= textoc FINTEXTO MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texto a = (Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addTexta(b);  this.parser.chtml.componetesCSSI.add(a); this.parser.chtml.notificar(a.id, "listo"); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpoTerminal ::= boton MAYORQUE botonCuerpo MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boton a = (Boton)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addText(b); this.parser.chtml.componetesCSSI.add(a); this.parser.chtml.notificar(a.id, "listo"); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // panelCuerpo ::= panelCuerpo ID IGUAL CADENA PUNTOCOMA 
            {
              Panel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c);RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("panelCuerpo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // panelCuerpo ::= PANEL 
            {
              Panel RESULT =null;
		RESULT = new Panel(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("panelCuerpo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LcuerpoTerminal ::= LcuerpoTerminal SALTOFIN MAYORQUE 
            {
              Panel RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Panel b = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		b.addSalto();RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LcuerpoTerminal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LcuerpoTerminal ::= LcuerpoTerminal panel 
            {
              Panel RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Panel b = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		b.addPanel(a); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LcuerpoTerminal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LcuerpoTerminal ::= LcuerpoTerminal cuerpoTerminal 
            {
              Panel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component b = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addComponent(b);RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LcuerpoTerminal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LcuerpoTerminal ::= panelCuerpo MAYORQUE 
            {
              Panel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LcuerpoTerminal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // panel ::= LcuerpoTerminal FINPANEL MAYORQUE 
            {
              Panel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("panel",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Acuerpo ::= Acuerpo ID IGUAL CADENA PUNTOCOMA 
            {
              CHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CHTML a = (CHTML)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.setBackground(color.getColor(c)); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Acuerpo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Acuerpo ::= CUERPO 
            {
              CHTML RESULT =null;
		RESULT = this.parser.chtml;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Acuerpo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Lcuerpo ::= error 
            {
              CHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Texto t = new Texto(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);
        t.addText(a.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lcuerpo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Lcuerpo ::= Lcuerpo SALTOFIN MAYORQUE 
            {
              CHTML RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CHTML b = (CHTML)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		b.addSalto();RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lcuerpo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Lcuerpo ::= Lcuerpo panel 
            {
              CHTML RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CHTML b = (CHTML)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		b.addPanel(a); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lcuerpo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Lcuerpo ::= Lcuerpo cuerpoTerminal 
            {
              CHTML RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lcuerpo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Lcuerpo ::= Acuerpo MAYORQUE 
            {
              CHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CHTML a = (CHTML)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lcuerpo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= Lcuerpo FINCUERPO MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // encabezado ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Texto t = new Texto(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);


        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // encabezado ::= cuerpo FINCHTML MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // encabezado ::= ENCABEZADO MAYORQUE archivos cuerpo FINCHTML MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // encabezado ::= FINCHTML MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= ENCABEZADO MAYORQUE archivos FINCHTML MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // html ::= chtml encabezado 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("html",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicial ::= html 
            {
              String RESULT =null;
		this.parser.chtml.notificar("fin", "listo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

