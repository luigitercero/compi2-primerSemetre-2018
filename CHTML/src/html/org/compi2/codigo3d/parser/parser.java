
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 03 21:18:09 CST 2018
//----------------------------------------------------

package html.org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;
import com.ParserTree.Node;
import com.ParserTree.ParserTree;
import com.ParserTree.Location;
import com.ParserTree.Term;
import com.ParserTree.Token;
import compi2.Etiqueta.*;
import java.awt.Component;
import java.util.ArrayList;
import compi2.Etiqueta.Componente.*;
import css.org.compi2.codigo3d.CompilarCSS;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 03 21:18:09 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\024\003\000\002\031" +
    "\004\000\002\043\007\000\002\043\004\000\002\043\010" +
    "\000\002\043\005\000\002\044\005\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\005\000\002" +
    "\016\003\000\002\016\007\000\002\020\005\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\005" +
    "\000\002\022\003\000\002\022\007\000\002\017\007\000" +
    "\002\017\005\000\002\017\005\000\002\017\004\000\002" +
    "\017\007\000\002\017\006\000\002\017\005\000\002\017" +
    "\003\000\002\007\003\000\002\007\007\000\002\010\003" +
    "\000\002\010\007\000\002\011\003\000\002\011\007\000" +
    "\002\012\003\000\002\012\007\000\002\013\003\000\002" +
    "\013\007\000\002\014\003\000\002\014\006\000\002\046" +
    "\005\000\002\004\005\000\002\005\005\000\002\045\005" +
    "\000\002\045\004\000\002\006\004\000\002\006\003\000" +
    "\002\023\012\000\002\023\012\000\002\023\007\000\002" +
    "\042\004\000\002\026\004\000\002\026\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\026\005\001\002\000\004\002\000\001" +
    "\002\000\004\015\232\001\002\000\010\025\014\032\012" +
    "\040\015\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\004\025\230\001\002\000\004\015\165" +
    "\001\002\000\030\023\035\027\034\041\031\044\027\046" +
    "\047\050\051\052\026\054\030\056\042\060\037\070\052" +
    "\001\002\000\004\015\025\001\002\000\006\004\ufff5\015" +
    "\ufff5\001\002\000\004\002\uffff\001\002\000\006\004\020" +
    "\015\021\001\002\000\004\010\022\001\002\000\030\023" +
    "\ufff9\027\ufff9\041\ufff9\044\ufff9\046\ufff9\050\ufff9\052\ufff9" +
    "\054\ufff9\056\ufff9\060\ufff9\070\ufff9\001\002\000\004\017" +
    "\023\001\002\000\004\024\024\001\002\000\006\004\ufff4" +
    "\015\ufff4\001\002\000\004\002\ufffd\001\002\000\006\004" +
    "\uffe0\015\uffe0\001\002\000\006\004\uffee\015\uffee\001\002" +
    "\000\006\004\uffe4\015\uffe4\001\002\000\004\015\164\001" +
    "\002\000\006\004\156\047\157\001\002\000\006\004\150" +
    "\071\151\001\002\000\006\004\uffda\030\uffda\001\002\000" +
    "\004\015\147\001\002\000\030\023\ufff7\027\ufff7\041\ufff7" +
    "\044\ufff7\046\ufff7\050\ufff7\052\ufff7\054\ufff7\056\ufff7\060" +
    "\ufff7\070\ufff7\001\002\000\004\062\140\001\002\000\006" +
    "\004\130\015\131\001\002\000\006\004\105\015\106\001" +
    "\002\000\006\004\uffde\015\uffde\001\002\000\006\004\100" +
    "\015\101\001\002\000\006\004\070\015\071\001\002\000" +
    "\006\004\063\030\064\001\002\000\030\023\056\027\034" +
    "\044\027\045\055\046\047\050\051\052\026\054\030\056" +
    "\042\060\037\070\052\001\002\000\006\004\uffe2\047\uffe2" +
    "\001\002\000\030\023\ufff8\027\ufff8\041\ufff8\044\ufff8\046" +
    "\ufff8\050\ufff8\052\ufff8\054\ufff8\056\ufff8\060\ufff8\070\ufff8" +
    "\001\002\000\004\051\054\001\002\000\006\004\uffdc\071" +
    "\uffdc\001\002\000\032\023\uffe5\027\uffe5\041\uffe5\044\uffe5" +
    "\045\uffe5\046\uffe5\050\uffe5\052\uffe5\054\uffe5\056\uffe5\060" +
    "\uffe5\070\uffe5\001\002\000\032\023\uffe9\027\uffe9\041\uffe9" +
    "\044\uffe9\045\uffe9\046\uffe9\050\uffe9\052\uffe9\054\uffe9\056" +
    "\uffe9\060\uffe9\070\uffe9\001\002\000\004\015\062\001\002" +
    "\000\004\015\061\001\002\000\030\023\ufff0\027\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\050\ufff0\052\ufff0\054\ufff0\056\ufff0" +
    "\060\ufff0\070\ufff0\001\002\000\030\023\ufff1\027\ufff1\044" +
    "\ufff1\045\ufff1\046\ufff1\050\ufff1\052\ufff1\054\ufff1\056\ufff1" +
    "\060\ufff1\070\ufff1\001\002\000\030\023\uffef\027\uffef\044" +
    "\uffef\045\uffef\046\uffef\050\uffef\052\uffef\054\uffef\056\uffef" +
    "\060\uffef\070\uffef\001\002\000\032\023\ufff3\027\ufff3\041" +
    "\ufff3\044\ufff3\045\ufff3\046\ufff3\050\ufff3\052\ufff3\054\ufff3" +
    "\056\ufff3\060\ufff3\070\ufff3\001\002\000\004\010\066\001" +
    "\002\000\004\015\065\001\002\000\032\023\uffea\027\uffea" +
    "\041\uffea\044\uffea\045\uffea\046\uffea\050\uffea\052\uffea\054" +
    "\uffea\056\uffea\060\uffea\070\uffea\001\002\000\004\017\067" +
    "\001\002\000\006\004\uffd9\030\uffd9\001\002\000\004\010" +
    "\075\001\002\000\004\004\072\001\002\000\004\055\073" +
    "\001\002\000\004\015\074\001\002\000\032\023\uffec\027" +
    "\uffec\041\uffec\044\uffec\045\uffec\046\uffec\050\uffec\052\uffec" +
    "\054\uffec\056\uffec\060\uffec\070\uffec\001\002\000\004\017" +
    "\076\001\002\000\004\024\077\001\002\000\006\004\uffe3" +
    "\015\uffe3\001\002\000\004\010\102\001\002\000\030\023" +
    "\ufff2\027\ufff2\044\ufff2\045\ufff2\046\ufff2\050\ufff2\052\ufff2" +
    "\054\ufff2\056\ufff2\060\ufff2\070\ufff2\001\002\000\004\017" +
    "\103\001\002\000\004\024\104\001\002\000\006\004\uffed" +
    "\015\uffed\001\002\000\004\010\125\001\002\000\024\004" +
    "\116\005\113\010\117\011\107\012\121\015\114\016\112" +
    "\020\111\022\120\001\002\000\030\004\uffc6\005\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\015\uffc6\016\uffc6\020\uffc6\022\uffc6" +
    "\053\uffc6\065\uffc6\001\002\000\026\004\116\005\113\010" +
    "\117\011\107\012\121\015\114\016\112\020\111\022\120" +
    "\053\122\001\002\000\030\004\uffc4\005\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\015\uffc4\016\uffc4\020\uffc4\022\uffc4\053\uffc4" +
    "\065\uffc4\001\002\000\030\004\uffc3\005\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\015\uffc3\016\uffc3\020\uffc3\022\uffc3\053\uffc3" +
    "\065\uffc3\001\002\000\030\004\uffc9\005\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\015\uffc9\016\uffc9\020\uffc9\022\uffc9\053\uffc9" +
    "\065\uffc9\001\002\000\030\004\uffc8\005\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\015\uffc8\016\uffc8\020\uffc8\022\uffc8\053\uffc8" +
    "\065\uffc8\001\002\000\030\004\uffcc\005\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\015\uffcc\016\uffcc\020\uffcc\022\uffcc\053\uffcc" +
    "\065\uffcc\001\002\000\030\004\uffcb\005\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\015\uffcb\016\uffcb\020\uffcb\022\uffcb\053\uffcb" +
    "\065\uffcb\001\002\000\030\004\uffc7\005\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\015\uffc7\016\uffc7\020\uffc7\022\uffc7\053\uffc7" +
    "\065\uffc7\001\002\000\030\004\uffca\005\uffca\010\uffca\011" +
    "\uffca\012\uffca\015\uffca\016\uffca\020\uffca\022\uffca\053\uffca" +
    "\065\uffca\001\002\000\030\004\uffc5\005\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\015\uffc5\016\uffc5\020\uffc5\022\uffc5\053\uffc5" +
    "\065\uffc5\001\002\000\004\015\124\001\002\000\030\004" +
    "\uffcd\005\uffcd\010\uffcd\011\uffcd\012\uffcd\015\uffcd\016\uffcd" +
    "\020\uffcd\022\uffcd\053\uffcd\065\uffcd\001\002\000\032\023" +
    "\uffe8\027\uffe8\041\uffe8\044\uffe8\045\uffe8\046\uffe8\050\uffe8" +
    "\052\uffe8\054\uffe8\056\uffe8\060\uffe8\070\uffe8\001\002\000" +
    "\004\017\126\001\002\000\004\024\127\001\002\000\006" +
    "\004\uffdf\015\uffdf\001\002\000\004\010\134\001\002\000" +
    "\004\057\132\001\002\000\004\015\133\001\002\000\032" +
    "\023\uffe7\027\uffe7\041\uffe7\044\uffe7\045\uffe7\046\uffe7\050" +
    "\uffe7\052\uffe7\054\uffe7\056\uffe7\060\uffe7\070\uffe7\001\002" +
    "\000\004\017\135\001\002\000\004\024\136\001\002\000" +
    "\006\004\uffdd\015\uffdd\001\002\000\004\061\146\001\002" +
    "\000\004\064\142\001\002\000\004\063\145\001\002\000" +
    "\024\004\116\005\113\010\117\011\107\012\121\015\114" +
    "\016\112\020\111\022\120\001\002\000\026\004\116\005" +
    "\113\010\117\011\107\012\121\015\114\016\112\020\111" +
    "\022\120\065\144\001\002\000\004\063\uffd6\001\002\000" +
    "\004\061\uffd7\001\002\000\032\023\uffd8\027\uffd8\041\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\050\uffd8\052\uffd8\054\uffd8\056" +
    "\uffd8\060\uffd8\070\uffd8\001\002\000\030\023\ufff6\027\ufff6" +
    "\041\ufff6\044\ufff6\046\ufff6\050\ufff6\052\ufff6\054\ufff6\056" +
    "\ufff6\060\ufff6\070\ufff6\001\002\000\004\010\153\001\002" +
    "\000\004\015\152\001\002\000\032\023\uffe6\027\uffe6\041" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\050\uffe6\052\uffe6\054\uffe6" +
    "\056\uffe6\060\uffe6\070\uffe6\001\002\000\004\017\154\001" +
    "\002\000\004\024\155\001\002\000\006\004\uffdb\071\uffdb" +
    "\001\002\000\004\010\161\001\002\000\004\015\160\001" +
    "\002\000\032\023\uffeb\027\uffeb\041\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\050\uffeb\052\uffeb\054\uffeb\056\uffeb\060\uffeb\070" +
    "\uffeb\001\002\000\004\017\162\001\002\000\004\024\163" +
    "\001\002\000\006\004\uffe1\047\uffe1\001\002\000\004\025" +
    "\ufffa\001\002\000\012\033\166\034\172\036\173\042\170" +
    "\001\002\000\004\015\227\001\002\000\006\025\223\040" +
    "\015\001\002\000\004\015\216\001\002\000\012\033\uffd2" +
    "\034\uffd2\036\uffd2\042\uffd2\001\002\000\004\004\207\001" +
    "\002\000\004\004\200\001\002\000\012\033\175\034\172" +
    "\036\173\042\170\001\002\000\004\015\177\001\002\000" +
    "\012\033\uffd3\034\uffd3\036\uffd3\042\uffd3\001\002\000\006" +
    "\025\uffd5\040\uffd5\001\002\000\004\010\201\001\002\000" +
    "\004\017\202\001\002\000\004\024\203\001\002\000\004" +
    "\015\204\001\002\000\004\037\205\001\002\000\004\015" +
    "\206\001\002\000\012\033\uffd0\034\uffd0\036\uffd0\042\uffd0" +
    "\001\002\000\004\010\210\001\002\000\004\017\211\001" +
    "\002\000\004\024\212\001\002\000\004\015\213\001\002" +
    "\000\004\035\214\001\002\000\004\015\215\001\002\000" +
    "\012\033\uffd1\034\uffd1\036\uffd1\042\uffd1\001\002\000\004" +
    "\004\217\001\002\000\004\043\220\001\002\000\004\015" +
    "\221\001\002\000\012\033\uffcf\034\uffcf\036\uffcf\042\uffcf" +
    "\001\002\000\004\025\225\001\002\000\004\015\224\001" +
    "\002\000\004\002\ufffe\001\002\000\004\015\226\001\002" +
    "\000\004\002\ufffc\001\002\000\006\025\uffd4\040\uffd4\001" +
    "\002\000\004\015\231\001\002\000\004\002\ufffb\001\002" +
    "\000\010\025\uffce\032\uffce\040\uffce\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\010\024\006\031\003\042\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\012\016\016" +
    "\043\015\044\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\007\043" +
    "\010\031\011\040\012\037\013\032\014\044\017\047\020" +
    "\035\021\045\022\042\046\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\007\043\010\031\011\040\012\037\013\032\014\044\017" +
    "\057\020\056\021\045\022\042\046\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\107\041\114\001\001" +
    "\000\002\001\001\000\004\041\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\140\001\001\000\002\001\001\000\006\026\142\041" +
    "\114\001\001\000\004\041\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\173\023\170\045\166\001\001\000\002\001\001" +
    "\000\010\015\012\016\016\044\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
 public ParserTree parserTree;
public ArrayList<Symbol> error = new ArrayList<Symbol>();
public CHTML chtml = new CHTML();


    String expresion = "";
    public void syntax_error(Symbol s){
    System.err.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ".  " +s.value + " no reconocido." );
        this.error.add(s);
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         System.err.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". " + s.value + " no reconocido.");
        this.error.add(s);
        System.err.println(s);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

//Codigo de acciones
     public Color color = new Color (); 

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // texto ::= DOSPUNTOS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // texto ::= MENOS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // texto ::= PAREC 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // texto ::= PAREA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // texto ::= IGUAL 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // texto ::= MAYORQUE 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // texto ::= ENTERO 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // texto ::= CUALQUIERA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // texto ::= ID 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		           RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // textos ::= texto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // textos ::= textos texto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a = a + b; RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // chtml ::= CHTML MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chtml",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // archivo ::= TITULO MAYORQUE ID FINTITULO MAYORQUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("el TITULO es " + a); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // archivo ::= CCSS ID IGUAL CADENA PUNTOCOMA MAYORQUE FINCCSS MAYORQUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		  
                CompilarCSS c;
                try {
                  c = new CompilarCSS(a);
                  this.parser.chtml.css.add(c.getParser().css);
                } catch (Exception e) {
                    System.err.println("error al compilar arcihivo " + a);
                }
                 RESULT = "";
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // archivo ::= CJS ID IGUAL CADENA PUNTOCOMA MAYORQUE FINCJS MAYORQUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		System.out.println("cargar cjs " + a); RESULT ="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Larchivo ::= archivo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Larchivo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Larchivo ::= Larchivo archivo 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Larchivo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // archivos ::= FINENCABEZADO MAYORQUE 
            {
              String RESULT =null;
		RESULT = "defautlt";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivos",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // archivos ::= Larchivo FINENCABEZADO MAYORQUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivos",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // columna ::= CB textos FINCB 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fila ::= FIL columna FINFIL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tabla ::= TABLA fila FINTABLA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabla",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cajatexto ::= cajatexto ID IGUAL CADENA 
            {
              Caja_Texto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Caja_Texto a = (Caja_Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addAtributo(b,c); RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cajatexto",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cajatexto ::= CAJATEXTO 
            {
              Caja_Texto RESULT =null;
		RESULT = new Caja_Texto();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cajatexto",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // textoa ::= textoa ID IGUAL CADENA PUNTOCOMA 
            {
              Texto_A RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Texto_A a = (Texto_A)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c); RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textoa",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // textoa ::= TEXTOA 
            {
              Texto_A RESULT =null;
		RESULT = new Texto_A();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textoa",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // enlace ::= enlace ID IGUAL CADENA PUNTOCOMA 
            {
              Enlace RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Enlace a = (Enlace)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c); RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enlace",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // enlace ::= ENLACE 
            {
              Enlace RESULT =null;
		RESULT = new Enlace();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enlace",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // imagena ::= imagena ID IGUAL CADENA PUNTOCOMA 
            {
              Imagen RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Imagen c = (Imagen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c.addAtributo(a,b); RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imagena",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // imagena ::= IMAGEN 
            {
              Imagen RESULT =null;
		RESULT = new Imagen();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imagena",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // textoc ::= textoc ID IGUAL CADENA PUNTOCOMA 
            {
              Texto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Texto a = (Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c); RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textoc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // textoc ::= TEXTO 
            {
              Texto RESULT =null;
		RESULT = new Texto();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textoc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // boton ::= boton ID IGUAL CADENA PUNTOCOMA 
            {
              Boton RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boton a = (Boton)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c,this.parser.chtml.css); RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boton",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // boton ::= BOTON 
            {
              Boton RESULT =null;
		Boton a = new Boton(); a.enlazarObservador(this.parser.chtml); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boton",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cuerpoTerminal ::= tabla 
            {
              Component RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cuerpoTerminal ::= textoa FINTEXTOA MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texto_A a = (Texto_A)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addText(b); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cuerpoTerminal ::= enlace MAYORQUE FINENLACE MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Enlace a = (Enlace)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		a.addText(b);  RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cuerpoTerminal ::= imagena MAYORQUE textos FINIMAGEN MAYORQUE 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Imagen c = (Imagen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		c.addImagen(b); RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cuerpoTerminal ::= CAJA FINCAJA 
            {
              Component RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpoTerminal ::= cajatexto FINCAJATEXTO MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Caja_Texto a = (Caja_Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addText(b); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpoTerminal ::= textoc FINTEXTO MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texto a = (Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addText(b); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cuerpoTerminal ::= boton MAYORQUE ID FINBOTON MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boton a = (Boton)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		a.addText(b); this.parser.chtml.componentes.add(new ControlComponente(a.id,a,"boton")); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // panelCuerpo ::= panelCuerpo ID IGUAL CADENA PUNTOCOMA 
            {
              Panel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c);RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("panelCuerpo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // panelCuerpo ::= PANEL 
            {
              Panel RESULT =null;
		RESULT = new Panel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("panelCuerpo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LcuerpoTerminal ::= LcuerpoTerminal SALTOFIN MAYORQUE 
            {
              Panel RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Panel b = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		b.addSalto();RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LcuerpoTerminal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LcuerpoTerminal ::= LcuerpoTerminal panel 
            {
              Panel RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Panel b = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		b.addPanel(a); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LcuerpoTerminal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LcuerpoTerminal ::= LcuerpoTerminal cuerpoTerminal 
            {
              Panel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component b = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addComponent(b);RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LcuerpoTerminal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LcuerpoTerminal ::= panelCuerpo MAYORQUE 
            {
              Panel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LcuerpoTerminal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // panel ::= LcuerpoTerminal FINPANEL MAYORQUE 
            {
              Panel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("panel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Acuerpo ::= Acuerpo ID IGUAL CADENA PUNTOCOMA 
            {
              CHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CHTML a = (CHTML)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.setBackground(color.getColor(c)); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Acuerpo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Acuerpo ::= CUERPO 
            {
              CHTML RESULT =null;
		RESULT = this.parser.chtml;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Acuerpo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Lcuerpo ::= Lcuerpo SALTOFIN MAYORQUE 
            {
              CHTML RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CHTML b = (CHTML)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		b.addSalto();RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lcuerpo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Lcuerpo ::= Lcuerpo panel 
            {
              CHTML RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CHTML b = (CHTML)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		b.addPanel(a); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lcuerpo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Lcuerpo ::= Lcuerpo cuerpoTerminal 
            {
              CHTML RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lcuerpo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Lcuerpo ::= Acuerpo MAYORQUE 
            {
              CHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CHTML a = (CHTML)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lcuerpo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= Lcuerpo FINCUERPO MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // encabezado ::= cuerpo FINCHTML MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // encabezado ::= ENCABEZADO MAYORQUE archivos cuerpo FINCHTML MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // encabezado ::= FINCHTML MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= ENCABEZADO MAYORQUE archivos FINCHTML MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // html ::= chtml encabezado 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("html",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicial ::= html 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

