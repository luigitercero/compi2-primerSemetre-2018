
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 09 18:40:15 CST 2018
//----------------------------------------------------

package html.org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;
import com.ParserTree.Node;
import com.ParserTree.ParserTree;
import com.ParserTree.Location;
import com.ParserTree.Term;
import com.ParserTree.Token;
import compi2.Etiqueta.*;
import java.awt.Component;
import java.util.ArrayList;
import compi2.Etiqueta.Componente.*;
import css.org.compi2.codigo3d.CompilarCSS;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 09 18:40:15 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\024\003\000\002\031" +
    "\004\000\002\043\007\000\002\043\004\000\002\043\010" +
    "\000\002\043\005\000\002\043\003\000\002\044\005\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\005\000\002\016\003\000\002\016\007\000\002\020" +
    "\005\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\021\005\000\002\022\003\000\002\022\007\000" +
    "\002\017\006\000\002\017\005\000\002\017\005\000\002" +
    "\017\004\000\002\017\007\000\002\017\006\000\002\017" +
    "\005\000\002\017\003\000\002\017\003\000\002\047\003" +
    "\000\002\047\004\000\002\050\004\000\002\050\003\000" +
    "\002\007\003\000\002\007\007\000\002\010\003\000\002" +
    "\010\007\000\002\011\003\000\002\011\007\000\002\012" +
    "\003\000\002\012\007\000\002\013\003\000\002\013\007" +
    "\000\002\014\003\000\002\014\006\000\002\046\005\000" +
    "\002\004\005\000\002\005\005\000\002\045\005\000\002" +
    "\045\004\000\002\006\004\000\002\006\003\000\002\023" +
    "\012\000\002\023\012\000\002\023\007\000\002\042\004" +
    "\000\002\026\004\000\002\026\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\004\026\006\001\002\000\004\002\000\001" +
    "\002\000\012\003\013\025\016\032\014\040\017\001\002" +
    "\000\004\015\011\001\002\000\004\002\010\001\002\000" +
    "\004\002\001\001\002\000\012\003\uffc8\025\uffc8\032\uffc8" +
    "\040\uffc8\001\002\000\004\025\240\001\002\000\004\002" +
    "\ufffa\001\002\000\004\015\175\001\002\000\032\003\052" +
    "\023\037\027\036\041\033\044\031\046\050\050\054\052" +
    "\030\054\032\056\044\060\041\070\055\001\002\000\004" +
    "\015\027\001\002\000\006\004\ufff4\015\ufff4\001\002\000" +
    "\004\002\uffff\001\002\000\006\004\022\015\023\001\002" +
    "\000\004\010\024\001\002\000\032\003\ufff8\023\ufff8\027" +
    "\ufff8\041\ufff8\044\ufff8\046\ufff8\050\ufff8\052\ufff8\054\ufff8" +
    "\056\ufff8\060\ufff8\070\ufff8\001\002\000\004\017\025\001" +
    "\002\000\004\024\026\001\002\000\006\004\ufff3\015\ufff3" +
    "\001\002\000\004\002\ufffd\001\002\000\006\004\uffda\015" +
    "\uffda\001\002\000\006\004\uffed\015\uffed\001\002\000\006" +
    "\004\uffde\015\uffde\001\002\000\004\015\174\001\002\000" +
    "\006\004\166\047\167\001\002\000\006\004\160\071\161" +
    "\001\002\000\006\004\uffd4\030\uffd4\001\002\000\004\015" +
    "\157\001\002\000\032\003\ufff6\023\ufff6\027\ufff6\041\ufff6" +
    "\044\ufff6\046\ufff6\050\ufff6\052\ufff6\054\ufff6\056\ufff6\060" +
    "\ufff6\070\ufff6\001\002\000\004\062\150\001\002\000\006" +
    "\004\135\015\136\001\002\000\006\004\112\015\113\001" +
    "\002\000\006\004\uffd8\015\uffd8\001\002\000\006\004\105" +
    "\015\106\001\002\000\006\004\073\015\074\001\002\000" +
    "\006\004\066\030\067\001\002\000\006\004\uffdc\047\uffdc" +
    "\001\002\000\032\003\052\023\061\027\036\044\031\045" +
    "\060\046\050\050\054\052\030\054\032\056\044\060\041" +
    "\070\055\001\002\000\034\003\uffe3\023\uffe3\027\uffe3\041" +
    "\uffe3\044\uffe3\045\uffe3\046\uffe3\050\uffe3\052\uffe3\054\uffe3" +
    "\056\uffe3\060\uffe3\070\uffe3\001\002\000\032\003\ufff7\023" +
    "\ufff7\027\ufff7\041\ufff7\044\ufff7\046\ufff7\050\ufff7\052\ufff7" +
    "\054\ufff7\056\ufff7\060\ufff7\070\ufff7\001\002\000\004\051" +
    "\057\001\002\000\006\004\uffd6\071\uffd6\001\002\000\034" +
    "\003\uffe4\023\uffe4\027\uffe4\041\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\050\uffe4\052\uffe4\054\uffe4\056\uffe4\060\uffe4\070\uffe4" +
    "\001\002\000\034\003\uffe8\023\uffe8\027\uffe8\041\uffe8\044" +
    "\uffe8\045\uffe8\046\uffe8\050\uffe8\052\uffe8\054\uffe8\056\uffe8" +
    "\060\uffe8\070\uffe8\001\002\000\004\015\065\001\002\000" +
    "\004\015\064\001\002\000\032\003\uffef\023\uffef\027\uffef" +
    "\044\uffef\045\uffef\046\uffef\050\uffef\052\uffef\054\uffef\056" +
    "\uffef\060\uffef\070\uffef\001\002\000\032\003\ufff0\023\ufff0" +
    "\027\ufff0\044\ufff0\045\ufff0\046\ufff0\050\ufff0\052\ufff0\054" +
    "\ufff0\056\ufff0\060\ufff0\070\ufff0\001\002\000\032\003\uffee" +
    "\023\uffee\027\uffee\044\uffee\045\uffee\046\uffee\050\uffee\052" +
    "\uffee\054\uffee\056\uffee\060\uffee\070\uffee\001\002\000\034" +
    "\003\ufff2\023\ufff2\027\ufff2\041\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\050\ufff2\052\ufff2\054\ufff2\056\ufff2\060\ufff2\070\ufff2" +
    "\001\002\000\004\010\071\001\002\000\004\015\070\001" +
    "\002\000\034\003\uffe9\023\uffe9\027\uffe9\041\uffe9\044\uffe9" +
    "\045\uffe9\046\uffe9\050\uffe9\052\uffe9\054\uffe9\056\uffe9\060" +
    "\uffe9\070\uffe9\001\002\000\004\017\072\001\002\000\006" +
    "\004\uffd3\030\uffd3\001\002\000\004\010\102\001\002\000" +
    "\006\004\075\055\077\001\002\000\004\055\101\001\002" +
    "\000\004\015\100\001\002\000\004\015\uffdf\001\002\000" +
    "\034\003\uffeb\023\uffeb\027\uffeb\041\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\050\uffeb\052\uffeb\054\uffeb\056\uffeb\060\uffeb\070" +
    "\uffeb\001\002\000\004\015\uffe0\001\002\000\004\017\103" +
    "\001\002\000\004\024\104\001\002\000\006\004\uffdd\015" +
    "\uffdd\001\002\000\004\010\107\001\002\000\032\003\ufff1" +
    "\023\ufff1\027\ufff1\044\ufff1\045\ufff1\046\ufff1\050\ufff1\052" +
    "\ufff1\054\ufff1\056\ufff1\060\ufff1\070\ufff1\001\002\000\004" +
    "\017\110\001\002\000\004\024\111\001\002\000\006\004" +
    "\uffec\015\uffec\001\002\000\004\010\132\001\002\000\024" +
    "\004\123\005\120\010\124\011\115\012\126\015\121\016" +
    "\117\020\116\022\125\001\002\000\026\004\123\005\120" +
    "\010\124\011\115\012\126\015\121\016\117\020\116\022" +
    "\125\053\127\001\002\000\030\004\uffc0\005\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\015\uffc0\016\uffc0\020\uffc0\022\uffc0\053" +
    "\uffc0\065\uffc0\001\002\000\030\004\uffbe\005\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\015\uffbe\016\uffbe\020\uffbe\022\uffbe\053" +
    "\uffbe\065\uffbe\001\002\000\030\004\uffbd\005\uffbd\010\uffbd" +
    "\011\uffbd\012\uffbd\015\uffbd\016\uffbd\020\uffbd\022\uffbd\053" +
    "\uffbd\065\uffbd\001\002\000\030\004\uffc3\005\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\015\uffc3\016\uffc3\020\uffc3\022\uffc3\053" +
    "\uffc3\065\uffc3\001\002\000\030\004\uffc2\005\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\015\uffc2\016\uffc2\020\uffc2\022\uffc2\053" +
    "\uffc2\065\uffc2\001\002\000\030\004\uffc6\005\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\015\uffc6\016\uffc6\020\uffc6\022\uffc6\053" +
    "\uffc6\065\uffc6\001\002\000\030\004\uffc5\005\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\015\uffc5\016\uffc5\020\uffc5\022\uffc5\053" +
    "\uffc5\065\uffc5\001\002\000\030\004\uffc1\005\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\015\uffc1\016\uffc1\020\uffc1\022\uffc1\053" +
    "\uffc1\065\uffc1\001\002\000\030\004\uffc4\005\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\015\uffc4\016\uffc4\020\uffc4\022\uffc4\053" +
    "\uffc4\065\uffc4\001\002\000\030\004\uffbf\005\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\015\uffbf\016\uffbf\020\uffbf\022\uffbf\053" +
    "\uffbf\065\uffbf\001\002\000\004\015\131\001\002\000\030" +
    "\004\uffc7\005\uffc7\010\uffc7\011\uffc7\012\uffc7\015\uffc7\016" +
    "\uffc7\020\uffc7\022\uffc7\053\uffc7\065\uffc7\001\002\000\034" +
    "\003\uffe7\023\uffe7\027\uffe7\041\uffe7\044\uffe7\045\uffe7\046" +
    "\uffe7\050\uffe7\052\uffe7\054\uffe7\056\uffe7\060\uffe7\070\uffe7" +
    "\001\002\000\004\017\133\001\002\000\004\024\134\001" +
    "\002\000\006\004\uffd9\015\uffd9\001\002\000\004\010\144" +
    "\001\002\000\006\004\140\057\137\001\002\000\004\015" +
    "\uffe2\001\002\000\004\057\143\001\002\000\004\015\142" +
    "\001\002\000\034\003\uffe6\023\uffe6\027\uffe6\041\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\050\uffe6\052\uffe6\054\uffe6\056\uffe6" +
    "\060\uffe6\070\uffe6\001\002\000\004\015\uffe1\001\002\000" +
    "\004\017\145\001\002\000\004\024\146\001\002\000\006" +
    "\004\uffd7\015\uffd7\001\002\000\004\061\156\001\002\000" +
    "\004\064\152\001\002\000\004\063\155\001\002\000\024" +
    "\004\123\005\120\010\124\011\115\012\126\015\121\016" +
    "\117\020\116\022\125\001\002\000\026\004\123\005\120" +
    "\010\124\011\115\012\126\015\121\016\117\020\116\022" +
    "\125\065\154\001\002\000\004\063\uffd0\001\002\000\004" +
    "\061\uffd1\001\002\000\034\003\uffd2\023\uffd2\027\uffd2\041" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\050\uffd2\052\uffd2\054\uffd2" +
    "\056\uffd2\060\uffd2\070\uffd2\001\002\000\032\003\ufff5\023" +
    "\ufff5\027\ufff5\041\ufff5\044\ufff5\046\ufff5\050\ufff5\052\ufff5" +
    "\054\ufff5\056\ufff5\060\ufff5\070\ufff5\001\002\000\004\010" +
    "\163\001\002\000\004\015\162\001\002\000\034\003\uffe5" +
    "\023\uffe5\027\uffe5\041\uffe5\044\uffe5\045\uffe5\046\uffe5\050" +
    "\uffe5\052\uffe5\054\uffe5\056\uffe5\060\uffe5\070\uffe5\001\002" +
    "\000\004\017\164\001\002\000\004\024\165\001\002\000" +
    "\006\004\uffd5\071\uffd5\001\002\000\004\010\171\001\002" +
    "\000\004\015\170\001\002\000\034\003\uffea\023\uffea\027" +
    "\uffea\041\uffea\044\uffea\045\uffea\046\uffea\050\uffea\052\uffea" +
    "\054\uffea\056\uffea\060\uffea\070\uffea\001\002\000\004\017" +
    "\172\001\002\000\004\024\173\001\002\000\006\004\uffdb" +
    "\047\uffdb\001\002\000\004\025\ufff9\001\002\000\012\033" +
    "\176\034\202\036\203\042\200\001\002\000\004\015\237" +
    "\001\002\000\006\025\233\040\017\001\002\000\004\015" +
    "\226\001\002\000\012\033\uffcc\034\uffcc\036\uffcc\042\uffcc" +
    "\001\002\000\004\004\217\001\002\000\004\004\210\001" +
    "\002\000\012\033\205\034\202\036\203\042\200\001\002" +
    "\000\004\015\207\001\002\000\012\033\uffcd\034\uffcd\036" +
    "\uffcd\042\uffcd\001\002\000\006\025\uffcf\040\uffcf\001\002" +
    "\000\004\010\211\001\002\000\004\017\212\001\002\000" +
    "\004\024\213\001\002\000\004\015\214\001\002\000\004" +
    "\037\215\001\002\000\004\015\216\001\002\000\012\033" +
    "\uffca\034\uffca\036\uffca\042\uffca\001\002\000\004\010\220" +
    "\001\002\000\004\017\221\001\002\000\004\024\222\001" +
    "\002\000\004\015\223\001\002\000\004\035\224\001\002" +
    "\000\004\015\225\001\002\000\012\033\uffcb\034\uffcb\036" +
    "\uffcb\042\uffcb\001\002\000\004\004\227\001\002\000\004" +
    "\043\230\001\002\000\004\015\231\001\002\000\012\033" +
    "\uffc9\034\uffc9\036\uffc9\042\uffc9\001\002\000\004\025\235" +
    "\001\002\000\004\015\234\001\002\000\004\002\ufffe\001" +
    "\002\000\004\015\236\001\002\000\004\002\ufffc\001\002" +
    "\000\006\025\uffce\040\uffce\001\002\000\004\015\241\001" +
    "\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\010\024\006\031\003\042\004\001\001\000" +
    "\002\001\001\000\012\015\014\016\020\043\017\044\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\007\045\010\033\011\042\012" +
    "\041\013\034\014\046\017\052\020\037\021\050\022\044" +
    "\046\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
    "\045\010\033\011\042\012\041\013\034\014\046\017\062" +
    "\020\061\021\050\022\044\046\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\113\041\121\001\001\000\004\041\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\150\001" +
    "\001\000\002\001\001\000\006\026\152\041\121\001\001" +
    "\000\004\041\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\203" +
    "\023\200\045\176\001\001\000\002\001\001\000\010\015" +
    "\014\016\020\044\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
 public ParserTree parserTree;
public ArrayList<Symbol> error = new ArrayList<Symbol>();
public CHTML chtml = new CHTML();


    public String ruta ="";

   public observador.errores.RecibirError enviar = chtml;
    public String enviarError(String s){
        if (enviar != null){
            enviar.recibirError(ruta +"\n   "+s);
        }
    return s;
    }
    
    public void syntax_error(Symbol s){
    System.err.println( enviarError("Error Sintactico en la Linea  " + (s.right+1) +" Columna "+s.left+ ". Simbolo \'" +s.value + "\' no reconocido." ));

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         System.err.println(enviarError("Error Sintactico en la Linea no se logro recuperar de error" + (s.right+1)+ "Columna "+s.left+". " + s.value + " no reconocido."));
        //this.error.add(s);
        //System.err.println(s);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

//Codigo de acciones
     public Color color = new Color (); 

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // texto ::= DOSPUNTOS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // texto ::= MENOS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // texto ::= PAREC 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // texto ::= PAREA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // texto ::= IGUAL 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		       RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // texto ::= MAYORQUE 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // texto ::= ENTERO 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // texto ::= CUALQUIERA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // texto ::= ID 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		           RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // textos ::= texto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // textos ::= textos texto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a = a + b; RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // chtml ::= CHTML MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chtml",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // archivo ::= TITULO MAYORQUE ID FINTITULO MAYORQUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("el TITULO es " + a); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // archivo ::= CCSS ID IGUAL CADENA PUNTOCOMA MAYORQUE FINCCSS MAYORQUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		  
                CompilarCSS c;
                try {
                  c = new CompilarCSS(a,this.parser.chtml,this.parser.chtml);
                  this.parser.chtml.css.add(c.getParser().css);
                } catch (Exception e) {
                    System.err.println("error al compilar arcihivo " + a);
                }
                 RESULT = "";
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // archivo ::= CJS ID IGUAL CADENA PUNTOCOMA MAYORQUE FINCJS MAYORQUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            

                try {
                  
                    com.Navegador.JS.JS c = new  com.Navegador.JS.JS(a,this.parser.chtml,this.parser.chtml);
                    this.parser.chtml.enlazarObservador(c.js);
                    
                    
                } catch (Exception e) {
                    System.err.println("error al compilar arcihivo " + a);
                }
                

            System.out.println("cargar cjs " + a); RESULT ="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Larchivo ::= archivo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Larchivo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Larchivo ::= Larchivo archivo 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Larchivo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // archivos ::= FINENCABEZADO MAYORQUE 
            {
              String RESULT =null;
		RESULT = "defautlt";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivos",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // archivos ::= Larchivo FINENCABEZADO MAYORQUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivos",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // columna ::= CB textos FINCB 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columna",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // fila ::= FIL columna FINFIL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tabla ::= TABLA fila FINTABLA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabla",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cajatexto ::= cajatexto ID IGUAL CADENA 
            {
              Caja_Texto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Caja_Texto a = (Caja_Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addAtributo(b,c); RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cajatexto",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cajatexto ::= CAJATEXTO 
            {
              Caja_Texto RESULT =null;
		RESULT = new Caja_Texto(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cajatexto",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // textoa ::= textoa ID IGUAL CADENA PUNTOCOMA 
            {
              Texto_A RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Texto_A a = (Texto_A)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c); RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textoa",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // textoa ::= TEXTOA 
            {
              Texto_A RESULT =null;
		RESULT = new Texto_A(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textoa",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // enlace ::= enlace ID IGUAL CADENA PUNTOCOMA 
            {
              Enlace RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Enlace a = (Enlace)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c); RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enlace",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // enlace ::= ENLACE 
            {
              Enlace RESULT =null;
		RESULT = new Enlace(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enlace",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // imagena ::= imagena ID IGUAL CADENA PUNTOCOMA 
            {
              Imagen RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Imagen c = (Imagen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		c.addAtributo(a,b); RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imagena",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // imagena ::= IMAGEN 
            {
              Imagen RESULT =null;
		RESULT = new Imagen(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imagena",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // textoc ::= textoc ID IGUAL CADENA PUNTOCOMA 
            {
              Texto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Texto a = (Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c); RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textoc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // textoc ::= TEXTO 
            {
              Texto RESULT =null;
		RESULT = new Texto(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textoc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // boton ::= boton ID IGUAL CADENA PUNTOCOMA 
            {
              Boton RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boton a = (Boton)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c); RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boton",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // boton ::= BOTON 
            {
              Boton RESULT =null;
		Boton a = new Boton(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);   RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boton",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // botonCuerpo ::= FINBOTON 
            {
              String RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("botonCuerpo",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // botonCuerpo ::= ID FINBOTON 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("botonCuerpo",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // enlaceCuerpo ::= ID FINENLACE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enlaceCuerpo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // enlaceCuerpo ::= FINENLACE 
            {
              String RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enlaceCuerpo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cuerpoTerminal ::= error 
            {
              Component RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cuerpoTerminal ::= tabla 
            {
              Component RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cuerpoTerminal ::= textoa FINTEXTOA MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texto_A a = (Texto_A)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addText(b);  this.parser.chtml.componetesCSSI.add(a); this.parser.chtml.notificar(a.id, "listo"); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cuerpoTerminal ::= enlace MAYORQUE enlaceCuerpo MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Enlace a = (Enlace)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addText(c);  this.parser.chtml.componetesCSSI.add(a); this.parser.chtml.notificar(a.id, "listo");  RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cuerpoTerminal ::= imagena MAYORQUE textos FINIMAGEN MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Imagen a = (Imagen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		a.addImagen(b);  this.parser.chtml.componetesCSSI.add(a); this.parser.chtml.notificar(a.id, "listo"); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cuerpoTerminal ::= CAJA FINCAJA 
            {
              Component RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cuerpoTerminal ::= cajatexto FINCAJATEXTO MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Caja_Texto a = (Caja_Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addText(b);  this.parser.chtml.componetesCSSI.add(a); this.parser.chtml.notificar(a.id, "listo"); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpoTerminal ::= textoc FINTEXTO MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texto a = (Texto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addText(b);  this.parser.chtml.componetesCSSI.add(a); this.parser.chtml.notificar(a.id, "listo"); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpoTerminal ::= boton MAYORQUE botonCuerpo MAYORQUE 
            {
              Component RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boton a = (Boton)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addText(b); this.parser.chtml.componetesCSSI.add(a); this.parser.chtml.notificar(a.id, "listo"); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoTerminal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // panelCuerpo ::= panelCuerpo ID IGUAL CADENA PUNTOCOMA 
            {
              Panel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.addAtributo(b,c);RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("panelCuerpo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // panelCuerpo ::= PANEL 
            {
              Panel RESULT =null;
		RESULT = new Panel(this.parser.chtml.css,this.parser.chtml.observadores,this.parser.chtml.Observadorrutas);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("panelCuerpo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LcuerpoTerminal ::= LcuerpoTerminal SALTOFIN MAYORQUE 
            {
              Panel RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Panel b = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		b.addSalto();RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LcuerpoTerminal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LcuerpoTerminal ::= LcuerpoTerminal panel 
            {
              Panel RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Panel b = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		b.addPanel(a); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LcuerpoTerminal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LcuerpoTerminal ::= LcuerpoTerminal cuerpoTerminal 
            {
              Panel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component b = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addComponent(b);RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LcuerpoTerminal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LcuerpoTerminal ::= panelCuerpo MAYORQUE 
            {
              Panel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LcuerpoTerminal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // panel ::= LcuerpoTerminal FINPANEL MAYORQUE 
            {
              Panel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("panel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Acuerpo ::= Acuerpo ID IGUAL CADENA PUNTOCOMA 
            {
              CHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CHTML a = (CHTML)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.setBackground(color.getColor(c)); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Acuerpo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Acuerpo ::= CUERPO 
            {
              CHTML RESULT =null;
		RESULT = this.parser.chtml;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Acuerpo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Lcuerpo ::= Lcuerpo SALTOFIN MAYORQUE 
            {
              CHTML RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CHTML b = (CHTML)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		b.addSalto();RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lcuerpo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Lcuerpo ::= Lcuerpo panel 
            {
              CHTML RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CHTML b = (CHTML)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Panel a = (Panel)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		b.addPanel(a); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lcuerpo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Lcuerpo ::= Lcuerpo cuerpoTerminal 
            {
              CHTML RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lcuerpo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Lcuerpo ::= Acuerpo MAYORQUE 
            {
              CHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CHTML a = (CHTML)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lcuerpo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= Lcuerpo FINCUERPO MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // encabezado ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // encabezado ::= cuerpo FINCHTML MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // encabezado ::= ENCABEZADO MAYORQUE archivos cuerpo FINCHTML MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // encabezado ::= FINCHTML MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= ENCABEZADO MAYORQUE archivos FINCHTML MAYORQUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // html ::= chtml encabezado 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("html",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicial ::= html 
            {
              String RESULT =null;
		this.parser.chtml.notificar("fin", "listo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

