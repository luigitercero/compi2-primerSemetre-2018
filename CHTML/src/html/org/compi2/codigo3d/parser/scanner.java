/* The following code was generated by JFlex 1.6.1 */

package html.org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//Scanner para generar C3D

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/html/org/compi2/codigo3d/parser/lexico.flex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPRESION = 2;
  public static final int CUALQUIERA = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\31\1\32\1\51\1\31\1\31\22\0\1\31\1\0\1\33"+
    "\5\0\1\5\1\6\3\0\1\13\1\0\1\2\12\11\1\0\1\7"+
    "\1\1\1\4\1\3\2\0\1\26\1\40\1\27\1\42\1\22\1\14"+
    "\1\50\1\34\1\16\1\30\1\10\1\36\1\35\1\20\1\24\1\47"+
    "\1\10\1\46\1\45\1\21\1\43\2\10\1\23\1\10\1\41\4\0"+
    "\1\25\1\0\1\26\1\40\1\27\1\42\1\22\1\15\1\50\1\34"+
    "\1\17\1\30\1\10\1\36\1\35\1\12\1\24\1\47\1\10\1\46"+
    "\1\45\1\21\1\43\2\10\1\23\1\10\1\41\12\0\1\51\252\0"+
    "\2\37\115\0\1\44\u1ea8\0\1\51\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\0\7\16"+
    "\1\0\1\16\1\0\2\16\2\0\1\16\1\0\3\16"+
    "\1\0\7\16\1\0\1\16\1\0\2\16\3\0\1\16"+
    "\1\0\3\16\1\0\4\16\1\0\1\16\2\17\2\16"+
    "\1\0\1\16\1\0\2\16\5\0\3\16\1\0\3\16"+
    "\1\0\1\20\2\21\2\16\1\0\1\16\1\0\2\16"+
    "\3\0\6\22\1\0\2\22\6\0\2\16\1\23\1\0"+
    "\3\16\1\0\1\16\1\24\1\16\1\0\1\25\1\0"+
    "\1\16\1\26\1\0\1\27\2\22\1\0\7\22\1\0"+
    "\2\22\11\0\1\30\1\31\1\16\1\31\1\16\1\32"+
    "\2\33\1\16\1\34\1\30\2\0\2\22\1\0\4\22"+
    "\1\0\1\22\2\35\2\22\1\0\2\22\10\0\1\36"+
    "\2\16\2\0\2\22\1\0\3\22\1\0\1\37\2\40"+
    "\2\22\1\0\2\22\2\0\1\37\4\0\2\16\3\0"+
    "\2\22\1\0\3\22\1\0\1\41\1\22\1\0\1\42"+
    "\1\43\2\0\1\41\1\0\1\42\1\43\2\16\1\44"+
    "\2\0\1\45\2\46\1\22\1\47\2\50\1\51\1\45"+
    "\1\0\1\47\1\51\1\52\1\53\2\0\1\22\3\0"+
    "\1\22\1\0\1\54\1\0\1\22\3\0\2\55\1\56"+
    "\3\0\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\124\0\176\0\250\0\124\0\124"+
    "\0\124\0\124\0\322\0\374\0\124\0\124\0\124\0\124"+
    "\0\124\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222"+
    "\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372"+
    "\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2"+
    "\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612"+
    "\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762"+
    "\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2"+
    "\0\u08dc\0\124\0\u0150\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae"+
    "\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe"+
    "\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e"+
    "\0\124\0\u0150\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a"+
    "\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a"+
    "\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea"+
    "\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a"+
    "\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u0150\0\u120c\0\u1236\0\u0150"+
    "\0\u1260\0\u128a\0\u0150\0\u12b4\0\124\0\u12de\0\u1308\0\u1332"+
    "\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e\0\u1458\0\u1482"+
    "\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554\0\u157e\0\u15a8\0\u15d2"+
    "\0\u15fc\0\u1626\0\u1650\0\u0150\0\u0150\0\u167a\0\124\0\u16a4"+
    "\0\u0150\0\u0150\0\124\0\u16ce\0\u0150\0\124\0\u16f8\0\u1722"+
    "\0\u174c\0\u1776\0\u17a0\0\u17ca\0\u17f4\0\u181e\0\u1848\0\u1872"+
    "\0\u189c\0\124\0\u0e1c\0\u18c6\0\u18f0\0\u191a\0\u1944\0\u196e"+
    "\0\u1998\0\u19c2\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\u1a94\0\u1abe"+
    "\0\u0150\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66\0\u1b90\0\u1bba\0\u1be4"+
    "\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c\0\u0e1c\0\124\0\u0e1c\0\u1cb6"+
    "\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88\0\u1db2\0\124\0\u1ddc"+
    "\0\u1e06\0\u1e30\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8\0\u1f02\0\u1f2c"+
    "\0\u1f56\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe\0\u2028\0\u2052\0\u0e1c"+
    "\0\u207c\0\u20a6\0\u0e1c\0\u0e1c\0\u20d0\0\u20fa\0\124\0\u2124"+
    "\0\124\0\124\0\u214e\0\u2178\0\124\0\u21a2\0\u21cc\0\u0e1c"+
    "\0\u0e1c\0\124\0\u21f6\0\u0e1c\0\u0e1c\0\124\0\u0e1c\0\124"+
    "\0\u2220\0\124\0\124\0\u0150\0\u0150\0\u224a\0\u2274\0\u229e"+
    "\0\u22c8\0\u22f2\0\u231c\0\u2346\0\u2370\0\u239a\0\u23c4\0\u23ee"+
    "\0\u2418\0\u2442\0\u246c\0\u0e1c\0\124\0\124\0\u2496\0\u24c0"+
    "\0\u24ea\0\124";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\13\1\4\11\13\1\4\3\13\1\15"+
    "\1\16\1\17\3\13\1\4\4\13\1\4\4\13\1\0"+
    "\33\20\1\21\16\20\54\0\1\22\5\0\1\23\1\0"+
    "\1\23\1\0\2\24\2\25\1\23\1\26\1\27\1\23"+
    "\1\30\1\0\1\23\1\31\1\23\3\0\3\23\1\32"+
    "\1\33\3\23\1\34\1\35\1\23\1\36\1\23\1\0"+
    "\1\37\1\0\10\37\1\0\2\37\1\0\1\37\1\0"+
    "\32\37\10\0\3\13\1\0\15\13\3\0\3\13\1\0"+
    "\4\13\1\0\4\13\12\0\1\14\42\0\1\40\57\0"+
    "\3\23\1\0\15\23\3\0\3\23\1\0\4\23\1\0"+
    "\4\23\11\0\3\23\1\0\2\23\2\41\11\23\3\0"+
    "\3\23\1\42\4\23\1\0\4\23\11\0\3\23\1\0"+
    "\15\23\3\0\1\23\1\43\1\23\1\0\4\23\1\0"+
    "\4\23\11\0\3\23\1\0\2\23\2\44\2\23\1\45"+
    "\6\23\3\0\3\23\1\46\4\23\1\0\4\23\11\0"+
    "\2\23\1\47\1\0\4\23\1\47\10\23\3\0\3\23"+
    "\1\0\4\23\1\0\4\23\11\0\3\23\1\0\15\23"+
    "\3\0\3\23\1\0\4\23\1\0\2\23\1\50\1\23"+
    "\11\0\3\23\1\0\12\23\1\51\1\52\1\53\3\0"+
    "\1\54\2\23\1\0\3\23\1\55\1\0\4\23\36\0"+
    "\1\56\24\0\3\23\1\0\10\23\1\57\4\23\3\0"+
    "\3\23\1\0\4\23\1\0\4\23\27\0\1\60\33\0"+
    "\3\23\1\0\12\23\1\61\2\23\3\0\3\23\1\0"+
    "\4\23\1\0\4\23\11\0\3\23\1\0\12\23\1\62"+
    "\2\23\3\0\3\23\1\0\4\23\1\0\4\23\1\0"+
    "\13\63\1\0\36\63\2\64\1\65\47\64\10\0\2\23"+
    "\1\66\1\0\4\23\1\66\10\23\3\0\3\23\1\0"+
    "\4\23\1\0\4\23\13\0\1\67\5\0\1\67\41\0"+
    "\3\23\1\0\12\23\1\70\2\23\3\0\3\23\1\0"+
    "\4\23\1\0\4\23\11\0\3\23\1\0\5\23\1\71"+
    "\7\23\3\0\3\23\1\0\4\23\1\0\4\23\11\0"+
    "\3\23\1\0\7\23\1\72\5\23\3\0\3\23\1\0"+
    "\4\23\1\0\4\23\22\0\1\73\40\0\3\23\1\0"+
    "\13\23\1\74\1\23\3\0\2\23\1\75\1\0\4\23"+
    "\1\0\4\23\11\0\3\23\1\0\13\23\1\76\1\23"+
    "\3\0\3\23\1\0\4\23\1\0\4\23\11\0\3\23"+
    "\1\0\14\23\1\77\3\0\3\23\1\0\4\23\1\0"+
    "\4\23\11\0\3\23\1\0\15\23\3\0\3\23\1\0"+
    "\4\23\1\100\1\101\3\23\11\0\3\23\1\0\15\23"+
    "\3\0\3\23\1\0\4\23\1\102\1\103\3\23\11\0"+
    "\3\23\1\0\5\23\1\104\7\23\3\0\3\23\1\0"+
    "\4\23\1\0\4\23\11\0\3\23\1\0\6\23\1\105"+
    "\6\23\3\0\3\23\1\0\4\23\1\0\4\23\27\0"+
    "\1\106\33\0\3\23\1\0\5\23\1\107\7\23\3\0"+
    "\3\23\1\0\4\23\1\0\4\23\37\0\1\110\23\0"+
    "\3\23\1\0\15\23\3\0\2\23\1\111\1\0\4\23"+
    "\1\0\4\23\11\0\2\23\1\112\1\0\4\23\1\112"+
    "\10\23\3\0\3\23\1\0\4\23\1\0\4\23\1\0"+
    "\1\63\1\113\50\63\2\64\1\114\47\64\2\0\1\115"+
    "\57\0\3\23\1\116\15\23\3\0\3\23\1\0\4\23"+
    "\1\0\4\23\14\0\1\117\46\0\3\23\1\0\15\23"+
    "\3\0\3\23\1\0\4\23\1\0\3\23\1\120\11\0"+
    "\3\23\1\0\15\23\3\0\3\23\1\0\3\23\1\121"+
    "\1\0\4\23\11\0\3\23\1\0\5\23\1\122\7\23"+
    "\3\0\3\23\1\0\4\23\1\0\4\23\44\0\1\123"+
    "\16\0\3\23\1\0\12\23\1\124\2\23\3\0\3\23"+
    "\1\0\4\23\1\0\4\23\11\0\3\23\1\0\12\23"+
    "\1\125\2\23\3\0\3\23\1\0\4\23\1\0\4\23"+
    "\11\0\3\23\1\0\2\23\2\126\11\23\3\0\3\23"+
    "\1\127\4\23\1\0\4\23\11\0\3\23\1\0\12\23"+
    "\1\130\2\23\3\0\3\23\1\0\4\23\1\0\4\23"+
    "\45\0\2\131\14\0\3\23\1\0\15\23\3\0\3\23"+
    "\1\0\4\23\1\131\1\132\3\23\11\0\3\23\1\0"+
    "\15\23\3\0\1\23\1\133\1\23\1\0\4\23\1\0"+
    "\4\23\11\0\3\23\1\0\15\23\3\0\3\23\1\0"+
    "\4\23\1\0\1\23\1\134\2\23\51\0\1\135\11\0"+
    "\3\23\1\0\10\23\1\136\4\23\3\0\3\23\1\0"+
    "\4\23\1\0\4\23\22\0\1\137\40\0\3\23\1\0"+
    "\5\23\1\140\7\23\3\0\3\23\1\0\4\23\1\0"+
    "\4\23\11\0\3\23\1\0\6\23\1\141\6\23\3\0"+
    "\3\23\1\0\4\23\1\0\4\23\15\0\2\142\34\0"+
    "\2\64\1\143\47\64\2\0\1\144\57\0\1\145\1\0"+
    "\1\145\1\0\2\145\2\146\1\145\1\147\1\150\1\145"+
    "\1\151\1\0\1\145\1\152\1\145\3\0\3\145\1\153"+
    "\1\154\3\145\1\0\2\145\1\155\1\145\17\0\2\153"+
    "\1\0\1\156\1\157\1\0\1\160\2\0\1\161\7\0"+
    "\1\153\1\162\6\0\1\163\12\0\3\23\1\0\6\23"+
    "\1\164\6\23\3\0\3\23\1\0\4\23\1\0\4\23"+
    "\11\0\3\23\1\0\15\23\3\0\2\23\1\165\1\0"+
    "\4\23\1\0\4\23\11\0\3\23\1\0\10\23\1\166"+
    "\4\23\3\0\3\23\1\0\4\23\1\0\4\23\37\0"+
    "\1\167\23\0\3\23\1\0\15\23\3\0\3\23\1\0"+
    "\1\170\3\23\1\0\4\23\11\0\3\23\1\0\13\23"+
    "\1\171\1\23\3\0\3\23\1\0\4\23\1\0\4\23"+
    "\11\0\3\23\1\0\10\23\1\172\4\23\3\0\3\23"+
    "\1\0\4\23\1\0\4\23\25\0\1\173\35\0\3\23"+
    "\1\0\11\23\1\174\3\23\3\0\3\23\1\0\4\23"+
    "\1\0\4\23\11\0\3\23\1\0\15\23\3\0\2\23"+
    "\1\175\1\0\4\23\1\0\4\23\11\0\3\23\1\0"+
    "\15\23\3\0\3\23\1\0\4\23\1\0\2\23\1\176"+
    "\1\23\23\0\1\177\37\0\2\23\1\200\1\0\4\23"+
    "\1\200\10\23\3\0\3\23\1\0\4\23\1\0\4\23"+
    "\25\0\1\201\35\0\3\23\1\0\10\23\1\202\4\23"+
    "\3\0\3\23\1\0\4\23\1\0\4\23\11\0\3\23"+
    "\1\0\15\23\3\0\2\23\1\203\1\0\4\23\1\0"+
    "\4\23\17\0\2\204\32\0\2\64\1\143\1\205\46\64"+
    "\2\0\1\144\1\205\56\0\3\145\1\0\15\145\3\0"+
    "\3\145\1\0\4\145\1\0\4\145\11\0\3\145\1\0"+
    "\15\145\3\0\1\145\1\206\1\145\1\0\4\145\1\0"+
    "\4\145\11\0\3\145\1\0\2\145\2\207\11\145\3\0"+
    "\3\145\1\210\4\145\1\0\4\145\11\0\2\145\1\211"+
    "\1\0\4\145\1\211\10\145\3\0\3\145\1\0\4\145"+
    "\1\0\4\145\11\0\3\145\1\0\15\145\3\0\3\145"+
    "\1\0\4\145\1\0\2\145\1\212\1\145\11\0\3\145"+
    "\1\0\12\145\1\213\1\214\1\215\3\0\1\216\2\145"+
    "\1\0\3\145\1\217\1\0\4\145\36\0\1\220\24\0"+
    "\3\145\1\0\10\145\1\221\4\145\3\0\3\145\1\0"+
    "\4\145\1\0\4\145\11\0\3\145\1\0\12\145\1\222"+
    "\2\145\3\0\3\145\1\0\4\145\1\0\4\145\17\0"+
    "\2\210\17\0\1\210\24\0\1\223\5\0\1\223\100\0"+
    "\1\224\30\0\1\225\1\226\1\227\3\0\1\230\6\0"+
    "\1\231\32\0\1\232\53\0\1\233\33\0\2\23\1\234"+
    "\1\0\4\23\1\234\10\23\3\0\3\23\1\0\4\23"+
    "\1\0\4\23\11\0\3\23\1\0\10\23\1\235\4\23"+
    "\3\0\3\23\1\0\4\23\1\0\4\23\11\0\3\23"+
    "\1\0\11\23\1\236\3\23\3\0\3\23\1\0\4\23"+
    "\1\0\4\23\25\0\1\237\35\0\3\23\1\0\6\23"+
    "\1\240\6\23\3\0\3\23\1\0\4\23\1\0\4\23"+
    "\11\0\3\23\1\0\6\23\1\241\6\23\3\0\3\23"+
    "\1\0\4\23\1\0\4\23\11\0\2\23\1\242\1\0"+
    "\4\23\1\242\10\23\3\0\3\23\1\0\4\23\1\0"+
    "\4\23\13\0\1\243\5\0\1\243\41\0\3\23\1\0"+
    "\5\23\1\244\7\23\3\0\3\23\1\0\4\23\1\0"+
    "\4\23\11\0\3\23\1\0\10\23\1\245\4\23\3\0"+
    "\3\23\1\0\4\23\1\0\4\23\13\0\1\246\5\0"+
    "\1\246\44\0\1\247\46\0\3\23\1\247\15\23\3\0"+
    "\3\23\1\0\4\23\1\0\4\23\13\0\1\250\5\0"+
    "\1\250\41\0\3\145\1\0\12\145\1\251\2\145\3\0"+
    "\3\145\1\0\4\145\1\0\4\145\11\0\3\145\1\0"+
    "\5\145\1\252\7\145\3\0\3\145\1\0\4\145\1\0"+
    "\4\145\22\0\1\253\40\0\3\145\1\0\13\145\1\254"+
    "\1\145\3\0\2\145\1\255\1\0\4\145\1\0\4\145"+
    "\11\0\3\145\1\0\13\145\1\256\1\145\3\0\3\145"+
    "\1\0\4\145\1\0\4\145\11\0\3\145\1\0\14\145"+
    "\1\257\3\0\3\145\1\0\4\145\1\0\4\145\11\0"+
    "\3\145\1\0\15\145\3\0\3\145\1\0\4\145\1\260"+
    "\1\261\3\145\11\0\3\145\1\0\15\145\3\0\3\145"+
    "\1\0\4\145\1\262\1\263\3\145\11\0\3\145\1\0"+
    "\5\145\1\264\7\145\3\0\3\145\1\0\4\145\1\0"+
    "\4\145\11\0\3\145\1\0\6\145\1\265\6\145\3\0"+
    "\3\145\1\0\4\145\1\0\4\145\27\0\1\266\33\0"+
    "\3\145\1\0\5\145\1\267\7\145\3\0\3\145\1\0"+
    "\4\145\1\0\4\145\11\0\2\145\1\270\1\0\4\145"+
    "\1\270\10\145\3\0\3\145\1\0\4\145\1\0\4\145"+
    "\30\0\1\271\6\0\1\272\42\0\1\273\52\0\1\274"+
    "\65\0\2\260\50\0\2\262\25\0\1\275\52\0\1\276"+
    "\50\0\1\277\42\0\1\300\5\0\1\300\41\0\3\23"+
    "\1\0\12\23\1\301\2\23\3\0\3\23\1\0\4\23"+
    "\1\0\4\23\11\0\3\23\1\0\15\23\3\0\3\23"+
    "\1\0\1\23\1\302\2\23\1\0\4\23\11\0\3\23"+
    "\1\0\6\23\1\303\6\23\3\0\3\23\1\0\4\23"+
    "\1\0\4\23\15\0\2\304\47\0\1\305\46\0\3\145"+
    "\1\0\15\145\3\0\3\145\1\0\4\145\1\0\3\145"+
    "\1\306\11\0\3\145\1\0\15\145\3\0\3\145\1\0"+
    "\3\145\1\307\1\0\4\145\44\0\1\310\16\0\3\145"+
    "\1\0\12\145\1\311\2\145\3\0\3\145\1\0\4\145"+
    "\1\0\4\145\11\0\3\145\1\0\12\145\1\312\2\145"+
    "\3\0\3\145\1\0\4\145\1\0\4\145\11\0\3\145"+
    "\1\0\2\145\2\313\11\145\3\0\3\145\1\314\4\145"+
    "\1\0\4\145\11\0\3\145\1\0\12\145\1\315\2\145"+
    "\3\0\3\145\1\0\4\145\1\0\4\145\45\0\2\316"+
    "\14\0\3\145\1\0\15\145\3\0\3\145\1\0\4\145"+
    "\1\316\1\317\3\145\11\0\3\145\1\0\15\145\3\0"+
    "\1\145\1\320\1\145\1\0\4\145\1\0\4\145\11\0"+
    "\3\145\1\0\15\145\3\0\3\145\1\0\4\145\1\0"+
    "\1\145\1\321\2\145\51\0\1\322\11\0\3\145\1\0"+
    "\10\145\1\323\4\145\3\0\3\145\1\0\4\145\1\0"+
    "\4\145\11\0\3\145\1\0\6\145\1\324\6\145\3\0"+
    "\3\145\1\0\4\145\1\0\4\145\27\0\1\325\51\0"+
    "\1\326\41\0\2\314\17\0\1\314\40\0\1\327\60\0"+
    "\1\330\62\0\1\331\27\0\1\332\47\0\1\333\37\0"+
    "\3\23\1\0\12\23\1\334\2\23\3\0\3\23\1\0"+
    "\4\23\1\0\4\23\11\0\3\23\1\0\7\23\1\335"+
    "\5\23\3\0\3\23\1\0\4\23\1\0\4\23\17\0"+
    "\2\336\17\0\1\336\33\0\1\337\5\0\1\340\32\0"+
    "\3\145\1\0\6\145\1\341\6\145\3\0\3\145\1\0"+
    "\4\145\1\0\4\145\11\0\3\145\1\0\15\145\3\0"+
    "\2\145\1\342\1\0\4\145\1\0\4\145\37\0\1\343"+
    "\23\0\3\145\1\0\15\145\3\0\3\145\1\0\1\344"+
    "\3\145\1\0\4\145\11\0\3\145\1\0\13\145\1\345"+
    "\1\145\3\0\3\145\1\0\4\145\1\0\4\145\11\0"+
    "\3\145\1\0\10\145\1\346\4\145\3\0\3\145\1\0"+
    "\4\145\1\0\4\145\25\0\1\347\35\0\3\145\1\0"+
    "\15\145\3\0\2\145\1\350\1\0\4\145\1\0\4\145"+
    "\11\0\3\145\1\0\15\145\3\0\3\145\1\0\4\145"+
    "\1\0\2\145\1\351\1\145\23\0\1\352\37\0\2\145"+
    "\1\353\1\0\4\145\1\353\10\145\3\0\3\145\1\0"+
    "\4\145\1\0\4\145\11\0\3\145\1\0\15\145\3\0"+
    "\2\145\1\354\1\0\4\145\1\0\4\145\41\0\1\355"+
    "\40\0\1\356\60\0\1\357\62\0\1\360\14\0\1\361"+
    "\5\0\1\361\67\0\1\362\23\0\3\23\1\0\15\23"+
    "\3\0\3\23\1\0\2\23\1\363\1\23\1\0\4\23"+
    "\11\0\3\23\1\0\5\23\1\364\7\23\3\0\3\23"+
    "\1\0\4\23\1\0\4\23\13\0\1\365\5\0\1\365"+
    "\53\0\1\366\55\0\1\367\33\0\2\145\1\370\1\0"+
    "\4\145\1\370\10\145\3\0\3\145\1\0\4\145\1\0"+
    "\4\145\11\0\3\145\1\0\10\145\1\371\4\145\3\0"+
    "\3\145\1\0\4\145\1\0\4\145\25\0\1\372\35\0"+
    "\3\145\1\0\6\145\1\373\6\145\3\0\3\145\1\0"+
    "\4\145\1\0\4\145\11\0\3\145\1\0\6\145\1\374"+
    "\6\145\3\0\3\145\1\0\4\145\1\0\4\145\11\0"+
    "\2\145\1\375\1\0\4\145\1\375\10\145\3\0\3\145"+
    "\1\0\4\145\1\0\4\145\13\0\1\376\5\0\1\376"+
    "\41\0\3\145\1\0\10\145\1\377\4\145\3\0\3\145"+
    "\1\0\4\145\1\0\4\145\13\0\1\u0100\5\0\1\u0100"+
    "\53\0\1\u0101\51\0\1\u0102\53\0\1\u0103\35\0\3\23"+
    "\1\0\10\23\1\u0104\4\23\3\0\3\23\1\0\4\23"+
    "\1\0\4\23\11\0\3\23\1\0\10\23\1\u0105\4\23"+
    "\3\0\3\23\1\0\4\23\1\0\4\23\24\0\1\u0106"+
    "\56\0\1\u0107\31\0\3\145\1\0\15\145\3\0\3\145"+
    "\1\0\1\145\1\u0108\2\145\1\0\4\145\42\0\1\u0109"+
    "\31\0\1\u010a\56\0\1\u010b\33\0\3\145\1\0\12\145"+
    "\1\u010c\2\145\3\0\3\145\1\0\4\145\1\0\4\145"+
    "\27\0\1\u010d\47\0\1\u010e\52\0\1\u010f\34\0\3\145"+
    "\1\0\15\145\3\0\3\145\1\0\2\145\1\u0110\1\145"+
    "\1\0\4\145\43\0\1\u0111\34\0\1\u0112\45\0\1\u0113"+
    "\40\0\3\145\1\0\10\145\1\u0114\4\145\3\0\3\145"+
    "\1\0\4\145\1\0\4\145\25\0\1\u0115\53\0\1\u0116"+
    "\45\0\1\u0117\52\0\1\u0118\47\0\1\u0119\54\0\1\u011a"+
    "\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9492];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\1\11\2\1\4\11\2\1\5\11\1\0"+
    "\7\1\1\0\1\1\1\0\2\1\2\0\1\1\1\0"+
    "\3\1\1\0\7\1\1\0\1\1\1\0\2\1\3\0"+
    "\1\1\1\0\3\1\1\0\4\1\1\0\1\1\1\11"+
    "\3\1\1\0\1\1\1\0\2\1\5\0\3\1\1\0"+
    "\3\1\1\0\1\1\1\11\3\1\1\0\1\1\1\0"+
    "\2\1\3\0\6\1\1\0\2\1\6\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\11\2\1\1\0\7\1\1\0\2\1\11\0\3\1"+
    "\1\11\3\1\1\11\2\1\1\11\2\0\2\1\1\0"+
    "\4\1\1\0\1\1\1\11\3\1\1\0\2\1\10\0"+
    "\3\1\2\0\2\1\1\0\3\1\1\0\1\1\1\11"+
    "\3\1\1\0\2\1\2\0\1\11\4\0\2\1\3\0"+
    "\2\1\1\0\3\1\1\0\2\1\1\0\2\1\2\0"+
    "\1\11\1\0\2\11\2\1\1\11\2\0\2\1\1\11"+
    "\3\1\1\11\1\1\1\11\1\0\2\11\2\1\2\0"+
    "\1\1\3\0\1\1\1\0\1\1\1\0\1\1\3\0"+
    "\1\1\2\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de usuario
    

//VARIALES Y METODOS DEL SCANER
String expresion="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*System.out.println("    CUALQUIERA");*/return new Symbol(sym.CUALQUIERA     , yyline, yycolumn, yytext());
            }
          case 48: break;
          case 2: 
            { /*System.out.println("    MAYORQUE");*/return new Symbol(sym.MAYORQUE, yyline, yycolumn, null);
            }
          case 49: break;
          case 3: 
            { return new Symbol(sym.IGUAL    , yyline, yycolumn, null);
            }
          case 50: break;
          case 4: 
            { return new Symbol(sym.PAREA    , yyline, yycolumn, null);
            }
          case 51: break;
          case 5: 
            { return new Symbol(sym.PAREC    , yyline, yycolumn, null);
            }
          case 52: break;
          case 6: 
            { return new Symbol(sym.PUNTOCOMA    , yyline, yycolumn, null);
            }
          case 53: break;
          case 7: 
            { /*System.out.println("    ID");        */return new Symbol(sym.ID     , yyline, yycolumn, yytext());
            }
          case 54: break;
          case 8: 
            { /*System.out.println("    ENTERO");    */return new Symbol(sym.ENTERO    , yyline, yycolumn, yytext());
            }
          case 55: break;
          case 9: 
            { /*Espacios en blanco, ignorados*/
            }
          case 56: break;
          case 10: 
            { /*Saltos de linea, ignorados*/
            }
          case 57: break;
          case 11: 
            { yybegin (EXPRESION);
            }
          case 58: break;
          case 12: 
            { expresion +=yytext();
            }
          case 59: break;
          case 13: 
            { String temporal=expresion; 
        expresion=""; 
        yybegin(YYINITIAL); 
     /*System.out.println("    CADENA");*/
        return new Symbol(sym.CADENA, yyline+1, yyline, temporal);
            }
          case 60: break;
          case 14: 
            { /*System.out.println("    AID");       */return new Symbol(sym.AID     , yyline, yycolumn, yytext());
            }
          case 61: break;
          case 15: 
            { /*System.out.println("    CJS");       */return new Symbol(sym.CJS     , yyline, yycolumn, yytext());
            }
          case 62: break;
          case 16: 
            { /*System.out.println("    FINENLACE"); */return new Symbol(sym.CAJA     , yyline, yycolumn, yytext());
            }
          case 63: break;
          case 17: 
            { /*System.out.println("    CCSS");      */return new Symbol(sym.CCSS     , yyline, yycolumn, yytext());
            }
          case 64: break;
          case 18: 
            { /*System.out.println("    FIN");       */return new Symbol(sym.FIN    , yyline, yycolumn, yytext());
            }
          case 65: break;
          case 19: 
            { /*System.out.println("    texto");     */return new Symbol(sym.TEXTO     , yyline, yycolumn, yytext());
            }
          case 66: break;
          case 20: 
            { /*System.out.println("    chtml");     */return new Symbol(sym.CHTML     , yyline, yycolumn, yytext());
            }
          case 67: break;
          case 21: 
            { /*System.out.println("    boton");     */return new Symbol(sym.BOTON     , yyline, yycolumn, yytext());
            }
          case 68: break;
          case 22: 
            { /*System.out.println("    panel");     */return new Symbol(sym.PANEL     , yyline, yycolumn, yytext());
            }
          case 69: break;
          case 23: 
            { /*System.out.println("    COMENTARIO");*/
            }
          case 70: break;
          case 24: 
            { /*System.out.println("    Imagen");    */return new Symbol(sym.IMAGEN     , yyline, yycolumn, yytext());
            }
          case 71: break;
          case 25: 
            { /*System.out.println("    titulo");    */return new Symbol(sym.TITULO     , yyline, yycolumn, yytext());
            }
          case 72: break;
          case 26: 
            { /*System.out.println("    ENLACE");    */return new Symbol(sym.ENLACE     , yyline, yycolumn, yytext());
            }
          case 73: break;
          case 27: 
            { /*System.out.println("    FINENLACE"); */return new Symbol(sym.OPCION     , yyline, yycolumn, yytext());
            }
          case 74: break;
          case 28: 
            { /*System.out.println("    cuerpo");    */return new Symbol(sym.CUERPO     , yyline, yycolumn, yytext());
            }
          case 75: break;
          case 29: 
            { /*System.out.println("    FINCJS");    */return new Symbol(sym.FINCJS     , yyline, yycolumn, yytext());
            }
          case 76: break;
          case 30: 
            { /*System.out.println("    textoA");    */return new Symbol(sym.TEXTOA     , yyline, yycolumn, yytext());
            }
          case 77: break;
          case 31: 
            { /*System.out.println("    FINENLACE"); */return new Symbol(sym.FINCAJA     , yyline, yycolumn, yytext());
            }
          case 78: break;
          case 32: 
            { /*System.out.println("    FIN-CCSS");  */return new Symbol(sym.FINCCSS     , yyline, yycolumn, yytext());
            }
          case 79: break;
          case 33: 
            { /*System.out.println("    FINchtml");  */return new Symbol(sym.FINCHTML     , yyline, yycolumn, yytext());
            }
          case 80: break;
          case 34: 
            { /*System.out.println("    fin-boton"); */return new Symbol(sym.FINBOTON     , yyline, yycolumn, yytext());
            }
          case 81: break;
          case 35: 
            { /*System.out.println("    fin panel"); */return new Symbol(sym.FINPANEL     , yyline, yycolumn, yytext());
            }
          case 82: break;
          case 36: 
            { /*System.out.println("    SALTO");     */return new Symbol(sym.SALTOFIN     , yyline, yycolumn, yytext());
            }
          case 83: break;
          case 37: 
            { /*System.out.println("    FINIMAGEN"); */return new Symbol(sym.FINIMAGEN     , yyline, yycolumn, yytext());
            }
          case 84: break;
          case 38: 
            { /*System.out.println("    FINtitulo"); */return new Symbol(sym.FINTITULO     , yyline, yycolumn, yytext());
            }
          case 85: break;
          case 39: 
            { /*System.out.println("    FINENLACE"); */return new Symbol(sym.FINENLACE     , yyline, yycolumn, yytext());
            }
          case 86: break;
          case 40: 
            { /*System.out.println("    FINENLACE"); */return new Symbol(sym.FINOPCION     , yyline, yycolumn, yytext());
            }
          case 87: break;
          case 41: 
            { /*System.out.println("    FINcuerpo"); */return new Symbol(sym.FINCUERPO     , yyline, yycolumn, yytext());
            }
          case 88: break;
          case 42: 
            { /*System.out.println("    ENCABEZADO");*/return new Symbol(sym.ENCABEZADO     , yyline, yycolumn, yytext());
            }
          case 89: break;
          case 43: 
            { /*System.out.println("    CAJATEXTO"); */return new Symbol(sym.CAJATEXTO     , yyline, yycolumn, yytext());
            }
          case 90: break;
          case 44: 
            { /*System.out.println("    fintexto");*/return new Symbol(sym.FINTEXTO     , yyline, yycolumn, yytext());
            }
          case 91: break;
          case 45: 
            { /*System.out.println(" FINENCABEZADO");*/return new Symbol(sym.FINENCABEZADO     , yyline, yycolumn, yytext());
            }
          case 92: break;
          case 46: 
            { /*System.out.println("    fintexto_a");*/return new Symbol(sym.FINTEXTOA     , yyline, yycolumn, yytext());
            }
          case 93: break;
          case 47: 
            { /*System.out.println("    FINCAJATEXTO");*/return new Symbol(sym.FINCAJATEXTO     , yyline, yycolumn, yytext());
            }
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
