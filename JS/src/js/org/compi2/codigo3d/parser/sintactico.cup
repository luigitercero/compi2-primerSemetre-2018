package js.org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;
import com.TreeParser.*;
import java.util.ArrayList;
import Simbol.Metodo.Metodo;
//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code 
{://Codigo visible
 public ParserTree parserTree = new ParserTree("hola");
public ArrayList<Symbol> error = new ArrayList<Symbol>();
 public Metodo metodo = new Metodo();
  public ArrayList<String> ejecucion = new ArrayList();
   public ArrayList<ParserTree> declaracion = new ArrayList<ParserTree>();
    String expresion = "";
    public String ruta ="";

   public observador.errores.RecibirError enviar;
    public String enviarError(String s){
        if (enviar != null){
            enviar.recibirError(ruta +"\n   "+s);
        }
    return s;
    }
    
    public void syntax_error(Symbol s){
    System.err.println( enviarError("Error Sintactico en la Linea  " + (s.right+1) +" Columna "+s.left+ ". Simbolo \'" +s.value + "\' no reconocido." ));

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         System.err.println(enviarError("Error Sintactico en la Linea no se logro recuperar de error" + (s.right+1)+ "Columna "+s.left+". " + s.value + " no reconocido."));
        //this.error.add(s);
        //System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String 
MASMAS,
MENOSMENOS,
MAS,
MENOS,
POR,
DIV,
PAREA,
ELEVA,
PAREC,
LLV1,
LLV2,
COMA,
DOSP,
PUNTOCOMA,
OR,
Y,
NEL,
PUNTO,
MAYORQUE,
MENORQUE,
MAYORIGUAL,
MENORIGUAL,
IGUALIGUAL,
NOIGUAL,
VERDADERO,
FALSO,
DIMV,
RETORNAR,
SI,
SINO,
SELECCIONA,
CASO,
DEFECTO,
PARA,
MIENTRAS,
TERMINAR,
IMPRIMIR,
FUNCION,
MENSAJEV,
DATE,
DATETIME,
NUMERO,
NDECIMAL,
CARACTER,
ID,
CADENA,
MOD,DOSPUNTOS,DOCUMENTO,MENSAJE
;
nonterminal Node valor;
nonterminal ParserTree
retornometodo, mensaje,
titulo,
inicial,
graphick,
encabezado,
clase,
visibilidad,
cuerpo,
cuerpo1,
var_global,
arreglo,
retornar,
if1,
if2,
funcion,
control,
parametro,
tipo,
ids,
dimension,
llamarmetodo,
imprimir,
var_globalasignar,
exp,
arreglo_global_asignar,
arreglo_asignar,
arre_global,
arreglo_asignar1,
arreglo_asignar2,
principal,
lista_sentencias,
sentencia,
variable,
var_asignar,
arreglo_declarar,
sentecia,
detener,
continuar,
var_declararcion,
declaals,
incluir,
importar,
herencia,
switch,
mientras,
hacer,
para,
cuerpo2,
 metodo,
atributo,
get_class,
get_instancia,
condicion,
caso,
defecto,
swich_cuerpo,

aumento,
salida_grafica,
arreglo_asignar_d,
graficar_funcion,
llamardatos,
columna,
procesar,
 donde ,
 dondecada ,
 dondetodo ,
llamarhk,
tipo2,
decparm,
agregarvar,
identi,
corchetes,
sentencia2,
visibilidad1,swich_cuerpo1,parametroID,
clase1,als_asignar,arr,datos,alsnuevo,js,getMetodo,param,declaracion,asignacion,asignar,valorVector,vector,asigna,listacuerpo,
documento,setelemento,observador,funcioVector,parVerctor;



nonterminal Node dato,texto;

precedence left OR;
precedence left Y;
precedence left MAYORQUE, MENORQUE, MAYORIGUAL, MENORIGUAL, IGUALIGUAL, NEL,NOIGUAL;
precedence left MASMAS,MENOSMENOS;
precedence left MAS, MENOS;
precedence left POR, DIV, MOD;
precedence left ELEVA;

start with inicial;

inicial ::= js:a{:this.parser.parserTree = a; RESULT = a;:};

js ::= js:a principal:b{:a.addChildren(b); RESULT = a;:}
    | principal:a{:ParserTree arbol = new ParserTree("principal"); arbol.addChildren(a);RESULT=arbol;:}
    ;
principal::=
      metodo:a{:RESULT = a ;:}
     |declaracion:a PUNTOCOMA{:this.parser.declaracion.add(a); RESULT = a;:}
     |getMetodo:a PUNTOCOMA{:if(a.root.childNode.size()>1)
                this.parser.ejecucion.add(a.root.childNode.get(0).
                        token.getValueString()+"_"+a.root.childNode.get(1).childNode.size());
                else this.parser.ejecucion.add(a.root.childNode.get(0).
                        token.getValueString()+"_0"); RESULT = a;:}
     |imprimir:a PUNTOCOMA {:RESULT = a;:}
     | control:a {:RESULT = a;:}
     |mensaje:a PUNTOCOMA {:RESULT = a;:}
     | asignacion:a PUNTOCOMA {:RESULT = a;:}
     | error:e {: RESULT = new ParserTree("error"); :}
     | setelemento:a PUNTOCOMA {:ParserTree arbol = new ParserTree("observador"); arbol.addChildren(a); RESULT = arbol;:}
     ;


documento::=DOCUMENTO PUNTO ID:a PAREA exp:b PAREC{:
          ParserTree arbol = new ParserTree("getComponente");
          Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
          //Node nodob = new Node(new Term("CADENA"),new Token (new Location(bleft,bright),b,"CADENA"));
          //arbol.addChildren(nodo,nodob);
          //arbol.addChildren(nodo,exp.root);
          arbol.addChildren(nodo,b.root);
          RESULT=arbol;
          :}

 ;
setelemento::=
  DOCUMENTO PUNTO ID:a PAREA exp:b COMA funcion:c PAREC{:
          ParserTree arbol = new ParserTree("observadorUniversal");
          Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
          //Node nodob = new Node(new Term("CADENA"),new Token (new Location(bleft,bright),b,"CADENA"));
          //arbol.addChildren(nodo,nodob);
          //arbol.addChildren(nodo,exp.root);
          arbol.addChildren(nodo);
          arbol.addChildren(b,c);
          RESULT=arbol;
          :}
  |documento:a PUNTO ID:b PAREA exp:c COMA funcion:d PAREC
          {:
          ParserTree arbol = new ParserTree("setelementoDocumento");
          Node nodob = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));
          //Node nodoc = new Node(new Term("CADENA"),new Token (new Location(cleft,cright),c,"CADENA"));
          arbol.addChildren(a);
          arbol.addChildren(nodob);
          arbol.addChildren(c);
          arbol.addChildren(d);
          RESULT=arbol;
          :}
  | ID:a PUNTO ID:b PAREA exp:c COMA funcion:d PAREC{:
          ParserTree arbol = new ParserTree("setelementoID");
          Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
          Node nodob = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));
          
          arbol.addChildren(nodo,nodob);
          arbol.addChildren(c,d);
          RESULT=arbol;
          :}
  | getMetodo:a PUNTO ID:b PAREA exp:c COMA funcion:d PAREC 
        {:
          ParserTree arbol = new ParserTree("setelementoConfuncion");
          Node nodob = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));
          arbol.addChildren(a);
          arbol.addChildren(nodob);
          arbol.addChildren(c,d);
          RESULT=arbol;
          :}

 | ID:a LLV1 exp:e LLV2 PUNTO ID:b PAREA exp:c COMA funcion:d PAREC{:
          ParserTree arbol = new ParserTree("setelementoConIDVector");
          Node nodoa = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
          Node nodob = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));
          ParserTree arbol2 = new ParserTree("vector");
          //Node nodoc = new Node(new Term("CADENA"),new Token (new Location(cleft,cright),c,"CADENA"));
          //Node nodod = new Node(new Term("CADENA"),new Token (new Location(dleft,dright),d,"CADENA"));
          arbol2.addChildren(nodoa);
          arbol2.addChildren(e);
          arbol.addChildren(arbol2); 
          arbol.addChildren(nodob);
                   
          arbol.addChildren(c,d);
          RESULT=arbol;
          :}
  | getMetodo:a LLV1 exp:e LLV2 PUNTO ID:b PAREA exp:c COMA funcion:d PAREC 
        {:
          ParserTree arbol = new ParserTree("setelementoConfuncionVector");
          Node nodob = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));
          ParserTree arbol2 = new ParserTree("vector");
          //Node nodoc = new Node(new Term("CADENA"),new Token (new Location(cleft,cright),c,"CADENA"));
          //Node nodod = new Node(new Term("CADENA"),new Token (new Location(dleft,dright),d,"CADENA"));
          arbol2.addChildren(a,e);
          arbol.addChildren(arbol2);
          arbol.addChildren(nodob);
          arbol.addChildren(c,d);
          RESULT=arbol;
          :}
  ;


funcion::=  FUNCION PAREA PAREC LLV1 cuerpo1:a {:ParserTree arbol = new ParserTree("funcion");
   arbol.addChildren(a);
   RESULT =a;
  :}
  |  exp:a {:RESULT = a ;:}

  ;


parametroID::= parametroID:b COMA ID:a{:Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
    b.addChildren(nodo); RESULT =b;:}
  | ID:a{:
    ParserTree arbol = new ParserTree("parametro");
    Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
    arbol.addChildren(nodo); RESULT =arbol;:}
  ;

metodo::= 
    FUNCION ID:a PAREA parametroID:b PAREC LLV1 cuerpo1:c
    {:
        
        Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        ParserTree arbol = new ParserTree("metodo");
        arbol.addChildren(nodo);
        arbol.addChildren(b);
        arbol.addChildren(c);
        this.parser.metodo.insertar(a+"_"+b.root.childNode.size(), b.root,c.root);
        RESULT = arbol;
    :}
    |FUNCION ID:a PAREA PAREC LLV1 cuerpo1:c
    {:
        
        Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        ParserTree arbol = new ParserTree("metodo");
        arbol.addChildren(nodo);
        arbol.addChildren(c);
        this.parser.metodo.insertar(a+"_"+0, null,c.root);
        RESULT = arbol;
    :}
    ;

if1::= SI:e PAREA exp:a PAREC LLV1 cuerpo1:b
    {:ParserTree arbol = new ParserTree("if1",eleft,eright);
      arbol.addChildren(a);
      arbol.addChildren(b);
      RESULT =arbol;
    :};
if2::= SI:e PAREA exp:a PAREC LLV1 cuerpo1:b SINO LLV1 cuerpo1:c
    {:ParserTree arbol = new ParserTree("if2",eleft,eright);
      arbol.addChildren(a);
      arbol.addChildren(b);
      arbol.addChildren(c);
      RESULT =arbol;
    :};
switch::= SELECCIONA:e PAREA exp:a PAREC LLV1 swich_cuerpo:b
    {:ParserTree arbol = new ParserTree("selecciona",eleft,eright);
      arbol.addChildren(a);
      arbol.addChildren(b);
      RESULT =arbol;
    :}
    ;
defecto ::= 
    DEFECTO DOSPUNTOS cuerpo:a LLV2{:ParserTree arbol = new ParserTree("defecto"); arbol.addChildren(a); RESULT =arbol;:}
    |LLV2
        {:
           ParserTree arbol = new ParserTree("defecto"); 
           RESULT = arbol;
        :}
    ;
swich_cuerpo::= 
    swich_cuerpo1:a defecto:b{:a.addChildren(b);RESULT =a;:}
    |defecto:a{:ParserTree arbol = new ParserTree("cuerpo_switch"); arbol.addChildren(a); RESULT=arbol;:}
    ;
swich_cuerpo1 ::= 
    swich_cuerpo1:a caso:b{:a.addChildren(b); RESULT=a;:} 
    | caso:a{:ParserTree arbol = new ParserTree("cuerpo_switch"); arbol.addChildren(a); RESULT=arbol;:}
    ;
caso ::= 
    CASO exp:a DOSPUNTOS cuerpo:b {:ParserTree arbol = new ParserTree("caso"); arbol.addChildren(a);arbol.addChildren(b); RESULT=arbol;:}
    | CASO exp:a DOSPUNTOS {:ParserTree arbol = new ParserTree("caso"); arbol.addChildren(a); RESULT=arbol;:}
    ;
para::= PARA:e PAREA asignacion:a PUNTOCOMA exp:c PUNTOCOMA asignacion:d PAREC LLV1 cuerpo1:b
    {:ParserTree arbol = new ParserTree("para");
      arbol.addChildren(a);
      arbol.addChildren(c);
      arbol.addChildren(d);
      arbol.addChildren(b);
      RESULT =arbol;
    :}
    ;
mientras::= MIENTRAS:e PAREA exp:a PAREC LLV1 cuerpo1:b
    {:ParserTree arbol = new ParserTree("mientras",eleft,eright);
      arbol.addChildren(a);
      arbol.addChildren(b);
      RESULT =arbol;
    :}
    ;
cuerpo1 ::= cuerpo:a LLV2{:RESULT = a;:}
    |LLV2 {:ParserTree arbol = new ParserTree("nada");RESULT =arbol;:}
    ;
cuerpo ::= 
    cuerpo:a listacuerpo:b {:a.addChildren(b);RESULT = a;:}
    |listacuerpo:a {:ParserTree arbol = new ParserTree("cuerpo");  arbol.addChildren(a);RESULT = arbol;:}
    ;
listacuerpo ::= 
     control:a{:RESULT = a; :} 
    |declaracion:a PUNTOCOMA {:RESULT = a; :}
    |asignacion:a PUNTOCOMA {:RESULT = a; :}
    |imprimir:a PUNTOCOMA{:RESULT = a;:}
    |mensaje:a PUNTOCOMA{:RESULT = a;:}
    |TERMINAR:a PUNTOCOMA{:
        ParserTree arbol = new ParserTree("TERMINAR");
         RESULT = arbol; :}
    | RETORNAR exp:a PUNTOCOMA{:ParserTree arbol = new ParserTree("retornar");  arbol.addChildren(a);RESULT = arbol;:}
    | RETORNAR arreglo_asignar:a PUNTOCOMA{:ParserTree arbol = new ParserTree("retornar");  ParserTree arbol2 = new ParserTree("retoronoArreglo"); arbol2.addChildren(a);arbol.addChildren(arbol2);RESULT = arbol;:}
    |RETORNAR PUNTOCOMA{:ParserTree arbol = new ParserTree("retornar"); RESULT = arbol;:}
    | error:e {:  RESULT = new ParserTree("error"); :}
    //| error:e PUNTOCOMA{:System.err.println("error en  "+ e);:}
    |getMetodo:a PUNTOCOMA{:if(a.root.childNode.size()>1)
                this.parser.ejecucion.add(a.root.childNode.get(0).
                        token.getValueString()+"_"+a.root.childNode.get(1).childNode.size());
                else this.parser.ejecucion.add(a.root.childNode.get(0).
                        token.getValueString()+"_0"); RESULT = a;:}
    | observador:a PUNTOCOMA {:RESULT = a;:}
    | setelemento:a PUNTOCOMA {:ParserTree arbol = new ParserTree("observador"); arbol.addChildren(a); RESULT = arbol;:}
    ;
imprimir ::= IMPRIMIR:a PAREA exp:b PAREC {:ParserTree arbol = new ParserTree("imprimir"); Node nodo = new Node(new Term("imprimir"),new Token (new Location(aleft,aright),a,"imprimir")); arbol.addChildren(b); arbol.addChildren(nodo);RESULT = arbol;:}
;
    
mensaje ::= MENSAJE:a PAREA exp:b PAREC {:ParserTree arbol = new ParserTree("mensaje"); Node nodo = new Node(new Term("imprimir"),new Token (new Location(aleft,aright),a,"imprimir")); arbol.addChildren(b); arbol.addChildren(nodo);RESULT = arbol;:}
;
control::= 
      if1:a{:ParserTree arbol = new ParserTree("control"); arbol.addChildren(a);RESULT =arbol;:}
    | if2:a{:ParserTree arbol = new ParserTree ("control"); ; arbol.addChildren(a);RESULT =arbol;:}
    | mientras:a{:ParserTree arbol = new ParserTree("control"); arbol.addChildren(a);RESULT =arbol;:}
    | para:a{:ParserTree arbol = new ParserTree("control"); arbol.addChildren(a);RESULT =arbol;:}
    | switch:a{:ParserTree arbol = new ParserTree("control"); arbol.addChildren(a);RESULT =arbol;:}
    | hacer:a{:ParserTree arbol = new ParserTree("control"); arbol.addChildren(a);RESULT =arbol;:} 
    ;
declaracion ::= 
    DIMV asignacion:a
    {:ParserTree arbol = new ParserTree("declaracion");
    arbol.addChildren(a); RESULT=arbol;
    :}
    ;
asignacion ::= 
    ID:a asignar:b
        {:ParserTree arbol = new ParserTree("asignacion");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo);arbol.addChildren(b); RESULT=arbol;:}
    | ID:a LLV1 exp:c LLV2 asignar:b 
        {:ParserTree arbol = new ParserTree("asignacionll");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo);arbol.addChildren(c);arbol.addChildren(b); RESULT=arbol;
        :}
    |  ID:a MASMAS 
        {:ParserTree arbol = new ParserTree("asignacion++");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo);RESULT=arbol;:}
    |   ID:a MENOSMENOS 
        {:ParserTree arbol = new ParserTree("asignacion--");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo); RESULT=arbol;:}

    | ID:a 
        {:ParserTree arbol = new ParserTree("asignacion");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo);arbol.addChildren(new ParserTree("nada")); RESULT=arbol;:}
    | ID:a LLV1 exp:c LLV2 
        {:ParserTree arbol = new ParserTree("asignacionll");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo);arbol.addChildren(c);arbol.addChildren(new ParserTree("nada")); RESULT=arbol;
        :}
    ;
asignar ::= asigna:a{:ParserTree arbol = new ParserTree("asignar"); arbol.addChildren(a); RESULT = arbol;:}
  
    ;
asigna::=  
    DOSPUNTOS exp:a
        {:ParserTree arbol = new ParserTree("asigna"); arbol.addChildren(a); RESULT = arbol;:}
    |DOSPUNTOS arreglo_asignar:a
        {:ParserTree arbol = new ParserTree("asignall"); arbol.addChildren(a); RESULT = arbol;:}
    ;
exp::=  
      exp:c MAS:a        exp:b
        {:Node nodo = new Node(new Term("MAS"),       new Token(new Location(aleft,aright),a,"MAS"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        :}
    | exp:c MENOS:a      exp:b
        {:Node nodo = new Node(new Term("MENOS"),     new Token(new Location(aleft,aright),a,"MENOS"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        :}
    | exp:c POR:a        exp:b
        {:Node nodo = new Node(new Term("POR"),       new Token(new Location(aleft,aright),a,"POR"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        :}
    | exp:c DIV:a       exp:b
        {:Node nodo = new Node(new Term("DIV"),         new Token(new Location(aleft,aright),a,"DIV"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        :}

    | exp:c MOD:a       exp:b
        {:Node nodo = new Node(new Term("MOD"),         new Token(new Location(aleft,aright),a,"MOD"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        :}
    | exp:c ELEVA:a      exp:b
        {:Node nodo = new Node(new Term("ELEVA"),      new Token(new Location(aleft,aright),a,"ELEVA"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        :}
    | exp:c MAYORQUE:a   exp:b
        {:Node nodo = new Node(new Term("MAYORQUE"),   new Token(new Location(aleft,aright),a,"MAYORQUE"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        :}
    | exp:c MENORQUE:a   exp:b
        {:Node nodo = new Node(new Term("MENORQUE"),   new Token(new Location(aleft,aright),a,"MENORQUE"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        :}
    | exp:c MAYORIGUAL:a exp:b
        {:Node nodo = new Node(new Term("MAYORIGUAL"), new Token(new Location(aleft,aright),a,"MAYORIGUAL"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        :}
    | exp:c MENORIGUAL:a exp:b
        {:Node nodo = new Node(new Term("MENORIGUAL"), new Token(new Location(aleft,aright),a,"MENORIGUAL"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        :}
    | exp:c IGUALIGUAL:a      exp:b
        {:Node nodo = new Node(new Term("IGUAL"),      new Token(new Location(aleft,aright),a,"IGUAL"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        :}
    | exp:c NOIGUAL:a    exp:b
        {:Node nodo = new Node(new Term("NOIGUAL"),    new Token(new Location(aleft,aright),a,"NOIGUAL"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        :} 
    | exp:c OR:a         exp:b
        {:Node nodo = new Node(new Term("OR"),         new Token(new Location(aleft,aright),a,"OR"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        :}
    | exp:c Y:a          exp:b
        {:Node nodo = new Node(new Term("AND"),          new Token(new Location(aleft,aright),a,"AND"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        :}
    | NEL:a    exp:b
        {:Node nodo = new Node(new Term("NEL"),new Token(new Location(aleft,aright),a,"NEL"));
        ParserTree arbol = new ParserTree("exp");
         arbol.addChildren(nodo);
         arbol.addChildren(b);
         RESULT = arbol;
        :}
    | MENOS:a  exp:b
        {:Node nodo = new Node(new Term("MENOS"),new Token (new Location(aleft,aright),a,"MENOS"));
        ParserTree arbol = new ParserTree("exp");
         arbol.addChildren(nodo);
         arbol.addChildren(b);
         RESULT = arbol;
        :}
    | exp:b MASMAS:a
        {:Node nodo = new Node(new Term("MASMAS"),new Token (new Location(aleft,aright),a,"MASMAS"));
        ParserTree arbol = new ParserTree("exp");
         arbol.addChildren(b);
         arbol.addChildren(nodo);
         RESULT = arbol;
        :}
    | exp:b MENOSMENOS:a
        {:Node nodo = new Node(new Term("MENOSMENOS"),new Token (new Location(aleft,aright),a,"MENOSMENOS"));
        ParserTree arbol = new ParserTree("exp");
         arbol.addChildren(b);
         arbol.addChildren(nodo);
         RESULT = arbol;
        :}
    | PAREA exp:c PAREC{:RESULT = c;:}
    | valor:a {:ParserTree arbol = new ParserTree ("exp"); arbol.addChildren(a); RESULT = arbol;:}
    | getMetodo:a {:ParserTree arbol = new ParserTree ("exp"); arbol.addChildren(a); RESULT = arbol;:}
    | valorVector:a {:ParserTree arbol = new ParserTree("exp"); arbol.addChildren(a); RESULT =arbol;:}
    | documento:a {:ParserTree arbol = new ParserTree("documento"); arbol.addChildren(a); RESULT =arbol;:}
    |funcioVector:a {:ParserTree arbol = new ParserTree("FuncionVector"); arbol.addChildren(a); RESULT =arbol;:}
    ;
valor ::= 
      ID:a{:Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));RESULT=nodo;:}
    | NUMERO:a{:Node nodo = new Node(new Term("NUMERO"),new Token (new Location(aleft,aright),a,"NUMERO"));RESULT=nodo;:}
    | NDECIMAL:a{:Node nodo = new Node(new Term("NDECIMAL"),new Token (new Location(aleft,aright),a,"NDECIMAL"));RESULT=nodo;:}
    | DATE:a{:Node nodo = new Node(new Term("DATE"),new Token (new Location(aleft,aright),a,"DATE"));RESULT=nodo;:}
    | DATETIME:a{:Node nodo = new Node(new Term("DATETIME"),new Token (new Location(aleft,aright),a,"DATETIME"));RESULT=nodo;:}
    | CARACTER:a{:Node nodo = new Node(new Term("CARACTER"),new Token (new Location(aleft,aright),a,"CARACTER"));RESULT=nodo;:}
    | CADENA:a{:Node nodo = new Node(new Term("CADE"),new Token (new Location(aleft,aright),a,"CADE"));RESULT=nodo;:}
    | VERDADERO:a{:Node nodo = new Node(new Term("VERDADERO"),new Token (new Location(aleft,aright),a,"VERDADERO"));RESULT=nodo;:}
    | FALSO:a{:Node nodo = new Node(new Term("FALSO"),new Token (new Location(aleft,aright),a,"VERDADERO"));RESULT=nodo;:}
    ;
valorVector ::= vector:a LLV2{:RESULT =a ;:}
    ;
vector ::= 
    ID:a LLV1 exp:b{:ParserTree arbol = new ParserTree("vector"); Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
    arbol.addChildren(nodo);
    arbol.addChildren(b);      
          RESULT=arbol;:}
    |getMetodo:a LLV1 exp:b{:
      ParserTree arbol = new ParserTree("vectorMetodo"); 

    arbol.addChildren(a);
    arbol.addChildren(b);      
          RESULT=arbol;:}
    ;

arreglo_asignar::= arreglo:a LLV2 {:RESULT = a;:};

arreglo ::= LLV1 exp:a {:ParserTree arbol = new ParserTree("arreglo"); arbol.addChildren(a);RESULT = arbol;:}
    | arreglo:a COMA exp:b{:a.addChildren(b);RESULT = a;:}
;

funcioVector::= parVerctor:a PUNTO ID:b PAREA PAREC{:ParserTree arbol = new ParserTree("VectorAtexto"); Node nodo = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));arbol.addChildren(a);arbol.addChildren(nodo); RESULT = arbol;:}
              | parVerctor:a  PUNTO ID:b{:ParserTree arbol = new ParserTree("Vectorconteo"); Node nodo = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));arbol.addChildren(a);arbol.addChildren(nodo); RESULT = arbol;:}

              ;

parVerctor::= ID:a{:Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID")); ParserTree arbol = new ParserTree(nodo);  RESULT = arbol;:}
          |getMetodo:a {:RESULT =a;:}
        ;
getMetodo ::= 
    ID:a  PAREA parametro:b PAREC{:ParserTree arbol = new ParserTree("getMetodo",aright,aleft);Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
           arbol.addChildren(nodo);arbol.addChildren(b); RESULT=arbol;:}
    |ID:a PAREA PAREC{:ParserTree arbol = new ParserTree("getMetodo",aright,aleft);Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
           arbol.addChildren(nodo); RESULT=arbol;:}
    ;


parametro ::= parametro:b COMA exp:a{: b.addChildren(a); RESULT = b;:}
    |exp:a {:ParserTree arbol = new ParserTree ("parametro"); arbol.addChildren(a); RESULT = arbol;:}
    ;


