/* The following code was generated by JFlex 1.6.1 */

package js.org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//Scanner para generar C3D

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/js/org/compi2/codigo3d/parser/lexico.flex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPRESION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\3\1\63\1\15\1\15\22\0\1\15\1\34\1\16"+
    "\1\1\1\0\1\24\1\33\1\7\1\22\1\25\1\21\1\17\1\30"+
    "\1\20\1\5\1\2\2\11\1\12\1\10\2\14\4\4\1\13\1\31"+
    "\1\36\1\37\1\35\2\0\1\45\1\6\1\60\1\51\1\43\1\44"+
    "\2\6\1\53\1\62\1\6\1\46\1\54\1\57\1\56\1\61\1\6"+
    "\1\41\1\50\1\40\1\42\1\55\4\6\3\0\1\23\1\6\1\0"+
    "\1\45\1\6\1\60\1\51\1\43\1\44\2\6\1\53\1\62\1\6"+
    "\1\46\1\54\1\57\1\56\1\61\1\6\1\41\1\50\1\40\1\42"+
    "\1\55\4\6\1\26\1\32\1\27\7\0\1\63\252\0\2\52\115\0"+
    "\1\47\u1ea8\0\1\63\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\2\1\1\24\1\25"+
    "\1\26\1\1\3\6\1\1\2\6\1\1\4\6\1\27"+
    "\1\30\6\0\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\4\6\1\0\1\41\1\6\1\41\1\6"+
    "\1\0\1\6\1\0\2\6\1\0\3\6\1\0\1\3"+
    "\1\42\1\43\2\0\4\6\2\0\4\6\1\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\2\6\1\3\4\0"+
    "\1\44\2\6\1\0\1\6\1\0\1\45\1\6\1\45"+
    "\2\6\2\46\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\2\47\1\50\1\0\1\6\1\0\1\6\2\51\1\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\2\52\1\0\1\6"+
    "\1\53\1\54\1\0\1\6\2\55\1\0\1\6\1\0"+
    "\1\56\1\0\1\6\2\57\2\60\2\0\1\6\1\0"+
    "\1\61\1\0\2\62\6\0\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\150\0\150\0\320\0\150"+
    "\0\u0104\0\u0138\0\150\0\150\0\u016c\0\u01a0\0\150\0\150"+
    "\0\150\0\150\0\150\0\150\0\150\0\150\0\150\0\u01d4"+
    "\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374"+
    "\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514"+
    "\0\150\0\150\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c"+
    "\0\150\0\150\0\150\0\150\0\150\0\150\0\150\0\150"+
    "\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec"+
    "\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c"+
    "\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u05b0\0\150\0\u0a90\0\u0ac4"+
    "\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64"+
    "\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04"+
    "\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u057c\0\u0a5c\0\u0f08\0\u0f3c"+
    "\0\u0f70\0\u0104\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\150"+
    "\0\u10a8\0\u0104\0\u10dc\0\u1110\0\150\0\u0104\0\u1144\0\u1178"+
    "\0\u11ac\0\u11e0\0\u1214\0\u1248\0\150\0\u0104\0\u0104\0\u127c"+
    "\0\u12b0\0\u12e4\0\u1318\0\150\0\u0104\0\u134c\0\u1380\0\u13b4"+
    "\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554"+
    "\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4"+
    "\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\150"+
    "\0\u0104\0\u1894\0\u18c8\0\u0104\0\u0104\0\u18fc\0\u1930\0\150"+
    "\0\u0104\0\u1964\0\u1998\0\u19cc\0\u0104\0\u1a00\0\u1a34\0\150"+
    "\0\u0104\0\150\0\u0104\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\150"+
    "\0\u1b38\0\150\0\u0104\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c"+
    "\0\u1c70\0\150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\3\7\1\13\1\7\1\6\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\2\11\1\40\2\11\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\3\11\1\47\1\50\1\11\1\0\16\51\1\52"+
    "\45\51\64\0\2\53\1\54\1\6\60\53\4\0\1\7"+
    "\1\55\1\11\1\0\3\7\1\0\1\7\23\0\7\11"+
    "\1\0\2\11\1\0\10\11\5\0\1\11\1\0\1\11"+
    "\1\0\3\11\1\0\1\11\23\0\7\11\1\0\2\11"+
    "\1\0\10\11\1\0\3\56\1\0\1\57\3\56\3\60"+
    "\1\56\1\57\47\56\17\0\1\61\64\0\1\62\75\0"+
    "\1\63\64\0\1\64\67\0\1\65\63\0\1\66\63\0"+
    "\1\67\63\0\1\70\30\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\11\23\0\1\11\1\71\5\11\1\0"+
    "\2\11\1\0\10\11\5\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\11\23\0\3\11\1\72\3\11\1\0"+
    "\2\11\1\0\10\11\5\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\11\23\0\2\11\1\73\2\11\1\74"+
    "\1\11\1\0\2\11\1\0\10\11\44\0\1\75\6\0"+
    "\2\76\14\0\1\11\1\0\1\11\1\0\3\11\1\0"+
    "\1\11\23\0\3\11\1\77\3\11\1\0\2\11\1\76"+
    "\1\100\7\11\5\0\1\11\1\0\1\11\1\0\3\11"+
    "\1\0\1\11\23\0\3\11\1\101\3\11\1\0\2\11"+
    "\1\102\1\103\7\11\55\0\1\104\13\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\0\1\11\23\0\7\11\1\0"+
    "\2\11\1\0\1\11\1\105\6\11\5\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\0\1\11\23\0\3\11\1\106"+
    "\3\11\1\0\2\11\1\107\1\110\7\11\5\0\1\11"+
    "\1\0\1\11\1\0\3\11\1\0\1\11\23\0\5\11"+
    "\1\111\1\11\1\0\2\11\1\0\10\11\5\0\1\11"+
    "\1\0\1\11\1\0\3\11\1\0\1\11\23\0\5\11"+
    "\1\112\1\11\1\0\2\11\1\0\10\11\1\0\3\53"+
    "\1\6\60\53\2\54\1\113\1\114\60\54\4\0\1\115"+
    "\3\0\3\115\1\0\1\115\56\0\1\116\56\0\1\117"+
    "\4\0\1\116\56\0\1\117\1\0\1\120\2\0\1\116"+
    "\3\120\1\0\1\120\53\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\11\23\0\2\11\1\121\4\11\1\0"+
    "\2\11\1\0\10\11\5\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\11\23\0\1\122\6\11\1\0\2\11"+
    "\1\0\10\11\5\0\1\11\1\0\1\11\1\0\3\11"+
    "\1\0\1\11\23\0\7\11\1\0\2\11\1\0\4\11"+
    "\1\123\3\11\5\0\1\11\1\0\1\11\1\0\3\11"+
    "\1\0\1\11\23\0\6\11\1\124\1\0\2\11\1\0"+
    "\10\11\47\0\1\125\74\0\1\126\10\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\0\1\11\23\0\6\11\1\127"+
    "\1\0\2\11\1\0\10\11\5\0\1\11\1\0\1\11"+
    "\1\0\3\11\1\0\1\11\23\0\7\11\1\0\2\11"+
    "\1\0\4\11\1\130\3\11\5\0\1\11\1\0\1\11"+
    "\1\0\3\11\1\0\1\11\23\0\1\131\3\11\1\132"+
    "\2\11\1\0\2\11\1\0\10\11\55\0\1\133\13\0"+
    "\1\11\1\0\1\11\1\0\3\11\1\0\1\11\23\0"+
    "\7\11\1\0\2\11\1\0\1\11\1\134\6\11\62\0"+
    "\1\135\6\0\1\11\1\0\1\11\1\0\3\11\1\0"+
    "\1\11\23\0\7\11\1\0\2\11\1\0\6\11\1\136"+
    "\1\11\5\0\1\11\1\0\1\11\1\0\3\11\1\0"+
    "\1\11\23\0\7\11\1\0\2\11\1\0\4\11\1\137"+
    "\3\11\44\0\1\140\24\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\11\23\0\3\11\1\141\3\11\1\0"+
    "\2\11\1\0\10\11\5\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\11\23\0\7\11\1\142\1\143\1\11"+
    "\1\0\10\11\5\0\1\11\1\0\1\11\1\0\3\11"+
    "\1\0\1\11\23\0\1\11\1\144\5\11\1\0\2\11"+
    "\1\0\10\11\1\0\1\54\1\145\1\113\1\114\60\54"+
    "\2\146\1\147\61\146\4\0\1\150\3\0\1\150\1\151"+
    "\1\150\1\0\1\150\51\0\1\117\65\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\0\1\11\23\0\3\11\1\152"+
    "\3\11\1\0\2\11\1\0\10\11\5\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\0\1\11\23\0\7\11\1\0"+
    "\2\11\1\0\3\11\1\153\4\11\5\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\0\1\11\23\0\7\11\1\0"+
    "\2\11\1\0\5\11\1\154\2\11\5\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\0\1\11\23\0\7\11\1\155"+
    "\1\156\1\11\1\0\10\11\44\0\1\157\76\0\1\160"+
    "\11\0\1\11\1\0\1\11\1\0\3\11\1\0\1\11"+
    "\23\0\3\11\1\161\3\11\1\0\2\11\1\0\10\11"+
    "\5\0\1\11\1\0\1\11\1\0\3\11\1\0\1\11"+
    "\23\0\7\11\1\0\2\11\1\0\3\11\1\162\4\11"+
    "\5\0\1\11\1\0\1\11\1\0\3\11\1\0\1\11"+
    "\23\0\3\11\1\163\3\11\1\0\2\11\1\0\10\11"+
    "\5\0\1\11\1\0\1\11\1\0\3\11\1\0\1\11"+
    "\23\0\3\11\1\164\3\11\1\0\2\11\1\0\10\11"+
    "\56\0\1\165\12\0\1\11\1\0\1\11\1\0\3\11"+
    "\1\0\1\11\23\0\7\11\1\0\2\11\1\0\2\11"+
    "\1\166\5\11\42\0\1\167\26\0\1\11\1\0\1\11"+
    "\1\0\3\11\1\0\1\11\23\0\1\11\1\170\5\11"+
    "\1\0\2\11\1\0\10\11\5\0\1\11\1\0\1\11"+
    "\1\0\3\11\1\0\1\11\23\0\7\11\1\171\1\172"+
    "\1\11\1\0\10\11\60\0\1\173\10\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\0\1\11\23\0\7\11\1\0"+
    "\2\11\1\0\4\11\1\174\3\11\57\0\1\175\11\0"+
    "\1\11\1\0\1\11\1\0\3\11\1\0\1\11\23\0"+
    "\7\11\1\0\2\11\1\0\3\11\1\176\4\11\5\0"+
    "\1\11\1\0\1\11\1\0\3\11\1\0\1\11\23\0"+
    "\5\11\1\177\1\11\1\0\2\11\1\0\10\11\1\0"+
    "\1\146\1\114\1\147\61\146\2\0\1\200\63\0\1\200"+
    "\1\0\1\150\3\0\3\150\1\0\1\150\53\0\1\11"+
    "\1\0\1\11\1\0\3\11\1\0\1\11\23\0\1\11"+
    "\1\201\5\11\1\0\2\11\1\0\10\11\5\0\1\11"+
    "\1\0\1\11\1\0\3\11\1\0\1\11\23\0\7\11"+
    "\1\0\2\11\1\202\1\203\7\11\44\0\1\204\24\0"+
    "\1\11\1\0\1\11\1\0\3\11\1\0\1\11\23\0"+
    "\3\11\1\205\3\11\1\0\2\11\1\0\10\11\61\0"+
    "\1\206\7\0\1\11\1\0\1\11\1\0\3\11\1\0"+
    "\1\11\23\0\7\11\1\0\2\11\1\0\5\11\1\207"+
    "\2\11\5\0\1\11\1\0\1\11\1\0\3\11\1\0"+
    "\1\11\23\0\7\11\1\0\2\11\1\0\4\11\1\210"+
    "\3\11\5\0\1\11\1\0\1\11\1\0\3\11\1\0"+
    "\1\11\23\0\7\11\1\0\2\11\1\0\5\11\1\211"+
    "\2\11\53\0\2\212\14\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\11\23\0\7\11\1\0\2\11\1\212"+
    "\1\213\7\11\46\0\1\214\22\0\1\11\1\0\1\11"+
    "\1\0\3\11\1\0\1\11\23\0\5\11\1\215\1\11"+
    "\1\0\2\11\1\0\10\11\41\0\1\216\27\0\1\11"+
    "\1\0\1\11\1\0\3\11\1\0\1\11\23\0\1\217"+
    "\6\11\1\0\2\11\1\0\10\11\12\0\2\220\55\0"+
    "\1\11\1\0\1\11\1\0\3\11\1\0\1\11\23\0"+
    "\7\11\1\0\2\11\1\0\4\11\1\221\3\11\57\0"+
    "\1\222\11\0\1\11\1\0\1\11\1\0\3\11\1\0"+
    "\1\11\23\0\7\11\1\0\2\11\1\0\3\11\1\223"+
    "\4\11\61\0\1\224\7\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\11\23\0\7\11\1\0\2\11\1\0"+
    "\5\11\1\225\2\11\5\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\11\23\0\3\11\1\226\3\11\1\0"+
    "\2\11\1\0\10\11\5\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\11\23\0\1\227\6\11\1\0\2\11"+
    "\1\0\10\11\55\0\1\230\13\0\1\11\1\0\1\11"+
    "\1\0\3\11\1\0\1\11\23\0\7\11\1\0\2\11"+
    "\1\0\1\11\1\231\6\11\63\0\1\232\5\0\1\11"+
    "\1\0\1\11\1\0\3\11\1\0\1\11\23\0\7\11"+
    "\1\0\2\11\1\0\7\11\1\233\42\0\1\234\26\0"+
    "\1\11\1\0\1\11\1\0\3\11\1\0\1\11\23\0"+
    "\1\11\1\235\5\11\1\0\2\11\1\0\10\11\5\0"+
    "\1\236\3\0\3\236\1\0\1\236\53\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\0\1\11\23\0\5\11\1\237"+
    "\1\11\1\0\2\11\1\0\10\11\60\0\1\240\10\0"+
    "\1\11\1\0\1\11\1\0\3\11\1\0\1\11\23\0"+
    "\7\11\1\0\2\11\1\0\4\11\1\241\3\11\53\0"+
    "\2\242\14\0\1\11\1\0\1\11\1\0\3\11\1\0"+
    "\1\11\23\0\7\11\1\0\2\11\1\242\1\243\7\11"+
    "\5\0\1\11\1\0\1\11\1\0\3\11\1\0\1\11"+
    "\23\0\1\11\1\244\5\11\1\0\2\11\1\0\10\11"+
    "\5\0\1\11\1\0\1\11\1\0\3\11\1\0\1\11"+
    "\23\0\7\11\1\0\2\11\1\0\3\11\1\245\4\11"+
    "\53\0\2\246\14\0\1\11\1\0\1\11\1\0\3\11"+
    "\1\0\1\11\23\0\7\11\1\0\2\11\1\246\1\247"+
    "\7\11\44\0\1\250\24\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\11\23\0\3\11\1\251\3\11\1\0"+
    "\2\11\1\0\10\11\46\0\1\252\22\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\0\1\11\23\0\5\11\1\253"+
    "\1\11\1\0\2\11\1\0\10\11\5\0\1\254\3\0"+
    "\3\254\1\0\1\254\53\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\11\23\0\1\11\1\255\5\11\1\0"+
    "\2\11\1\0\10\11\57\0\1\256\11\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\0\1\11\23\0\7\11\1\0"+
    "\2\11\1\0\3\11\1\257\4\11\42\0\1\260\26\0"+
    "\1\11\1\0\1\11\1\0\3\11\1\0\1\11\23\0"+
    "\1\11\1\261\5\11\1\0\2\11\1\0\10\11\50\0"+
    "\2\262\17\0\1\11\1\0\1\11\1\0\3\11\1\0"+
    "\1\11\23\0\7\11\1\262\1\263\1\11\1\0\10\11"+
    "\5\0\1\264\3\0\3\264\1\0\1\264\126\0\1\265"+
    "\10\0\1\11\1\0\1\11\1\0\3\11\1\0\1\11"+
    "\23\0\7\11\1\0\2\11\1\0\4\11\1\266\3\11"+
    "\5\0\1\267\2\0\1\270\1\267\2\271\1\0\1\267"+
    "\114\0\1\272\22\0\1\11\1\0\1\11\1\0\3\11"+
    "\1\0\1\11\23\0\5\11\1\273\1\11\1\0\2\11"+
    "\1\0\10\11\14\0\1\274\54\0\1\267\3\0\3\267"+
    "\1\274\1\267\57\0\3\275\1\0\1\275\53\0\1\276"+
    "\3\0\3\276\1\0\1\276\62\0\1\277\60\0\3\300"+
    "\1\0\1\300\53\0\1\301\3\0\3\301\1\0\1\301"+
    "\56\0\1\302\54\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7332];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\2\11\1\1\1\11\2\1\2\11"+
    "\2\1\11\11\21\1\2\11\6\0\10\11\4\1\1\0"+
    "\4\1\1\0\1\1\1\0\2\1\1\0\3\1\1\0"+
    "\2\1\1\11\2\0\4\1\2\0\4\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\3\1\4\0\3\1"+
    "\1\0\1\1\1\0\1\11\4\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\3\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1\2\0\1\1\1\0"+
    "\1\11\1\0\1\11\1\1\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de usuario
    

//VARIALES Y METODOS DEL SCANER
String expresion="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error lexico: "+yytext());
            }
          case 52: break;
          case 2: 
            { return new Symbol(sym.DIV         ,yychar,yyline,yytext());
            }
          case 53: break;
          case 3: 
            { 
            }
          case 54: break;
          case 4: 
            { return new Symbol(sym.NUMERO       ,yychar,yyline,new String(yytext()));
            }
          case 55: break;
          case 5: 
            { return new Symbol(sym.PUNTO       ,yychar,yyline,yytext());
            }
          case 56: break;
          case 6: 
            { return new Symbol(sym.ID           ,yychar,yyline, new String(yytext()));
            }
          case 57: break;
          case 7: 
            { return new Symbol(sym.DOSPUNTOS        ,yychar,yyline,yytext());
            }
          case 58: break;
          case 8: 
            { yybegin (EXPRESION);
            }
          case 59: break;
          case 9: 
            { return new Symbol(sym.MAS         ,yychar,yyline,yytext());
            }
          case 60: break;
          case 10: 
            { return new Symbol(sym.MENOS       ,yychar,yyline,yytext());
            }
          case 61: break;
          case 11: 
            { return new Symbol(sym.POR         ,yychar,yyline,yytext());
            }
          case 62: break;
          case 12: 
            { return new Symbol(sym.PAREA       ,yychar,yyline,yytext());
            }
          case 63: break;
          case 13: 
            { return new Symbol(sym.ELEVA       ,yychar,yyline,yytext());
            }
          case 64: break;
          case 14: 
            { return new Symbol(sym.MOD       ,yychar,yyline,yytext());
            }
          case 65: break;
          case 15: 
            { return new Symbol(sym.PAREC        ,yychar,yyline,yytext());
            }
          case 66: break;
          case 16: 
            { return new Symbol(sym.LLV1        ,yychar,yyline,yytext());
            }
          case 67: break;
          case 17: 
            { return new Symbol(sym.LLV2        ,yychar,yyline,yytext());
            }
          case 68: break;
          case 18: 
            { return new Symbol(sym.COMA        ,yychar,yyline,yytext());
            }
          case 69: break;
          case 19: 
            { return new Symbol(sym.PUNTOCOMA   ,yychar,yyline,yytext());
            }
          case 70: break;
          case 20: 
            { return new Symbol(sym.NEL         ,yychar ,yyline, yytext());
            }
          case 71: break;
          case 21: 
            { return new Symbol(sym.MAYORQUE    ,yychar,yyline,yytext());
            }
          case 72: break;
          case 22: 
            { return new Symbol(sym.MENORQUE    ,yychar,yyline,yytext());
            }
          case 73: break;
          case 23: 
            { expresion +=yytext();
            }
          case 74: break;
          case 24: 
            { String temporal=expresion; 
        expresion=""; 
        yybegin(YYINITIAL); 
        return new Symbol(sym.CADENA, yyline+1, yyline, temporal);
            }
          case 75: break;
          case 25: 
            { return new Symbol(sym.MASMAS      ,yychar,yyline,yytext());
            }
          case 76: break;
          case 26: 
            { return new Symbol(sym.MENOSMENOS  ,yychar,yyline,yytext());
            }
          case 77: break;
          case 27: 
            { return new Symbol(sym.OR          ,yychar ,yyline,yytext());
            }
          case 78: break;
          case 28: 
            { return new Symbol(sym.Y           ,yychar ,yyline,yytext());
            }
          case 79: break;
          case 29: 
            { return new Symbol(sym.NOIGUAL     ,yychar,yyline, yytext());
            }
          case 80: break;
          case 30: 
            { return new Symbol(sym.MAYORIGUAL  ,yychar,yyline,yytext());
            }
          case 81: break;
          case 31: 
            { return new Symbol(sym.MENORIGUAL  ,yychar,yyline, yytext());
            }
          case 82: break;
          case 32: 
            { return new Symbol(sym.IGUALIGUAL  ,yychar,yyline, yytext());
            }
          case 83: break;
          case 33: 
            { return new Symbol(sym.SI          ,yychar,yyline, yytext());
            }
          case 84: break;
          case 34: 
            { return new Symbol(sym.NDECIMAL     ,yychar, yyline, new String(yytext()));
            }
          case 85: break;
          case 35: 
            { return new Symbol(sym.CARACTER     ,yychar,yyline,new String(yytext()));
            }
          case 86: break;
          case 36: 
            { return new Symbol(sym.VERDADERO   ,yychar,yyline, yytext());
            }
          case 87: break;
          case 37: 
            { return new Symbol(sym.SINO        ,yychar,yyline, yytext());
            }
          case 88: break;
          case 38: 
            { return new Symbol(sym.DIMV        ,yychar,yyline, yytext());
            }
          case 89: break;
          case 39: 
            { return new Symbol(sym.CASO        ,yychar,yyline, yytext());
            }
          case 90: break;
          case 40: 
            { return new Symbol(sym.PARA        ,yychar,yyline, yytext());
            }
          case 91: break;
          case 41: 
            { return new Symbol(sym.FALSO       ,yychar,yyline, yytext());
            }
          case 92: break;
          case 42: 
            { return new Symbol(sym.FUNCION     ,yychar,yyline, yytext());
            }
          case 93: break;
          case 43: 
            { return new Symbol(sym.TERMINAR    ,yychar,yyline, yytext());
            }
          case 94: break;
          case 44: 
            { return new Symbol(sym.DEFECTO     ,yychar,yyline, yytext());
            }
          case 95: break;
          case 45: 
            { return new Symbol(sym.MENSAJEV    ,yychar,yyline, yytext());
            }
          case 96: break;
          case 46: 
            { return new Symbol(sym.RETORNAR    ,yychar,yyline, yytext());
            }
          case 97: break;
          case 47: 
            { return new Symbol(sym.IMPRIMIR    ,yychar,yyline, yytext());
            }
          case 98: break;
          case 48: 
            { return new Symbol(sym.MIENTRAS    ,yychar,yyline, yytext());
            }
          case 99: break;
          case 49: 
            { return new Symbol(sym.DATE         ,yychar,yyline,new String(yytext()));
            }
          case 100: break;
          case 50: 
            { return new Symbol(sym.SELECCIONA ,yychar,yyline, yytext());
            }
          case 101: break;
          case 51: 
            { return new Symbol(sym.DATETIME     ,yychar,yyline,new String(yytext()));
            }
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
