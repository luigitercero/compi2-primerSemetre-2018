
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 06 22:00:30 CST 2018
//----------------------------------------------------

package js.org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;
import com.TreeParser.*;
import java.util.ArrayList;
import Simbol.Metodo.Metodo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 06 22:00:30 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\005\003\000\002\124" +
    "\004\000\002\124\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\004\000\002\040\004\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\004\000\002" +
    "\040\004\000\002\136\010\000\002\137\012\000\002\137" +
    "\012\000\002\140\012\000\002\140\012\000\002\140\012" +
    "\000\002\021\007\000\002\021\003\000\002\116\005\000" +
    "\002\116\003\000\002\063\011\000\002\063\010\000\002" +
    "\017\010\000\002\020\013\000\002\056\010\000\002\071" +
    "\006\000\002\071\003\000\002\072\004\000\002\072\003" +
    "\000\002\115\004\000\002\115\003\000\002\070\006\000" +
    "\002\070\005\000\002\061\013\000\002\057\010\000\002" +
    "\013\004\000\002\013\003\000\002\013\004\000\002\012" +
    "\004\000\002\012\003\000\002\135\003\000\002\135\003" +
    "\000\002\135\003\000\002\135\004\000\002\135\004\000" +
    "\002\135\005\000\002\135\004\000\002\135\004\000\002" +
    "\135\004\000\002\135\004\000\002\135\004\000\002\030" +
    "\006\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\127\004\000\002\130\004\000\002\130\007\000\002" +
    "\130\005\000\002\130\005\000\002\131\004\000\002\131" +
    "\003\000\002\134\004\000\002\134\004\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\004\000\002\032\004\000\002\032\004\000" +
    "\002\032\004\000\002\032\005\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\132\004\000\002\133\005\000\002\133\005\000\002\034" +
    "\004\000\002\015\004\000\002\015\005\000\002\141\007" +
    "\000\002\141\005\000\002\142\003\000\002\142\003\000" +
    "\002\125\006\000\002\125\005\000\002\023\005\000\002" +
    "\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\026\003\025\036\035\040\024\042\006\045" +
    "\015\046\034\050\011\051\037\060\016\064\021\001\002" +
    "\000\030\002\ufffd\003\ufffd\036\ufffd\040\ufffd\042\ufffd\045" +
    "\ufffd\046\ufffd\050\ufffd\051\ufffd\060\ufffd\064\ufffd\001\002" +
    "\000\042\002\uffc7\003\uffc7\016\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\060\uffc7\064\uffc7\001\002\000\004\012" +
    "\346\001\002\000\004\021\345\001\002\000\042\002\uffc8" +
    "\003\uffc8\016\uffc8\036\uffc8\037\uffc8\040\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\060\uffc8\064\uffc8\001\002\000\004\012\342\001\002\000" +
    "\042\002\uffc5\003\uffc5\016\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\060\uffc5\064\uffc5\001\002\000\004\021\341" +
    "\001\002\000\030\002\ufff8\003\ufff8\036\ufff8\040\ufff8\042" +
    "\ufff8\045\ufff8\046\ufff8\050\ufff8\051\ufff8\060\ufff8\064\ufff8" +
    "\001\002\000\034\007\073\012\110\024\072\034\100\035" +
    "\106\053\077\054\076\055\112\056\111\057\105\060\104" +
    "\061\075\064\107\001\002\000\020\004\227\005\226\012" +
    "\167\015\231\021\232\025\320\063\230\001\002\000\030" +
    "\002\ufff9\003\ufff9\036\ufff9\040\ufff9\042\ufff9\045\ufff9\046" +
    "\ufff9\050\ufff9\051\ufff9\060\ufff9\064\ufff9\001\002\000\030" +
    "\002\ufffc\003\ufffc\036\ufffc\040\ufffc\042\ufffc\045\ufffc\046" +
    "\ufffc\050\ufffc\051\ufffc\060\ufffc\064\ufffc\001\002\000\004" +
    "\025\311\001\002\000\004\002\310\001\002\000\030\002" +
    "\000\003\025\036\035\040\024\042\006\045\015\046\034" +
    "\050\011\051\037\060\016\064\021\001\002\000\004\012" +
    "\277\001\002\000\030\002\ufff7\003\ufff7\036\ufff7\040\ufff7" +
    "\042\ufff7\045\ufff7\046\ufff7\050\ufff7\051\ufff7\060\ufff7\064" +
    "\ufff7\001\002\000\004\021\276\001\002\000\042\002\uffc9" +
    "\003\uffc9\016\uffc9\036\uffc9\037\uffc9\040\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\060\uffc9\064\uffc9\001\002\000\042\002\uffca\003\uffca\016" +
    "\uffca\036\uffca\037\uffca\040\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\060\uffca\064" +
    "\uffca\001\002\000\004\025\256\001\002\000\042\002\uffc6" +
    "\003\uffc6\016\uffc6\036\uffc6\037\uffc6\040\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\060\uffc6\064\uffc6\001\002\000\030\002\ufffe\003\ufffe\036" +
    "\ufffe\040\ufffe\042\ufffe\045\ufffe\046\ufffe\050\ufffe\051\ufffe" +
    "\060\ufffe\064\ufffe\001\002\000\004\012\251\001\002\000" +
    "\004\060\222\001\002\000\004\021\221\001\002\000\004" +
    "\060\040\001\002\000\004\012\041\001\002\000\006\014" +
    "\043\060\042\001\002\000\006\014\uffeb\017\uffeb\001\002" +
    "\000\004\015\217\001\002\000\006\014\046\017\045\001" +
    "\002\000\004\060\216\001\002\000\004\015\047\001\002" +
    "\000\032\003\062\016\060\036\035\037\061\040\024\042" +
    "\006\045\015\046\034\047\053\050\011\060\016\064\021" +
    "\001\002\000\032\003\214\016\213\036\035\037\061\040" +
    "\024\042\006\045\015\046\034\047\053\050\011\060\016" +
    "\064\021\001\002\000\004\021\212\001\002\000\004\021" +
    "\211\001\002\000\004\021\210\001\002\000\036\003\uffd4" +
    "\016\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\060\uffd4\064\uffd4" +
    "\001\002\000\036\003\uffd6\016\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\060\uffd6\064\uffd6\001\002\000\036\003\uffd5\016" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\050\uffd5\060\uffd5\064\uffd5\001" +
    "\002\000\030\002\uffea\003\uffea\036\uffea\040\uffea\042\uffea" +
    "\045\uffea\046\uffea\050\uffea\051\uffea\060\uffea\064\uffea\001" +
    "\002\000\046\002\uffda\003\uffda\014\uffda\016\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\060\uffda\064\uffda" +
    "\001\002\000\036\007\073\012\110\021\114\024\072\034" +
    "\100\035\106\053\077\054\076\055\112\056\111\057\105" +
    "\060\104\061\075\064\107\001\002\000\006\016\070\021" +
    "\071\001\002\000\004\021\067\001\002\000\036\003\uffd7" +
    "\016\uffd7\036\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\060\uffd7\064\uffd7" +
    "\001\002\000\004\021\066\001\002\000\036\003\uffce\016" +
    "\uffce\036\uffce\037\uffce\040\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\060\uffce\064\uffce\001" +
    "\002\000\036\003\uffcc\016\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\060\uffcc\064\uffcc\001\002\000\046\002\uffd9\003\uffd9" +
    "\014\uffd9\016\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\060\uffd9\064\uffd9\001\002\000\036\003\uffcf\016" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\060\uffcf\064\uffcf\001" +
    "\002\000\034\007\073\012\110\024\072\034\100\035\106" +
    "\053\077\054\076\055\112\056\111\057\105\060\104\061" +
    "\075\064\107\001\002\000\034\007\073\012\110\024\072" +
    "\034\100\035\106\053\077\054\076\055\112\056\111\057" +
    "\105\060\104\061\075\064\107\001\002\000\004\016\205" +
    "\001\002\000\054\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010" +
    "\uff9d\011\uff9d\013\uff9d\014\uff9d\016\uff9d\017\uff9d\021\uff9d" +
    "\022\uff9d\023\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\062\uff9d\063\uff9d\001\002\000\054\004\uff9f" +
    "\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\013\uff9f\014" +
    "\uff9f\016\uff9f\017\uff9f\021\uff9f\022\uff9f\023\uff9f\026\uff9f" +
    "\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\062\uff9f\063" +
    "\uff9f\001\002\000\054\004\uffa0\005\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\011\uffa0\013\uffa0\014\uffa0\016\uffa0\017\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0" +
    "\032\uffa0\033\uffa0\062\uffa0\063\uffa0\001\002\000\054\004" +
    "\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\013\uff9c" +
    "\014\uff9c\016\uff9c\017\uff9c\021\uff9c\022\uff9c\023\uff9c\026" +
    "\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\062\uff9c" +
    "\063\uff9c\001\002\000\004\025\201\001\002\000\044\004" +
    "\140\005\137\006\134\007\124\010\127\011\135\013\131" +
    "\021\200\022\141\023\123\026\132\027\130\030\133\031" +
    "\122\032\136\033\125\062\126\001\002\000\054\004\uffa8" +
    "\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\013\uffa8\014" +
    "\uffa8\016\uffa8\017\uffa8\021\uffa8\022\uffa8\023\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\062\uffa8\063" +
    "\uffa8\001\002\000\062\004\uffa3\005\uffa3\006\uffa3\007\uffa3" +
    "\010\uffa3\011\uffa3\012\167\013\uffa3\014\uffa3\015\170\016" +
    "\uffa3\017\uffa3\021\uffa3\022\uffa3\023\uffa3\025\uff92\026\uffa3" +
    "\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\062\uffa3\063" +
    "\uffa3\001\002\000\054\004\uff9e\005\uff9e\006\uff9e\007\uff9e" +
    "\010\uff9e\011\uff9e\013\uff9e\014\uff9e\016\uff9e\017\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e" +
    "\032\uff9e\033\uff9e\062\uff9e\063\uff9e\001\002\000\054\004" +
    "\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\013\uff9b" +
    "\014\uff9b\016\uff9b\017\uff9b\021\uff9b\022\uff9b\023\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\062\uff9b" +
    "\063\uff9b\001\002\000\004\025\162\001\002\000\034\007" +
    "\073\012\110\024\072\034\100\035\106\053\077\054\076" +
    "\055\112\056\111\057\105\060\104\061\075\064\107\001" +
    "\002\000\054\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\013\uffa1\014\uffa1\016\uffa1\017\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\033\uffa1\062\uffa1\063\uffa1\001\002\000\054\004\uffa2\005" +
    "\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\013\uffa2\014\uffa2" +
    "\016\uffa2\017\uffa2\021\uffa2\022\uffa2\023\uffa2\026\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\062\uffa2\063\uffa2" +
    "\001\002\000\054\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\013\uffa5\014\uffa5\016\uffa5\017\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032" +
    "\uffa5\033\uffa5\062\uffa5\063\uffa5\001\002\000\036\003\uffd0" +
    "\016\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\060\uffd0\064\uffd0" +
    "\001\002\000\054\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010" +
    "\uffa6\011\uffa6\013\uffa6\014\uffa6\016\uffa6\017\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\062\uffa6\063\uffa6\001\002\000\054\004\uffa4" +
    "\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\013\uffa4\014" +
    "\uffa4\016\uffa4\017\uffa4\021\uffa4\022\uffa4\023\uffa4\026\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\062\uffa4\063" +
    "\uffa4\001\002\000\060\004\uffa7\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\013\uffa7\014\uffa7\015\120\016\uffa7\017" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\025\uff91\026\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\062\uffa7\063\uffa7\001" +
    "\002\000\034\007\073\012\110\024\072\034\100\035\106" +
    "\053\077\054\076\055\112\056\111\057\105\060\104\061" +
    "\075\064\107\001\002\000\044\004\140\005\137\006\134" +
    "\007\124\010\127\011\135\013\131\016\uff98\022\141\023" +
    "\123\026\132\027\130\030\133\031\122\032\136\033\125" +
    "\062\126\001\002\000\034\007\073\012\110\024\072\034" +
    "\100\035\106\053\077\054\076\055\112\056\111\057\105" +
    "\060\104\061\075\064\107\001\002\000\034\007\073\012" +
    "\110\024\072\034\100\035\106\053\077\054\076\055\112" +
    "\056\111\057\105\060\104\061\075\064\107\001\002\000" +
    "\034\007\073\012\110\024\072\034\100\035\106\053\077" +
    "\054\076\055\112\056\111\057\105\060\104\061\075\064" +
    "\107\001\002\000\034\007\073\012\110\024\072\034\100" +
    "\035\106\053\077\054\076\055\112\056\111\057\105\060" +
    "\104\061\075\064\107\001\002\000\034\007\073\012\110" +
    "\024\072\034\100\035\106\053\077\054\076\055\112\056" +
    "\111\057\105\060\104\061\075\064\107\001\002\000\034" +
    "\007\073\012\110\024\072\034\100\035\106\053\077\054" +
    "\076\055\112\056\111\057\105\060\104\061\075\064\107" +
    "\001\002\000\034\007\073\012\110\024\072\034\100\035" +
    "\106\053\077\054\076\055\112\056\111\057\105\060\104" +
    "\061\075\064\107\001\002\000\034\007\073\012\110\024" +
    "\072\034\100\035\106\053\077\054\076\055\112\056\111" +
    "\057\105\060\104\061\075\064\107\001\002\000\034\007" +
    "\073\012\110\024\072\034\100\035\106\053\077\054\076" +
    "\055\112\056\111\057\105\060\104\061\075\064\107\001" +
    "\002\000\034\007\073\012\110\024\072\034\100\035\106" +
    "\053\077\054\076\055\112\056\111\057\105\060\104\061" +
    "\075\064\107\001\002\000\034\007\073\012\110\024\072" +
    "\034\100\035\106\053\077\054\076\055\112\056\111\057" +
    "\105\060\104\061\075\064\107\001\002\000\034\007\073" +
    "\012\110\024\072\034\100\035\106\053\077\054\076\055" +
    "\112\056\111\057\105\060\104\061\075\064\107\001\002" +
    "\000\034\007\073\012\110\024\072\034\100\035\106\053" +
    "\077\054\076\055\112\056\111\057\105\060\104\061\075" +
    "\064\107\001\002\000\054\004\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\013\uffaa\014\uffaa\016\uffaa\017\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\026\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\062\uffaa\063\uffaa\001\002\000\054" +
    "\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\013" +
    "\uffab\014\uffab\016\uffab\017\uffab\021\uffab\022\uffab\023\uffab" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\062" +
    "\uffab\063\uffab\001\002\000\034\007\073\012\110\024\072" +
    "\034\100\035\106\053\077\054\076\055\112\056\111\057" +
    "\105\060\104\061\075\064\107\001\002\000\054\004\140" +
    "\005\137\006\134\007\124\010\127\011\135\013\131\014" +
    "\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf\023\123\026\132" +
    "\027\130\030\133\031\122\032\136\033\125\062\126\063" +
    "\uffaf\001\002\000\054\004\140\005\137\006\134\007\124" +
    "\010\127\011\135\013\131\014\uffb1\016\uffb1\017\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\062\126\063\uffb1\001\002\000\054\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\013\131" +
    "\014\uffb8\016\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\062\uffb8" +
    "\063\uffb8\001\002\000\054\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\127\011\135\013\131\014\uffbb\016\uffbb\017\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\062\126\063\uffbb\001\002\000\054" +
    "\004\140\005\137\006\134\007\124\010\127\011\135\013" +
    "\131\014\uffb3\016\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\062" +
    "\126\063\uffb3\001\002\000\054\004\140\005\137\006\134" +
    "\007\124\010\127\011\135\013\131\014\uffb5\016\uffb5\017" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\062\126\063\uffb5\001\002\000" +
    "\054\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6" +
    "\013\uffb6\014\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\062\uffb6\063\uffb6\001\002\000\054\004\140\005\137\006" +
    "\134\007\124\010\127\011\135\013\131\014\uffb4\016\uffb4" +
    "\017\uffb4\021\uffb4\022\uffb4\023\uffb4\026\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\062\126\063\uffb4\001\002" +
    "\000\054\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\013\131\014\uffb9\016\uffb9\017\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\062\uffb9\063\uffb9\001\002\000\054\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\010\uffb7\011\uffb7\013\131\014\uffb7\016" +
    "\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\062\uffb7\063\uffb7\001" +
    "\002\000\054\004\140\005\137\006\134\007\124\010\127" +
    "\011\135\013\131\014\uffb0\016\uffb0\017\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\062\126\063\uffb0\001\002\000\054\004\uffba\005" +
    "\uffba\006\uffba\007\uffba\010\127\011\135\013\131\014\uffba" +
    "\016\uffba\017\uffba\021\uffba\022\uffba\023\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\033\uffba\062\126\063\uffba" +
    "\001\002\000\054\004\140\005\137\006\134\007\124\010" +
    "\127\011\135\013\131\014\uffae\016\uffae\017\uffae\021\uffae" +
    "\022\uffae\023\uffae\026\132\027\130\030\133\031\122\032" +
    "\136\033\125\062\126\063\uffae\001\002\000\054\004\140" +
    "\005\137\006\134\007\124\010\127\011\135\013\131\014" +
    "\uffb2\016\uffb2\017\uffb2\021\uffb2\022\uffb2\023\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\062\126\063" +
    "\uffb2\001\002\000\044\004\140\005\137\006\134\007\124" +
    "\010\127\011\135\013\131\014\161\022\141\023\123\026" +
    "\132\027\130\030\133\031\122\032\136\033\125\062\126" +
    "\001\002\000\054\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010" +
    "\uffa9\011\uffa9\013\uffa9\014\uffa9\016\uffa9\017\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\062\uffa9\063\uffa9\001\002\000\004\060\163" +
    "\001\002\000\004\012\164\001\002\000\004\061\165\001" +
    "\002\000\004\014\166\001\002\000\056\004\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4\016" +
    "\ufff4\017\ufff4\021\ufff4\022\ufff4\023\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\062\ufff4\063" +
    "\ufff4\001\002\000\036\007\073\012\110\014\173\024\072" +
    "\034\100\035\106\053\077\054\076\055\112\056\111\057" +
    "\105\060\104\061\075\064\107\001\002\000\034\007\073" +
    "\012\110\024\072\034\100\035\106\053\077\054\076\055" +
    "\112\056\111\057\105\060\104\061\075\064\107\001\002" +
    "\000\044\004\140\005\137\006\134\007\124\010\127\011" +
    "\135\013\131\016\uff99\022\141\023\123\026\132\027\130" +
    "\030\133\031\122\032\136\033\125\062\126\001\002\000" +
    "\046\004\140\005\137\006\134\007\124\010\127\011\135" +
    "\013\131\014\uff8d\017\uff8d\022\141\023\123\026\132\027" +
    "\130\030\133\031\122\032\136\033\125\062\126\001\002" +
    "\000\060\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011" +
    "\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\021\uff8f" +
    "\022\uff8f\023\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\032\uff8f\033\uff8f\062\uff8f\063\uff8f\001\002\000\006" +
    "\014\176\017\175\001\002\000\034\007\073\012\110\024" +
    "\072\034\100\035\106\053\077\054\076\055\112\056\111" +
    "\057\105\060\104\061\075\064\107\001\002\000\060\004" +
    "\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\013\uff90" +
    "\014\uff90\015\uff90\016\uff90\017\uff90\021\uff90\022\uff90\023" +
    "\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90" +
    "\033\uff90\062\uff90\063\uff90\001\002\000\046\004\140\005" +
    "\137\006\134\007\124\010\127\011\135\013\131\014\uff8e" +
    "\017\uff8e\022\141\023\123\026\132\027\130\030\133\031" +
    "\122\032\136\033\125\062\126\001\002\000\036\003\uffd1" +
    "\016\uffd1\036\uffd1\037\uffd1\040\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\060\uffd1\064\uffd1" +
    "\001\002\000\004\060\202\001\002\000\056\004\uff93\005" +
    "\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012\203\013\uff93" +
    "\014\uff93\016\uff93\017\uff93\021\uff93\022\uff93\023\uff93\026" +
    "\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\062\uff93" +
    "\063\uff93\001\002\000\004\014\204\001\002\000\054\004" +
    "\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\013\uff94" +
    "\014\uff94\016\uff94\017\uff94\021\uff94\022\uff94\023\uff94\026" +
    "\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\062\uff94" +
    "\063\uff94\001\002\000\054\004\uff9a\005\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\011\uff9a\013\uff9a\014\uff9a\016\uff9a\017\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\026\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\032\uff9a\033\uff9a\062\uff9a\063\uff9a\001\002\000\054" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\010\127\011\135\013" +
    "\131\014\uffac\016\uffac\017\uffac\021\uffac\022\uffac\023\uffac" +
    "\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\062" +
    "\126\063\uffac\001\002\000\054\004\140\005\137\006\134" +
    "\007\124\010\127\011\135\013\131\014\uffad\016\uffad\017" +
    "\uffad\021\uffad\022\uffad\023\uffad\026\uffad\027\uffad\030\uffad" +
    "\031\uffad\032\uffad\033\uffad\062\126\063\uffad\001\002\000" +
    "\036\003\uffd2\016\uffd2\036\uffd2\037\uffd2\040\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\060" +
    "\uffd2\064\uffd2\001\002\000\036\003\uffcd\016\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\060\uffcd\064\uffcd\001\002\000\036" +
    "\003\uffd3\016\uffd3\036\uffd3\037\uffd3\040\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\060\uffd3" +
    "\064\uffd3\001\002\000\046\002\uffdb\003\uffdb\014\uffdb\016" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\060" +
    "\uffdb\064\uffdb\001\002\000\004\021\071\001\002\000\036" +
    "\003\uffd8\016\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\060\uffd8" +
    "\064\uffd8\001\002\000\006\014\uffec\017\uffec\001\002\000" +
    "\032\003\062\016\060\036\035\037\061\040\024\042\006" +
    "\045\015\046\034\047\053\050\011\060\016\064\021\001" +
    "\002\000\030\002\uffe9\003\uffe9\036\uffe9\040\uffe9\042\uffe9" +
    "\045\uffe9\046\uffe9\050\uffe9\051\uffe9\060\uffe9\064\uffe9\001" +
    "\002\000\030\002\ufffb\003\ufffb\036\ufffb\040\ufffb\042\ufffb" +
    "\045\ufffb\046\ufffb\050\ufffb\051\ufffb\060\ufffb\064\ufffb\001" +
    "\002\000\014\004\227\005\226\015\231\021\232\063\230" +
    "\001\002\000\042\002\uffc4\003\uffc4\016\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\060\uffc4\064\uffc4\001\002\000" +
    "\042\002\uffc3\003\uffc3\016\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\060\uffc3\064\uffc3\001\002\000\004\021\250" +
    "\001\002\000\004\021\247\001\002\000\004\021\246\001" +
    "\002\000\036\007\073\012\110\015\241\024\072\034\100" +
    "\035\106\053\077\054\076\055\112\056\111\057\105\060" +
    "\104\061\075\064\107\001\002\000\034\007\073\012\110" +
    "\024\072\034\100\035\106\053\077\054\076\055\112\056" +
    "\111\057\105\060\104\061\075\064\107\001\002\000\042" +
    "\002\uffbe\003\uffbe\016\uffbe\036\uffbe\037\uffbe\040\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\060\uffbe\064\uffbe\001\002\000\044\004\140\005" +
    "\137\006\134\007\124\010\127\011\135\013\131\016\234" +
    "\022\141\023\123\026\132\027\130\030\133\031\122\032" +
    "\136\033\125\062\126\001\002\000\006\021\232\063\230" +
    "\001\002\000\042\002\uffc2\003\uffc2\016\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\060\uffc2\064\uffc2\001\002\000" +
    "\004\021\uffbc\001\002\000\044\004\140\005\137\006\134" +
    "\007\124\010\127\011\135\013\131\021\uffbd\022\141\023" +
    "\123\026\132\027\130\030\133\031\122\032\136\033\125" +
    "\062\126\001\002\000\006\016\244\017\243\001\002\000" +
    "\034\007\073\012\110\024\072\034\100\035\106\053\077" +
    "\054\076\055\112\056\111\057\105\060\104\061\075\064" +
    "\107\001\002\000\046\004\140\005\137\006\134\007\124" +
    "\010\127\011\135\013\131\016\uff96\017\uff96\022\141\023" +
    "\123\026\132\027\130\030\133\031\122\032\136\033\125" +
    "\062\126\001\002\000\034\007\073\012\110\024\072\034" +
    "\100\035\106\053\077\054\076\055\112\056\111\057\105" +
    "\060\104\061\075\064\107\001\002\000\004\021\uff97\001" +
    "\002\000\046\004\140\005\137\006\134\007\124\010\127" +
    "\011\135\013\131\016\uff95\017\uff95\022\141\023\123\026" +
    "\132\027\130\030\133\031\122\032\136\033\125\062\126" +
    "\001\002\000\042\002\uffc1\003\uffc1\016\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\060\uffc1\064\uffc1\001\002\000" +
    "\042\002\uffc0\003\uffc0\016\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\060\uffc0\064\uffc0\001\002\000\042\002\uffbf" +
    "\003\uffbf\016\uffbf\036\uffbf\037\uffbf\040\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\060\uffbf\064\uffbf\001\002\000\034\007\073\012\110\024" +
    "\072\034\100\035\106\053\077\054\076\055\112\056\111" +
    "\057\105\060\104\061\075\064\107\001\002\000\044\004" +
    "\140\005\137\006\134\007\124\010\127\011\135\013\131" +
    "\014\253\022\141\023\123\026\132\027\130\030\133\031" +
    "\122\032\136\033\125\062\126\001\002\000\004\015\254" +
    "\001\002\000\032\003\062\016\060\036\035\037\061\040" +
    "\024\042\006\045\015\046\034\047\053\050\011\060\016" +
    "\064\021\001\002\000\042\002\uffdc\003\uffdc\016\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\050\uffdc\051\uffdc\060\uffdc\064\uffdc\001" +
    "\002\000\004\060\257\001\002\000\004\012\260\001\002" +
    "\000\004\061\261\001\002\000\004\017\262\001\002\000" +
    "\010\051\265\060\263\061\267\001\002\000\004\012\167" +
    "\001\002\000\004\014\uffed\001\002\000\004\012\272\001" +
    "\002\000\004\014\271\001\002\000\004\014\270\001\002" +
    "\000\004\021\ufff3\001\002\000\004\021\ufff0\001\002\000" +
    "\004\014\273\001\002\000\004\015\274\001\002\000\032" +
    "\003\062\016\060\036\035\037\061\040\024\042\006\045" +
    "\015\046\034\047\053\050\011\060\016\064\021\001\002" +
    "\000\004\014\uffee\001\002\000\030\002\ufff5\003\ufff5\036" +
    "\ufff5\040\ufff5\042\ufff5\045\ufff5\046\ufff5\050\ufff5\051\ufff5" +
    "\060\ufff5\064\ufff5\001\002\000\034\007\073\012\110\024" +
    "\072\034\100\035\106\053\077\054\076\055\112\056\111" +
    "\057\105\060\104\061\075\064\107\001\002\000\044\004" +
    "\140\005\137\006\134\007\124\010\127\011\135\013\131" +
    "\014\301\022\141\023\123\026\132\027\130\030\133\031" +
    "\122\032\136\033\125\062\126\001\002\000\004\015\302" +
    "\001\002\000\032\003\062\016\060\036\035\037\061\040" +
    "\024\042\006\045\015\046\034\047\053\050\011\060\016" +
    "\064\021\001\002\000\044\002\uffe8\003\uffe8\016\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\304\042\uffe8\043\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\060\uffe8\064" +
    "\uffe8\001\002\000\004\015\305\001\002\000\032\003\062" +
    "\016\060\036\035\037\061\040\024\042\006\045\015\046" +
    "\034\047\053\050\011\060\016\064\021\001\002\000\042" +
    "\002\uffe7\003\uffe7\016\uffe7\036\uffe7\037\uffe7\040\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\060\uffe7\064\uffe7\001\002\000\030\002\uffff\003" +
    "\uffff\036\uffff\040\uffff\042\uffff\045\uffff\046\uffff\050\uffff" +
    "\051\uffff\060\uffff\064\uffff\001\002\000\004\002\001\001" +
    "\002\000\004\060\312\001\002\000\004\012\313\001\002" +
    "\000\004\061\314\001\002\000\006\014\166\017\315\001" +
    "\002\000\006\051\265\060\263\001\002\000\004\014\317" +
    "\001\002\000\004\021\uffef\001\002\000\004\060\321\001" +
    "\002\000\004\012\322\001\002\000\004\061\323\001\002" +
    "\000\004\017\324\001\002\000\010\051\265\060\263\061" +
    "\326\001\002\000\004\014\330\001\002\000\004\014\327" +
    "\001\002\000\004\021\ufff2\001\002\000\004\021\ufff1\001" +
    "\002\000\044\004\140\005\137\006\134\007\124\010\127" +
    "\011\135\013\131\022\141\023\123\026\132\027\130\030" +
    "\133\031\122\032\136\033\125\062\126\063\332\001\002" +
    "\000\034\007\073\012\110\024\072\034\100\035\106\053" +
    "\077\054\076\055\112\056\111\057\105\060\104\061\075" +
    "\064\107\001\002\000\044\004\140\005\137\006\134\007" +
    "\124\010\127\011\135\013\131\022\141\023\123\026\132" +
    "\027\130\030\133\031\122\032\136\033\125\062\126\063" +
    "\334\001\002\000\034\007\073\012\110\024\072\034\100" +
    "\035\106\053\077\054\076\055\112\056\111\057\105\060" +
    "\104\061\075\064\107\001\002\000\044\004\140\005\137" +
    "\006\134\007\124\010\127\011\135\013\131\022\141\023" +
    "\123\026\132\027\130\030\133\031\122\032\136\033\125" +
    "\062\126\063\336\001\002\000\004\015\337\001\002\000" +
    "\032\003\062\016\060\036\035\037\061\040\024\042\006" +
    "\045\015\046\034\047\053\050\011\060\016\064\021\001" +
    "\002\000\042\002\uffdd\003\uffdd\016\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\060\uffdd\064\uffdd\001\002\000\030" +
    "\002\ufff6\003\ufff6\036\ufff6\040\ufff6\042\ufff6\045\ufff6\046" +
    "\ufff6\050\ufff6\051\ufff6\060\ufff6\064\ufff6\001\002\000\034" +
    "\007\073\012\110\024\072\034\100\035\106\053\077\054" +
    "\076\055\112\056\111\057\105\060\104\061\075\064\107" +
    "\001\002\000\044\004\140\005\137\006\134\007\124\010" +
    "\127\011\135\013\131\014\344\022\141\023\123\026\132" +
    "\027\130\030\133\031\122\032\136\033\125\062\126\001" +
    "\002\000\004\021\uffcb\001\002\000\030\002\ufffa\003\ufffa" +
    "\036\ufffa\040\ufffa\042\ufffa\045\ufffa\046\ufffa\050\ufffa\051" +
    "\ufffa\060\ufffa\064\ufffa\001\002\000\034\007\073\012\110" +
    "\024\072\034\100\035\106\053\077\054\076\055\112\056" +
    "\111\057\105\060\104\061\075\064\107\001\002\000\044" +
    "\004\140\005\137\006\134\007\124\010\127\011\135\013" +
    "\131\014\350\022\141\023\123\026\132\027\130\030\133" +
    "\031\122\032\136\033\125\062\126\001\002\000\004\015" +
    "\351\001\002\000\010\016\355\043\360\044\353\001\002" +
    "\000\010\016\355\043\360\044\353\001\002\000\004\063" +
    "\364\001\002\000\010\016\uffe0\043\uffe0\044\uffe0\001\002" +
    "\000\042\002\uffe4\003\uffe4\016\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\060\uffe4\064\uffe4\001\002\000\042\002" +
    "\uffe2\003\uffe2\016\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\060\uffe2\064\uffe2\001\002\000\042\002\uffe6\003\uffe6" +
    "\016\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\060\uffe6" +
    "\064\uffe6\001\002\000\034\007\073\012\110\024\072\034" +
    "\100\035\106\053\077\054\076\055\112\056\111\057\105" +
    "\060\104\061\075\064\107\001\002\000\044\004\140\005" +
    "\137\006\134\007\124\010\127\011\135\013\131\022\141" +
    "\023\123\026\132\027\130\030\133\031\122\032\136\033" +
    "\125\062\126\063\362\001\002\000\036\003\214\016\uffde" +
    "\036\035\037\061\040\024\042\006\043\uffde\044\uffde\045" +
    "\015\046\034\047\053\050\011\060\016\064\021\001\002" +
    "\000\036\003\214\016\uffdf\036\035\037\061\040\024\042" +
    "\006\043\uffdf\044\uffdf\045\015\046\034\047\053\050\011" +
    "\060\016\064\021\001\002\000\030\003\214\036\035\037" +
    "\061\040\024\042\006\045\015\046\034\047\053\050\011" +
    "\060\016\064\021\001\002\000\032\003\214\016\366\036" +
    "\035\037\061\040\024\042\006\045\015\046\034\047\053" +
    "\050\011\060\016\064\021\001\002\000\042\002\uffe5\003" +
    "\uffe5\016\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\060" +
    "\uffe5\064\uffe5\001\002\000\010\016\uffe1\043\uffe1\044\uffe1" +
    "\001\002\000\042\002\uffe3\003\uffe3\016\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\060\uffe3\064\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\046\005\021\017\027\020\026\022\016\030" +
    "\006\040\032\056\031\057\007\060\011\061\004\063\003" +
    "\124\022\125\035\127\017\130\013\136\030\137\025\140" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\102\032\330\125\116\132\114\133\073\136" +
    "\112\141\115\142\100\001\001\000\006\131\223\134\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\017\027\020\026\022\016" +
    "\030\006\040\306\056\031\057\007\060\011\061\004\063" +
    "\003\125\035\127\017\130\013\136\030\137\025\140\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\130\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\116\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\012\047\013\056\017\027\020" +
    "\026\022\054\030\050\056\031\057\007\060\011\061\004" +
    "\125\064\127\055\130\053\135\063\136\030\137\062\140" +
    "\051\001\001\000\040\017\027\020\026\022\054\030\050" +
    "\056\031\057\007\060\011\061\004\125\064\127\055\130" +
    "\053\135\214\136\030\137\062\140\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\102\032\101\125\116\132" +
    "\114\133\073\136\112\141\115\142\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\102\032\206\125\116\132" +
    "\114\133\073\136\112\141\115\142\100\001\001\000\022" +
    "\002\102\032\205\125\116\132\114\133\073\136\112\141" +
    "\115\142\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\102\032\157\125\116\132\114\133\073" +
    "\136\112\141\115\142\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\102\032\120\125\116\132\114\133\073\136\112\141\115" +
    "\142\100\001\001\000\002\001\001\000\022\002\102\032" +
    "\156\125\116\132\114\133\073\136\112\141\115\142\100" +
    "\001\001\000\022\002\102\032\155\125\116\132\114\133" +
    "\073\136\112\141\115\142\100\001\001\000\022\002\102" +
    "\032\154\125\116\132\114\133\073\136\112\141\115\142" +
    "\100\001\001\000\022\002\102\032\153\125\116\132\114" +
    "\133\073\136\112\141\115\142\100\001\001\000\022\002" +
    "\102\032\152\125\116\132\114\133\073\136\112\141\115" +
    "\142\100\001\001\000\022\002\102\032\151\125\116\132" +
    "\114\133\073\136\112\141\115\142\100\001\001\000\022" +
    "\002\102\032\150\125\116\132\114\133\073\136\112\141" +
    "\115\142\100\001\001\000\022\002\102\032\147\125\116" +
    "\132\114\133\073\136\112\141\115\142\100\001\001\000" +
    "\022\002\102\032\146\125\116\132\114\133\073\136\112" +
    "\141\115\142\100\001\001\000\022\002\102\032\145\125" +
    "\116\132\114\133\073\136\112\141\115\142\100\001\001" +
    "\000\022\002\102\032\144\125\116\132\114\133\073\136" +
    "\112\141\115\142\100\001\001\000\022\002\102\032\143" +
    "\125\116\132\114\133\073\136\112\141\115\142\100\001" +
    "\001\000\022\002\102\032\142\125\116\132\114\133\073" +
    "\136\112\141\115\142\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\102\032\141\125\116\132\114" +
    "\133\073\136\112\141\115\142\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\102\023\173\032\171\125\116" +
    "\132\114\133\073\136\112\141\115\142\100\001\001\000" +
    "\022\002\102\032\170\125\116\132\114\133\073\136\112" +
    "\141\115\142\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\102" +
    "\032\176\125\116\132\114\133\073\136\112\141\115\142" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\012\047\013\217\017" +
    "\027\020\026\022\054\030\050\056\031\057\007\060\011" +
    "\061\004\125\064\127\055\130\053\135\063\136\030\137" +
    "\062\140\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\131\223\134\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\102\015\237\032\236\034\235\125" +
    "\116\132\114\133\073\136\112\141\115\142\100\001\001" +
    "\000\022\002\102\032\232\125\116\132\114\133\073\136" +
    "\112\141\115\142\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\131\234\134\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\102\032\241\125\116\132\114\133\073\136" +
    "\112\141\115\142\100\001\001\000\002\001\001\000\022" +
    "\002\102\032\244\125\116\132\114\133\073\136\112\141" +
    "\115\142\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\002\102\032\251\125\116\132\114\133\073\136\112" +
    "\141\115\142\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\012\047\013\254\017\027\020\026\022\054" +
    "\030\050\056\031\057\007\060\011\061\004\125\064\127" +
    "\055\130\053\135\063\136\030\137\062\140\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\265\125\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\012\047\013\274\017\027\020\026\022\054\030\050" +
    "\056\031\057\007\060\011\061\004\125\064\127\055\130" +
    "\053\135\063\136\030\137\062\140\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\102\032\277\125" +
    "\116\132\114\133\073\136\112\141\115\142\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\012\047\013" +
    "\302\017\027\020\026\022\054\030\050\056\031\057\007" +
    "\060\011\061\004\125\064\127\055\130\053\135\063\136" +
    "\030\137\062\140\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\012\047\013\305\017\027\020\026\022" +
    "\054\030\050\056\031\057\007\060\011\061\004\125\064" +
    "\127\055\130\053\135\063\136\030\137\062\140\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\315\125\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\324" +
    "\125\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\002\102\032\332\125\116\132\114\133\073\136\112\141" +
    "\115\142\100\001\001\000\002\001\001\000\022\002\102" +
    "\032\334\125\116\132\114\133\073\136\112\141\115\142" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\012\047\013\337\017\027\020\026\022\054\030\050\056" +
    "\031\057\007\060\011\061\004\125\064\127\055\130\053" +
    "\135\063\136\030\137\062\140\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\102\032\342\125\116" +
    "\132\114\133\073\136\112\141\115\142\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\002\102\032\346\125\116\132\114\133\073\136\112\141" +
    "\115\142\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\070\353\071\355\072\356\115\351\001\001\000" +
    "\006\070\366\071\367\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\102\032\360\125\116\132\114\133\073" +
    "\136\112\141\115\142\100\001\001\000\002\001\001\000" +
    "\042\012\362\017\027\020\026\022\054\030\050\056\031" +
    "\057\007\060\011\061\004\125\064\127\055\130\053\135" +
    "\063\136\030\137\062\140\051\001\001\000\040\017\027" +
    "\020\026\022\054\030\050\056\031\057\007\060\011\061" +
    "\004\125\064\127\055\130\053\135\214\136\030\137\062" +
    "\140\051\001\001\000\042\012\364\017\027\020\026\022" +
    "\054\030\050\056\031\057\007\060\011\061\004\125\064" +
    "\127\055\130\053\135\063\136\030\137\062\140\051\001" +
    "\001\000\040\017\027\020\026\022\054\030\050\056\031" +
    "\057\007\060\011\061\004\125\064\127\055\130\053\135" +
    "\214\136\030\137\062\140\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
 public ParserTree parserTree = new ParserTree("hola");
public ArrayList<Symbol> error = new ArrayList<Symbol>();
 public Metodo metodo = new Metodo();
  public ArrayList<String> ejecucion = new ArrayList();
   public ArrayList<ParserTree> declaracion = new ArrayList<ParserTree>();
    String expresion = "";
    public void syntax_error(Symbol s){
    System.err.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ".  " +s.value + " no reconocido." );
        this.error.add(s);
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         System.err.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". " + s.value + " no reconocido.");
        this.error.add(s);
        System.err.println(s);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

//Codigo de acciones
      

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametro ::= exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree ("parametro"); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametro ::= parametro COMA exp 
            {
              ParserTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 b.addChildren(a); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // getMetodo ::= ID PAREA PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ParserTree arbol = new ParserTree("getMetodo");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
           arbol.addChildren(nodo); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("getMetodo",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // getMetodo ::= ID PAREA parametro PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("getMetodo");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
           arbol.addChildren(nodo);arbol.addChildren(b); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("getMetodo",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parVerctor ::= getMetodo 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parVerctor",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parVerctor ::= ID 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID")); ParserTree arbol = new ParserTree("ID"); arbol.addChildren(nodo); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parVerctor",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // funcioVector ::= parVerctor PUNTO ID 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("funcioVector"); Node nodo = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));arbol.addChildren(nodo); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcioVector",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // funcioVector ::= parVerctor PUNTO ID PAREA PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ParserTree arbol = new ParserTree("funcioVector"); Node nodo = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));arbol.addChildren(nodo); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcioVector",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // arreglo ::= arreglo COMA exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addChildren(b);RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arreglo ::= LLV1 exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("arreglo"); arbol.addChildren(a);RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arreglo_asignar ::= arreglo LLV2 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_asignar",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // vector ::= getMetodo LLV1 exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ParserTree arbol = new ParserTree("vectorMetodo"); 

    arbol.addChildren(a);
    arbol.addChildren(b);      
          RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // vector ::= ID LLV1 exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("vector"); Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
    arbol.addChildren(nodo);
    arbol.addChildren(b);      
          RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valorVector ::= vector LLV2 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorVector",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valor ::= FALSO 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("FALSO"),new Token (new Location(aleft,aright),a,"VERDADERO"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valor ::= VERDADERO 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("VERDADERO"),new Token (new Location(aleft,aright),a,"VERDADERO"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor ::= CADENA 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("CADE"),new Token (new Location(aleft,aright),a,"CADE"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor ::= CARACTER 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("CARACTER"),new Token (new Location(aleft,aright),a,"CARACTER"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor ::= DATETIME 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("DATETIME"),new Token (new Location(aleft,aright),a,"DATETIME"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor ::= DATE 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("DATE"),new Token (new Location(aleft,aright),a,"DATE"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor ::= NDECIMAL 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("NDECIMAL"),new Token (new Location(aleft,aright),a,"NDECIMAL"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor ::= NUMERO 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("NUMERO"),new Token (new Location(aleft,aright),a,"NUMERO"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor ::= ID 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exp ::= funcioVector 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("documento"); arbol.addChildren(a); RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exp ::= documento 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("documento"); arbol.addChildren(a); RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exp ::= valorVector 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("exp"); arbol.addChildren(a); RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exp ::= getMetodo 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree ("exp"); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exp ::= valor 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree ("exp"); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exp ::= PAREA exp PAREC 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exp ::= exp MENOSMENOS 
            {
              ParserTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MENOSMENOS"),new Token (new Location(aleft,aright),a,"MENOSMENOS"));
        ParserTree arbol = new ParserTree("exp");
         arbol.addChildren(b);
         arbol.addChildren(nodo);
         RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exp ::= exp MASMAS 
            {
              ParserTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MASMAS"),new Token (new Location(aleft,aright),a,"MASMAS"));
        ParserTree arbol = new ParserTree("exp");
         arbol.addChildren(b);
         arbol.addChildren(nodo);
         RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exp ::= MENOS exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MENOS"),new Token (new Location(aleft,aright),a,"MENOS"));
        ParserTree arbol = new ParserTree("exp");
         arbol.addChildren(nodo);
         arbol.addChildren(b);
         RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exp ::= NEL exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("NEL"),new Token(new Location(aleft,aright),a,"NEL"));
        ParserTree arbol = new ParserTree("exp");
         arbol.addChildren(nodo);
         arbol.addChildren(b);
         RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exp ::= exp Y exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("AND"),          new Token(new Location(aleft,aright),a,"AND"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // exp ::= exp OR exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("OR"),         new Token(new Location(aleft,aright),a,"OR"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exp ::= exp NOIGUAL exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("NOIGUAL"),    new Token(new Location(aleft,aright),a,"NOIGUAL"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exp ::= exp IGUALIGUAL exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("IGUAL"),      new Token(new Location(aleft,aright),a,"IGUAL"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exp ::= exp MENORIGUAL exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MENORIGUAL"), new Token(new Location(aleft,aright),a,"MENORIGUAL"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exp ::= exp MAYORIGUAL exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MAYORIGUAL"), new Token(new Location(aleft,aright),a,"MAYORIGUAL"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exp ::= exp MENORQUE exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MENORQUE"),   new Token(new Location(aleft,aright),a,"MENORQUE"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp ::= exp MAYORQUE exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MAYORQUE"),   new Token(new Location(aleft,aright),a,"MAYORQUE"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp ::= exp ELEVA exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("ELEVA"),      new Token(new Location(aleft,aright),a,"ELEVA"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp ::= exp MOD exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MOD"),         new Token(new Location(aleft,aright),a,"MOD"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp ::= exp DIV exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("DIV"),         new Token(new Location(aleft,aright),a,"DIV"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp ::= exp POR exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("POR"),       new Token(new Location(aleft,aright),a,"POR"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp ::= exp MENOS exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MENOS"),     new Token(new Location(aleft,aright),a,"MENOS"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= exp MAS exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MAS"),       new Token(new Location(aleft,aright),a,"MAS"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // asigna ::= DOSPUNTOS arreglo_asignar 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("asignall"); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // asigna ::= DOSPUNTOS exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("asigna"); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // asignar ::= PUNTOCOMA 
            {
              ParserTree RESULT =null;
		 ParserTree arbol = new ParserTree("nada"); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // asignar ::= asigna PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("asignar"); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // asignacion ::= ID MENOSMENOS PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ParserTree arbol = new ParserTree("asignacion--");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asignacion ::= ID MASMAS PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ParserTree arbol = new ParserTree("asignacion++");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo);RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asignacion ::= ID LLV1 exp LLV2 asignar 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("asignacionll");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo);arbol.addChildren(c);arbol.addChildren(b); RESULT=arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // asignacion ::= ID asignar 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("asignacion");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo);arbol.addChildren(b); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion ::= DIMV asignacion 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("declaracion");
    arbol.addChildren(a); RESULT=arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // control ::= hacer 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("control"); arbol.addChildren(a);RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // control ::= switch 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("control"); arbol.addChildren(a);RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // control ::= para 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("control"); arbol.addChildren(a);RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // control ::= mientras 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("control"); arbol.addChildren(a);RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // control ::= if2 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree ("control"); ; arbol.addChildren(a);RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // control ::= if1 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("control"); arbol.addChildren(a);RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // imprimir ::= IMPRIMIR PAREA exp PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("imprimir"); Node nodo = new Node(new Term("imprimir"),new Token (new Location(aleft,aright),a,"imprimir")); arbol.addChildren(b); arbol.addChildren(nodo);RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imprimir",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listacuerpo ::= setelemento PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listacuerpo ::= observador PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listacuerpo ::= getMetodo PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(a.root.childNode.size()>1)
                this.parser.ejecucion.add(a.root.childNode.get(0).
                        token.getValueString()+"_"+a.root.childNode.get(1).childNode.size());
                else this.parser.ejecucion.add(a.root.childNode.get(0).
                        token.getValueString()+"_0"); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listacuerpo ::= error PUNTOCOMA 
            {
              ParserTree RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listacuerpo ::= RETORNAR PUNTOCOMA 
            {
              ParserTree RESULT =null;
		ParserTree arbol = new ParserTree("retornar"); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listacuerpo ::= RETORNAR exp PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("retornar");  arbol.addChildren(a);RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listacuerpo ::= TERMINAR PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ParserTree arbol = new ParserTree("TERMINAR");
         RESULT = arbol; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // listacuerpo ::= imprimir PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listacuerpo ::= asignacion 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listacuerpo ::= declaracion 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listacuerpo ::= control 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cuerpo ::= listacuerpo 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("cuerpo");  arbol.addChildren(a);RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo ::= cuerpo listacuerpo 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addChildren(b);RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo1 ::= error LLV2 
            {
              ParserTree RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo1 ::= LLV2 
            {
              ParserTree RESULT =null;
		ParserTree arbol = new ParserTree("nada");RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo1 ::= cuerpo LLV2 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mientras ::= MIENTRAS PAREA exp PAREC LLV1 cuerpo1 
            {
              ParserTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("mientras",eleft,eright);
      arbol.addChildren(a);
      arbol.addChildren(b);
      RESULT =arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // para ::= PARA exp DOSPUNTOS exp DOSPUNTOS exp DOSPUNTOS LLV1 cuerpo1 
            {
              ParserTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree d = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("para");
      arbol.addChildren(a);
      arbol.addChildren(c);
      arbol.addChildren(d);
      arbol.addChildren(b);
      RESULT =arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // caso ::= CASO exp DOSPUNTOS 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("caso"); arbol.addChildren(a); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // caso ::= CASO exp DOSPUNTOS cuerpo 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("caso"); arbol.addChildren(a);arbol.addChildren(b); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // swich_cuerpo1 ::= caso 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("cuerpo_switch"); arbol.addChildren(a); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("swich_cuerpo1",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // swich_cuerpo1 ::= swich_cuerpo1 caso 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addChildren(b); RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("swich_cuerpo1",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // swich_cuerpo ::= defecto 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("cuerpo_switch"); arbol.addChildren(a); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("swich_cuerpo",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // swich_cuerpo ::= swich_cuerpo1 defecto 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addChildren(b);RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("swich_cuerpo",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // defecto ::= LLV2 
            {
              ParserTree RESULT =null;
		
           ParserTree arbol = new ParserTree("defecto"); 
           RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defecto",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // defecto ::= DEFECTO DOSPUNTOS cuerpo LLV2 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("defecto"); arbol.addChildren(a); RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defecto",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // switch ::= SELECCIONA PAREA exp PAREC LLV1 swich_cuerpo 
            {
              ParserTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("selecciona",eleft,eright);
      arbol.addChildren(a);
      arbol.addChildren(b);
      RESULT =arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if2 ::= SI PAREA exp PAREC LLV1 cuerpo1 SINO LLV1 cuerpo1 
            {
              ParserTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("if2",eleft,eright);
      arbol.addChildren(a);
      arbol.addChildren(b);
      arbol.addChildren(c);
      RESULT =arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if1 ::= SI PAREA exp PAREC LLV1 cuerpo1 
            {
              ParserTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("if1",eleft,eright);
      arbol.addChildren(a);
      arbol.addChildren(b);
      RESULT =arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // metodo ::= FUNCION ID PAREA PAREC LLV1 cuerpo1 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
        Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        ParserTree arbol = new ParserTree("metodo");
        arbol.addChildren(nodo);
        arbol.addChildren(c);
        this.parser.metodo.insertar(a+"_"+0, null,c.root);
        RESULT = arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // metodo ::= FUNCION ID PAREA parametroID PAREC LLV1 cuerpo1 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
        Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        ParserTree arbol = new ParserTree("metodo");
        arbol.addChildren(nodo);
        arbol.addChildren(b);
        arbol.addChildren(c);
        this.parser.metodo.insertar(a+"_"+b.root.childNode.size(), b.root,c.root);
        RESULT = arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametroID ::= ID 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ParserTree arbol = new ParserTree("parametro");
    Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
    arbol.addChildren(nodo); RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroID",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametroID ::= parametroID COMA ID 
            {
              ParserTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
    b.addChildren(nodo); RESULT =b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroID",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcion ::= getMetodo 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcion ::= FUNCION PAREA PAREC LLV1 cuerpo1 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("funcion");
   arbol.addChildren(a);
   RESULT =a;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // observador ::= DOCUMENTO PUNTO ID PAREA CADENA COMA funcion PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ParserTree arbol = new ParserTree("observadorFin");
     Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
     Node nodob = new Node(new Term("CADENA"),new Token (new Location(bleft,bright),b,"CADENA"));
     arbol.addChildren(nodo,nodob);
     arbol.addChildren(c);
     RESULT = arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("observador",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // observador ::= documento PUNTO ID PAREA CADENA COMA funcion PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree d = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      ParserTree arbol = new ParserTree("observador");
    
     Node nodob = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));
     Node nodoc = new Node(new Term("CADENA"),new Token (new Location(cleft,cright),c,"CADENA"));
     arbol.addChildren(a);
     arbol.addChildren(nodob,nodoc);
     arbol.addChildren(d);
     RESULT = arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("observador",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // observador ::= ID PUNTO ID PAREA CADENA COMA funcion PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree d = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ParserTree arbol = new ParserTree("observador");
     Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
     Node nodob = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));
     Node nodoc = new Node(new Term("CADENA"),new Token (new Location(cleft,cright),c,"CADENA"));
     arbol.addChildren(nodo,nodob,nodoc);
     arbol.addChildren(d);
     RESULT = arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("observador",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // setelemento ::= ID PUNTO ID PAREA CADENA COMA CADENA PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ParserTree arbol = new ParserTree("setelemento");
          Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
          Node nodob = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));
          Node nodoc = new Node(new Term("CADENA"),new Token (new Location(cleft,cright),c,"CADENA"));
          Node nodod = new Node(new Term("CADENA"),new Token (new Location(dleft,dright),d,"CADENA"));
          arbol.addChildren(nodo,nodob,nodoc,nodod);
          RESULT=arbol;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setelemento",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // setelemento ::= documento PUNTO ID PAREA CADENA COMA CADENA PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ParserTree arbol = new ParserTree("setelemento");
          Node nodob = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));
          Node nodoc = new Node(new Term("CADENA"),new Token (new Location(cleft,cright),c,"CADENA"));
          Node nodod = new Node(new Term("CADENA"),new Token (new Location(dleft,dright),d,"CADENA"));
          arbol.addChildren(a);
          arbol.addChildren(nodob,nodoc,nodod);
          RESULT=arbol;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setelemento",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // documento ::= DOCUMENTO PUNTO ID PAREA CADENA PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ParserTree arbol = new ParserTree("getComponente");
          Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
          Node nodob = new Node(new Term("CADENA"),new Token (new Location(bleft,bright),b,"CADENA"));
          arbol.addChildren(nodo,nodob);
          
          RESULT=arbol;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("documento",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // principal ::= setelemento PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // principal ::= observador PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // principal ::= error 
            {
              ParserTree RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // principal ::= asignacion 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // principal ::= control 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // principal ::= imprimir PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // principal ::= getMetodo PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(a.root.childNode.size()>1)
                this.parser.ejecucion.add(a.root.childNode.get(0).
                        token.getValueString()+"_"+a.root.childNode.get(1).childNode.size());
                else this.parser.ejecucion.add(a.root.childNode.get(0).
                        token.getValueString()+"_0"); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // principal ::= declaracion 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		this.parser.declaracion.add(a); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // principal ::= metodo 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // js ::= principal 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("principal"); arbol.addChildren(a);RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("js",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // js ::= js principal 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addChildren(b); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("js",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicial ::= js 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		this.parser.parserTree = a; RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree start_val = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

