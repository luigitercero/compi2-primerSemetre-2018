//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 02 19:35:37 CST 2018
//----------------------------------------------------
package js.org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;
import com.TreeParser.*;
import java.util.ArrayList;
import Simbol.Metodo.Metodo;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Fri Mar 02 19:35:37 CST 2018
 */
public class parser extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\144\000\002\002\004\000\002\005\003\000\002\124"
        + "\004\000\002\124\003\000\002\040\003\000\002\040\003"
        + "\000\002\040\004\000\002\040\004\000\002\040\003\000"
        + "\002\040\003\000\002\040\003\000\002\116\005\000\002"
        + "\116\003\000\002\063\011\000\002\063\010\000\002\017"
        + "\010\000\002\020\013\000\002\056\010\000\002\071\006"
        + "\000\002\071\003\000\002\072\004\000\002\072\003\000"
        + "\002\115\004\000\002\115\003\000\002\070\006\000\002"
        + "\070\005\000\002\061\013\000\002\057\010\000\002\013"
        + "\004\000\002\013\003\000\002\013\004\000\002\012\004"
        + "\000\002\012\003\000\002\135\003\000\002\135\003\000"
        + "\002\135\003\000\002\135\004\000\002\135\004\000\002"
        + "\135\005\000\002\135\004\000\002\135\004\000\002\135"
        + "\004\000\002\030\006\000\002\022\003\000\002\022\003"
        + "\000\002\022\003\000\002\022\003\000\002\022\003\000"
        + "\002\022\003\000\002\127\004\000\002\130\004\000\002"
        + "\130\007\000\002\130\005\000\002\130\005\000\002\131"
        + "\004\000\002\131\003\000\002\134\004\000\002\134\004"
        + "\000\002\032\005\000\002\032\005\000\002\032\005\000"
        + "\002\032\005\000\002\032\005\000\002\032\005\000\002"
        + "\032\005\000\002\032\005\000\002\032\005\000\002\032"
        + "\005\000\002\032\005\000\002\032\005\000\002\032\005"
        + "\000\002\032\005\000\002\032\004\000\002\032\004\000"
        + "\002\032\004\000\002\032\004\000\002\032\005\000\002"
        + "\032\003\000\002\032\003\000\002\032\003\000\002\002"
        + "\003\000\002\002\003\000\002\002\003\000\002\002\003"
        + "\000\002\002\003\000\002\002\003\000\002\002\003\000"
        + "\002\002\003\000\002\002\003\000\002\132\004\000\002"
        + "\133\005\000\002\034\004\000\002\015\004\000\002\015"
        + "\005\000\002\125\006\000\002\125\005\000\002\125\007"
        + "\000\002\125\010\000\002\023\005\000\002\023\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\303\000\024\003\023\036\030\040\022\042\006\045"
        + "\013\046\027\050\011\051\033\060\014\001\002\000\026"
        + "\002\ufffd\003\ufffd\036\ufffd\040\ufffd\042\ufffd\045\ufffd\046"
        + "\ufffd\050\ufffd\051\ufffd\060\ufffd\001\002\000\040\002\uffd3"
        + "\003\uffd3\016\uffd3\036\uffd3\037\uffd3\040\uffd3\042\uffd3\043"
        + "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3"
        + "\060\uffd3\001\002\000\004\012\263\001\002\000\004\021"
        + "\262\001\002\000\040\002\uffd4\003\uffd4\016\uffd4\036\uffd4"
        + "\037\uffd4\040\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046"
        + "\uffd4\047\uffd4\050\uffd4\051\uffd4\060\uffd4\001\002\000\004"
        + "\012\257\001\002\000\040\002\uffd1\003\uffd1\016\uffd1\036"
        + "\uffd1\037\uffd1\040\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1"
        + "\046\uffd1\047\uffd1\050\uffd1\051\uffd1\060\uffd1\001\002\000"
        + "\032\007\062\012\075\024\061\034\067\035\074\053\066"
        + "\054\065\055\077\056\076\057\073\060\072\061\064\001"
        + "\002\000\020\004\206\005\204\012\144\015\210\021\211"
        + "\025\143\063\207\001\002\000\026\002\ufff8\003\ufff8\036"
        + "\ufff8\040\ufff8\042\ufff8\045\ufff8\046\ufff8\050\ufff8\051\ufff8"
        + "\060\ufff8\001\002\000\026\002\ufff9\003\ufff9\036\ufff9\040"
        + "\ufff9\042\ufff9\045\ufff9\046\ufff9\050\ufff9\051\ufff9\060\ufff9"
        + "\001\002\000\026\002\ufffc\003\ufffc\036\ufffc\040\ufffc\042"
        + "\ufffc\045\ufffc\046\ufffc\050\ufffc\051\ufffc\060\ufffc\001\002"
        + "\000\004\002\246\001\002\000\026\002\000\003\023\036"
        + "\030\040\022\042\006\045\013\046\027\050\011\051\033"
        + "\060\014\001\002\000\004\012\235\001\002\000\026\002"
        + "\ufff7\003\ufff7\036\ufff7\040\ufff7\042\ufff7\045\ufff7\046\ufff7"
        + "\050\ufff7\051\ufff7\060\ufff7\001\002\000\040\002\uffd5\003"
        + "\uffd5\016\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5"
        + "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\060"
        + "\uffd5\001\002\000\040\002\uffd6\003\uffd6\016\uffd6\036\uffd6"
        + "\037\uffd6\040\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046"
        + "\uffd6\047\uffd6\050\uffd6\051\uffd6\060\uffd6\001\002\000\040"
        + "\002\uffd2\003\uffd2\016\uffd2\036\uffd2\037\uffd2\040\uffd2\042"
        + "\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2"
        + "\051\uffd2\060\uffd2\001\002\000\004\012\230\001\002\000"
        + "\004\060\201\001\002\000\026\002\ufffe\003\ufffe\036\ufffe"
        + "\040\ufffe\042\ufffe\045\ufffe\046\ufffe\050\ufffe\051\ufffe\060"
        + "\ufffe\001\002\000\004\021\200\001\002\000\004\060\034"
        + "\001\002\000\004\012\035\001\002\000\006\014\040\060"
        + "\036\001\002\000\006\014\ufff5\017\ufff5\001\002\000\006"
        + "\014\174\017\173\001\002\000\004\015\041\001\002\000"
        + "\030\003\053\016\051\036\030\037\052\040\022\042\006"
        + "\045\013\046\027\047\044\050\011\060\014\001\002\000"
        + "\030\003\171\016\170\036\030\037\052\040\022\042\006"
        + "\045\013\046\027\047\044\050\011\060\014\001\002\000"
        + "\004\021\167\001\002\000\004\021\166\001\002\000\034"
        + "\003\uffde\016\uffde\036\uffde\037\uffde\040\uffde\042\uffde\043"
        + "\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\060\uffde"
        + "\001\002\000\034\003\uffe0\016\uffe0\036\uffe0\037\uffe0\040"
        + "\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0"
        + "\050\uffe0\060\uffe0\001\002\000\026\002\ufff3\003\ufff3\036"
        + "\ufff3\040\ufff3\042\ufff3\045\ufff3\046\ufff3\050\ufff3\051\ufff3"
        + "\060\ufff3\001\002\000\034\003\uffdf\016\uffdf\036\uffdf\037"
        + "\uffdf\040\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf"
        + "\047\uffdf\050\uffdf\060\uffdf\001\002\000\042\002\uffe4\003"
        + "\uffe4\016\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4"
        + "\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051"
        + "\uffe4\060\uffe4\001\002\000\034\007\062\012\075\021\100"
        + "\024\061\034\067\035\074\053\066\054\065\055\077\056"
        + "\076\057\073\060\072\061\064\001\002\000\006\016\057"
        + "\021\060\001\002\000\034\003\uffe1\016\uffe1\036\uffe1\037"
        + "\uffe1\040\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1"
        + "\047\uffe1\050\uffe1\060\uffe1\001\002\000\004\021\056\001"
        + "\002\000\034\003\uffd8\016\uffd8\036\uffd8\037\uffd8\040\uffd8"
        + "\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050"
        + "\uffd8\060\uffd8\001\002\000\042\002\uffe3\003\uffe3\016\uffe3"
        + "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044"
        + "\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\060\uffe3"
        + "\001\002\000\034\003\uffd9\016\uffd9\036\uffd9\037\uffd9\040"
        + "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9"
        + "\050\uffd9\060\uffd9\001\002\000\032\007\062\012\075\024"
        + "\061\034\067\035\074\053\066\054\065\055\077\056\076"
        + "\057\073\060\072\061\064\001\002\000\032\007\062\012"
        + "\075\024\061\034\067\035\074\053\066\054\065\055\077"
        + "\056\076\057\073\060\072\061\064\001\002\000\004\016"
        + "\163\001\002\000\054\004\uffab\005\uffab\006\uffab\007\uffab"
        + "\010\uffab\011\uffab\013\uffab\014\uffab\016\uffab\017\uffab\021"
        + "\uffab\022\uffab\023\uffab\026\uffab\027\uffab\030\uffab\031\uffab"
        + "\032\uffab\033\uffab\062\uffab\063\uffab\001\002\000\054\004"
        + "\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\013\uffad"
        + "\014\uffad\016\uffad\017\uffad\021\uffad\022\uffad\023\uffad\026"
        + "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\062\uffad"
        + "\063\uffad\001\002\000\054\004\uffae\005\uffae\006\uffae\007"
        + "\uffae\010\uffae\011\uffae\013\uffae\014\uffae\016\uffae\017\uffae"
        + "\021\uffae\022\uffae\023\uffae\026\uffae\027\uffae\030\uffae\031"
        + "\uffae\032\uffae\033\uffae\062\uffae\063\uffae\001\002\000\054"
        + "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\013"
        + "\uffaa\014\uffaa\016\uffaa\017\uffaa\021\uffaa\022\uffaa\023\uffaa"
        + "\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\062"
        + "\uffaa\063\uffaa\001\002\000\044\004\122\005\121\006\116"
        + "\007\106\010\111\011\117\013\113\021\162\022\123\023"
        + "\105\026\114\027\112\030\115\031\104\032\120\033\107"
        + "\062\110\001\002\000\054\004\uffb4\005\uffb4\006\uffb4\007"
        + "\uffb4\010\uffb4\011\uffb4\013\uffb4\014\uffb4\016\uffb4\017\uffb4"
        + "\021\uffb4\022\uffb4\023\uffb4\026\uffb4\027\uffb4\030\uffb4\031"
        + "\uffb4\032\uffb4\033\uffb4\062\uffb4\063\uffb4\001\002\000\062"
        + "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012"
        + "\144\013\uffb1\014\uffb1\015\145\016\uffb1\017\uffb1\021\uffb1"
        + "\022\uffb1\023\uffb1\025\143\026\uffb1\027\uffb1\030\uffb1\031"
        + "\uffb1\032\uffb1\033\uffb1\062\uffb1\063\uffb1\001\002\000\054"
        + "\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\013"
        + "\uffac\014\uffac\016\uffac\017\uffac\021\uffac\022\uffac\023\uffac"
        + "\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\062"
        + "\uffac\063\uffac\001\002\000\054\004\uffa9\005\uffa9\006\uffa9"
        + "\007\uffa9\010\uffa9\011\uffa9\013\uffa9\014\uffa9\016\uffa9\017"
        + "\uffa9\021\uffa9\022\uffa9\023\uffa9\026\uffa9\027\uffa9\030\uffa9"
        + "\031\uffa9\032\uffa9\033\uffa9\062\uffa9\063\uffa9\001\002\000"
        + "\032\007\062\012\075\024\061\034\067\035\074\053\066"
        + "\054\065\055\077\056\076\057\073\060\072\061\064\001"
        + "\002\000\054\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf"
        + "\011\uffaf\013\uffaf\014\uffaf\016\uffaf\017\uffaf\021\uffaf\022"
        + "\uffaf\023\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf"
        + "\033\uffaf\062\uffaf\063\uffaf\001\002\000\054\004\uffb0\005"
        + "\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\013\uffb0\014\uffb0"
        + "\016\uffb0\017\uffb0\021\uffb0\022\uffb0\023\uffb0\026\uffb0\027"
        + "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\062\uffb0\063\uffb0"
        + "\001\002\000\034\003\uffda\016\uffda\036\uffda\037\uffda\040"
        + "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda"
        + "\050\uffda\060\uffda\001\002\000\054\004\uffb2\005\uffb2\006"
        + "\uffb2\007\uffb2\010\uffb2\011\uffb2\013\uffb2\014\uffb2\016\uffb2"
        + "\017\uffb2\021\uffb2\022\uffb2\023\uffb2\026\uffb2\027\uffb2\030"
        + "\uffb2\031\uffb2\032\uffb2\033\uffb2\062\uffb2\063\uffb2\001\002"
        + "\000\054\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011"
        + "\uffb3\013\uffb3\014\uffb3\016\uffb3\017\uffb3\021\uffb3\022\uffb3"
        + "\023\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033"
        + "\uffb3\062\uffb3\063\uffb3\001\002\000\044\004\122\005\121"
        + "\006\116\007\106\010\111\011\117\013\113\014\124\022"
        + "\123\023\105\026\114\027\112\030\115\031\104\032\120"
        + "\033\107\062\110\001\002\000\032\007\062\012\075\024"
        + "\061\034\067\035\074\053\066\054\065\055\077\056\076"
        + "\057\073\060\072\061\064\001\002\000\032\007\062\012"
        + "\075\024\061\034\067\035\074\053\066\054\065\055\077"
        + "\056\076\057\073\060\072\061\064\001\002\000\032\007"
        + "\062\012\075\024\061\034\067\035\074\053\066\054\065"
        + "\055\077\056\076\057\073\060\072\061\064\001\002\000"
        + "\032\007\062\012\075\024\061\034\067\035\074\053\066"
        + "\054\065\055\077\056\076\057\073\060\072\061\064\001"
        + "\002\000\032\007\062\012\075\024\061\034\067\035\074"
        + "\053\066\054\065\055\077\056\076\057\073\060\072\061"
        + "\064\001\002\000\032\007\062\012\075\024\061\034\067"
        + "\035\074\053\066\054\065\055\077\056\076\057\073\060"
        + "\072\061\064\001\002\000\032\007\062\012\075\024\061"
        + "\034\067\035\074\053\066\054\065\055\077\056\076\057"
        + "\073\060\072\061\064\001\002\000\032\007\062\012\075"
        + "\024\061\034\067\035\074\053\066\054\065\055\077\056"
        + "\076\057\073\060\072\061\064\001\002\000\032\007\062"
        + "\012\075\024\061\034\067\035\074\053\066\054\065\055"
        + "\077\056\076\057\073\060\072\061\064\001\002\000\032"
        + "\007\062\012\075\024\061\034\067\035\074\053\066\054"
        + "\065\055\077\056\076\057\073\060\072\061\064\001\002"
        + "\000\032\007\062\012\075\024\061\034\067\035\074\053"
        + "\066\054\065\055\077\056\076\057\073\060\072\061\064"
        + "\001\002\000\032\007\062\012\075\024\061\034\067\035"
        + "\074\053\066\054\065\055\077\056\076\057\073\060\072"
        + "\061\064\001\002\000\032\007\062\012\075\024\061\034"
        + "\067\035\074\053\066\054\065\055\077\056\076\057\073"
        + "\060\072\061\064\001\002\000\054\004\uffb6\005\uffb6\006"
        + "\uffb6\007\uffb6\010\uffb6\011\uffb6\013\uffb6\014\uffb6\016\uffb6"
        + "\017\uffb6\021\uffb6\022\uffb6\023\uffb6\026\uffb6\027\uffb6\030"
        + "\uffb6\031\uffb6\032\uffb6\033\uffb6\062\uffb6\063\uffb6\001\002"
        + "\000\054\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011"
        + "\uffb7\013\uffb7\014\uffb7\016\uffb7\017\uffb7\021\uffb7\022\uffb7"
        + "\023\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033"
        + "\uffb7\062\uffb7\063\uffb7\001\002\000\032\007\062\012\075"
        + "\024\061\034\067\035\074\053\066\054\065\055\077\056"
        + "\076\057\073\060\072\061\064\001\002\000\054\004\uffb5"
        + "\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\013\uffb5\014"
        + "\uffb5\016\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5\026\uffb5"
        + "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\062\uffb5\063"
        + "\uffb5\001\002\000\054\004\122\005\121\006\116\007\106"
        + "\010\111\011\117\013\113\014\uffbb\016\uffbb\017\uffbb\021"
        + "\uffbb\022\uffbb\023\105\026\114\027\112\030\115\031\104"
        + "\032\120\033\107\062\110\063\uffbb\001\002\000\054\004"
        + "\122\005\121\006\116\007\106\010\111\011\117\013\113"
        + "\014\uffbd\016\uffbd\017\uffbd\021\uffbd\022\uffbd\023\uffbd\026"
        + "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\062\110"
        + "\063\uffbd\001\002\000\054\004\uffc4\005\uffc4\006\uffc4\007"
        + "\uffc4\010\uffc4\011\uffc4\013\113\014\uffc4\016\uffc4\017\uffc4"
        + "\021\uffc4\022\uffc4\023\uffc4\026\uffc4\027\uffc4\030\uffc4\031"
        + "\uffc4\032\uffc4\033\uffc4\062\uffc4\063\uffc4\001\002\000\054"
        + "\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\111\011\117\013"
        + "\113\014\uffc7\016\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7"
        + "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\062"
        + "\110\063\uffc7\001\002\000\054\004\122\005\121\006\116"
        + "\007\106\010\111\011\117\013\113\014\uffbf\016\uffbf\017"
        + "\uffbf\021\uffbf\022\uffbf\023\uffbf\026\uffbf\027\uffbf\030\uffbf"
        + "\031\uffbf\032\uffbf\033\uffbf\062\110\063\uffbf\001\002\000"
        + "\054\004\122\005\121\006\116\007\106\010\111\011\117"
        + "\013\113\014\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1\023"
        + "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1"
        + "\062\110\063\uffc1\001\002\000\054\004\uffc2\005\uffc2\006"
        + "\uffc2\007\uffc2\010\uffc2\011\uffc2\013\uffc2\014\uffc2\016\uffc2"
        + "\017\uffc2\021\uffc2\022\uffc2\023\uffc2\026\uffc2\027\uffc2\030"
        + "\uffc2\031\uffc2\032\uffc2\033\uffc2\062\uffc2\063\uffc2\001\002"
        + "\000\054\004\122\005\121\006\116\007\106\010\111\011"
        + "\117\013\113\014\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0"
        + "\023\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033"
        + "\uffc0\062\110\063\uffc0\001\002\000\054\004\uffc5\005\uffc5"
        + "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\013\113\014\uffc5\016"
        + "\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\026\uffc5\027\uffc5"
        + "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\062\uffc5\063\uffc5\001"
        + "\002\000\054\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3"
        + "\011\uffc3\013\113\014\uffc3\016\uffc3\017\uffc3\021\uffc3\022"
        + "\uffc3\023\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3"
        + "\033\uffc3\062\uffc3\063\uffc3\001\002\000\054\004\122\005"
        + "\121\006\116\007\106\010\111\011\117\013\113\014\uffbc"
        + "\016\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\026\uffbc\027"
        + "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\062\110\063\uffbc"
        + "\001\002\000\054\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010"
        + "\111\011\117\013\113\014\uffc6\016\uffc6\017\uffc6\021\uffc6"
        + "\022\uffc6\023\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032"
        + "\uffc6\033\uffc6\062\110\063\uffc6\001\002\000\054\004\122"
        + "\005\121\006\116\007\106\010\111\011\117\013\113\014"
        + "\uffba\016\uffba\017\uffba\021\uffba\022\uffba\023\uffba\026\114"
        + "\027\112\030\115\031\104\032\120\033\107\062\110\063"
        + "\uffba\001\002\000\054\004\122\005\121\006\116\007\106"
        + "\010\111\011\117\013\113\014\uffbe\016\uffbe\017\uffbe\021"
        + "\uffbe\022\uffbe\023\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe"
        + "\032\uffbe\033\uffbe\062\110\063\uffbe\001\002\000\004\060"
        + "\155\001\002\000\034\007\062\012\075\014\150\024\061"
        + "\034\067\035\074\053\066\054\065\055\077\056\076\057"
        + "\073\060\072\061\064\001\002\000\032\007\062\012\075"
        + "\024\061\034\067\035\074\053\066\054\065\055\077\056"
        + "\076\057\073\060\072\061\064\001\002\000\044\004\122"
        + "\005\121\006\116\007\106\010\111\011\117\013\113\016"
        + "\uffa7\022\123\023\105\026\114\027\112\030\115\031\104"
        + "\032\120\033\107\062\110\001\002\000\046\004\122\005"
        + "\121\006\116\007\106\010\111\011\117\013\113\014\uff9e"
        + "\017\uff9e\022\123\023\105\026\114\027\112\030\115\031"
        + "\104\032\120\033\107\062\110\001\002\000\054\004\uffa2"
        + "\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\013\uffa2\014"
        + "\uffa2\016\uffa2\017\uffa2\021\uffa2\022\uffa2\023\uffa2\026\uffa2"
        + "\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\062\uffa2\063"
        + "\uffa2\001\002\000\006\014\153\017\152\001\002\000\032"
        + "\007\062\012\075\024\061\034\067\035\074\053\066\054"
        + "\065\055\077\056\076\057\073\060\072\061\064\001\002"
        + "\000\054\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011"
        + "\uffa3\013\uffa3\014\uffa3\016\uffa3\017\uffa3\021\uffa3\022\uffa3"
        + "\023\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033"
        + "\uffa3\062\uffa3\063\uffa3\001\002\000\046\004\122\005\121"
        + "\006\116\007\106\010\111\011\117\013\113\014\uff9f\017"
        + "\uff9f\022\123\023\105\026\114\027\112\030\115\031\104"
        + "\032\120\033\107\062\110\001\002\000\004\012\156\001"
        + "\002\000\034\007\062\012\075\014\157\024\061\034\067"
        + "\035\074\053\066\054\065\055\077\056\076\057\073\060"
        + "\072\061\064\001\002\000\054\004\uffa1\005\uffa1\006\uffa1"
        + "\007\uffa1\010\uffa1\011\uffa1\013\uffa1\014\uffa1\016\uffa1\017"
        + "\uffa1\021\uffa1\022\uffa1\023\uffa1\026\uffa1\027\uffa1\030\uffa1"
        + "\031\uffa1\032\uffa1\033\uffa1\062\uffa1\063\uffa1\001\002\000"
        + "\006\014\161\017\152\001\002\000\054\004\uffa0\005\uffa0"
        + "\006\uffa0\007\uffa0\010\uffa0\011\uffa0\013\uffa0\014\uffa0\016"
        + "\uffa0\017\uffa0\021\uffa0\022\uffa0\023\uffa0\026\uffa0\027\uffa0"
        + "\030\uffa0\031\uffa0\032\uffa0\033\uffa0\062\uffa0\063\uffa0\001"
        + "\002\000\034\003\uffdb\016\uffdb\036\uffdb\037\uffdb\040\uffdb"
        + "\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050"
        + "\uffdb\060\uffdb\001\002\000\054\004\uffa8\005\uffa8\006\uffa8"
        + "\007\uffa8\010\uffa8\011\uffa8\013\uffa8\014\uffa8\016\uffa8\017"
        + "\uffa8\021\uffa8\022\uffa8\023\uffa8\026\uffa8\027\uffa8\030\uffa8"
        + "\031\uffa8\032\uffa8\033\uffa8\062\uffa8\063\uffa8\001\002\000"
        + "\054\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\111\011\117"
        + "\013\113\014\uffb8\016\uffb8\017\uffb8\021\uffb8\022\uffb8\023"
        + "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8"
        + "\062\110\063\uffb8\001\002\000\054\004\122\005\121\006"
        + "\116\007\106\010\111\011\117\013\113\014\uffb9\016\uffb9"
        + "\017\uffb9\021\uffb9\022\uffb9\023\uffb9\026\uffb9\027\uffb9\030"
        + "\uffb9\031\uffb9\032\uffb9\033\uffb9\062\110\063\uffb9\001\002"
        + "\000\034\003\uffdc\016\uffdc\036\uffdc\037\uffdc\040\uffdc\042"
        + "\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc"
        + "\060\uffdc\001\002\000\034\003\uffdd\016\uffdd\036\uffdd\037"
        + "\uffdd\040\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd"
        + "\047\uffdd\050\uffdd\060\uffdd\001\002\000\042\002\uffe5\003"
        + "\uffe5\016\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5"
        + "\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051"
        + "\uffe5\060\uffe5\001\002\000\004\021\060\001\002\000\034"
        + "\003\uffe2\016\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2\043"
        + "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\060\uffe2"
        + "\001\002\000\004\060\177\001\002\000\004\015\175\001"
        + "\002\000\030\003\053\016\051\036\030\037\052\040\022"
        + "\042\006\045\013\046\027\047\044\050\011\060\014\001"
        + "\002\000\026\002\ufff4\003\ufff4\036\ufff4\040\ufff4\042\ufff4"
        + "\045\ufff4\046\ufff4\050\ufff4\051\ufff4\060\ufff4\001\002\000"
        + "\006\014\ufff6\017\ufff6\001\002\000\026\002\ufffb\003\ufffb"
        + "\036\ufffb\040\ufffb\042\ufffb\045\ufffb\046\ufffb\050\ufffb\051"
        + "\ufffb\060\ufffb\001\002\000\014\004\206\005\204\015\210"
        + "\021\211\063\207\001\002\000\040\002\uffd0\003\uffd0\016"
        + "\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0\043\uffd0\044\uffd0"
        + "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\060\uffd0\001"
        + "\002\000\040\002\uffcf\003\uffcf\016\uffcf\036\uffcf\037\uffcf"
        + "\040\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047"
        + "\uffcf\050\uffcf\051\uffcf\060\uffcf\001\002\000\004\021\227"
        + "\001\002\000\004\021\226\001\002\000\004\021\225\001"
        + "\002\000\034\007\062\012\075\015\220\024\061\034\067"
        + "\035\074\053\066\054\065\055\077\056\076\057\073\060"
        + "\072\061\064\001\002\000\032\007\062\012\075\024\061"
        + "\034\067\035\074\053\066\054\065\055\077\056\076\057"
        + "\073\060\072\061\064\001\002\000\040\002\uffca\003\uffca"
        + "\016\uffca\036\uffca\037\uffca\040\uffca\042\uffca\043\uffca\044"
        + "\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\060\uffca"
        + "\001\002\000\044\004\122\005\121\006\116\007\106\010"
        + "\111\011\117\013\113\016\213\022\123\023\105\026\114"
        + "\027\112\030\115\031\104\032\120\033\107\062\110\001"
        + "\002\000\006\021\211\063\207\001\002\000\040\002\uffce"
        + "\003\uffce\016\uffce\036\uffce\037\uffce\040\uffce\042\uffce\043"
        + "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce"
        + "\060\uffce\001\002\000\004\021\uffc8\001\002\000\044\004"
        + "\122\005\121\006\116\007\106\010\111\011\117\013\113"
        + "\021\uffc9\022\123\023\105\026\114\027\112\030\115\031"
        + "\104\032\120\033\107\062\110\001\002\000\006\016\223"
        + "\017\222\001\002\000\032\007\062\012\075\024\061\034"
        + "\067\035\074\053\066\054\065\055\077\056\076\057\073"
        + "\060\072\061\064\001\002\000\046\004\122\005\121\006"
        + "\116\007\106\010\111\011\117\013\113\016\uffa5\017\uffa5"
        + "\022\123\023\105\026\114\027\112\030\115\031\104\032"
        + "\120\033\107\062\110\001\002\000\032\007\062\012\075"
        + "\024\061\034\067\035\074\053\066\054\065\055\077\056"
        + "\076\057\073\060\072\061\064\001\002\000\004\021\uffa6"
        + "\001\002\000\046\004\122\005\121\006\116\007\106\010"
        + "\111\011\117\013\113\016\uffa4\017\uffa4\022\123\023\105"
        + "\026\114\027\112\030\115\031\104\032\120\033\107\062"
        + "\110\001\002\000\040\002\uffcd\003\uffcd\016\uffcd\036\uffcd"
        + "\037\uffcd\040\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046"
        + "\uffcd\047\uffcd\050\uffcd\051\uffcd\060\uffcd\001\002\000\040"
        + "\002\uffcb\003\uffcb\016\uffcb\036\uffcb\037\uffcb\040\uffcb\042"
        + "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb"
        + "\051\uffcb\060\uffcb\001\002\000\040\002\uffcc\003\uffcc\016"
        + "\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc\043\uffcc\044\uffcc"
        + "\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\060\uffcc\001"
        + "\002\000\032\007\062\012\075\024\061\034\067\035\074"
        + "\053\066\054\065\055\077\056\076\057\073\060\072\061"
        + "\064\001\002\000\044\004\122\005\121\006\116\007\106"
        + "\010\111\011\117\013\113\014\232\022\123\023\105\026"
        + "\114\027\112\030\115\031\104\032\120\033\107\062\110"
        + "\001\002\000\004\015\233\001\002\000\030\003\053\016"
        + "\051\036\030\037\052\040\022\042\006\045\013\046\027"
        + "\047\044\050\011\060\014\001\002\000\040\002\uffe6\003"
        + "\uffe6\016\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6"
        + "\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\060"
        + "\uffe6\001\002\000\032\007\062\012\075\024\061\034\067"
        + "\035\074\053\066\054\065\055\077\056\076\057\073\060"
        + "\072\061\064\001\002\000\044\004\122\005\121\006\116"
        + "\007\106\010\111\011\117\013\113\014\237\022\123\023"
        + "\105\026\114\027\112\030\115\031\104\032\120\033\107"
        + "\062\110\001\002\000\004\015\240\001\002\000\030\003"
        + "\053\016\051\036\030\037\052\040\022\042\006\045\013"
        + "\046\027\047\044\050\011\060\014\001\002\000\042\002"
        + "\ufff2\003\ufff2\016\ufff2\036\ufff2\037\ufff2\040\ufff2\041\242"
        + "\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050"
        + "\ufff2\051\ufff2\060\ufff2\001\002\000\004\015\243\001\002"
        + "\000\030\003\053\016\051\036\030\037\052\040\022\042"
        + "\006\045\013\046\027\047\044\050\011\060\014\001\002"
        + "\000\040\002\ufff1\003\ufff1\016\ufff1\036\ufff1\037\ufff1\040"
        + "\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1"
        + "\050\ufff1\051\ufff1\060\ufff1\001\002\000\026\002\uffff\003"
        + "\uffff\036\uffff\040\uffff\042\uffff\045\uffff\046\uffff\050\uffff"
        + "\051\uffff\060\uffff\001\002\000\004\002\001\001\002\000"
        + "\044\004\122\005\121\006\116\007\106\010\111\011\117"
        + "\013\113\022\123\023\105\026\114\027\112\030\115\031"
        + "\104\032\120\033\107\062\110\063\250\001\002\000\032"
        + "\007\062\012\075\024\061\034\067\035\074\053\066\054"
        + "\065\055\077\056\076\057\073\060\072\061\064\001\002"
        + "\000\044\004\122\005\121\006\116\007\106\010\111\011"
        + "\117\013\113\022\123\023\105\026\114\027\112\030\115"
        + "\031\104\032\120\033\107\062\110\063\252\001\002\000"
        + "\032\007\062\012\075\024\061\034\067\035\074\053\066"
        + "\054\065\055\077\056\076\057\073\060\072\061\064\001"
        + "\002\000\044\004\122\005\121\006\116\007\106\010\111"
        + "\011\117\013\113\022\123\023\105\026\114\027\112\030"
        + "\115\031\104\032\120\033\107\062\110\063\254\001\002"
        + "\000\004\015\255\001\002\000\030\003\053\016\051\036"
        + "\030\037\052\040\022\042\006\045\013\046\027\047\044"
        + "\050\011\060\014\001\002\000\040\002\uffe7\003\uffe7\016"
        + "\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7\043\uffe7\044\uffe7"
        + "\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\060\uffe7\001"
        + "\002\000\032\007\062\012\075\024\061\034\067\035\074"
        + "\053\066\054\065\055\077\056\076\057\073\060\072\061"
        + "\064\001\002\000\044\004\122\005\121\006\116\007\106"
        + "\010\111\011\117\013\113\014\261\022\123\023\105\026"
        + "\114\027\112\030\115\031\104\032\120\033\107\062\110"
        + "\001\002\000\004\021\uffd7\001\002\000\026\002\ufffa\003"
        + "\ufffa\036\ufffa\040\ufffa\042\ufffa\045\ufffa\046\ufffa\050\ufffa"
        + "\051\ufffa\060\ufffa\001\002\000\032\007\062\012\075\024"
        + "\061\034\067\035\074\053\066\054\065\055\077\056\076"
        + "\057\073\060\072\061\064\001\002\000\044\004\122\005"
        + "\121\006\116\007\106\010\111\011\117\013\113\014\265"
        + "\022\123\023\105\026\114\027\112\030\115\031\104\032"
        + "\120\033\107\062\110\001\002\000\004\015\266\001\002"
        + "\000\010\016\273\043\275\044\270\001\002\000\010\016"
        + "\273\043\275\044\270\001\002\000\004\063\301\001\002"
        + "\000\010\016\uffea\043\uffea\044\uffea\001\002\000\040\002"
        + "\uffec\003\uffec\016\uffec\036\uffec\037\uffec\040\uffec\042\uffec"
        + "\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051"
        + "\uffec\060\uffec\001\002\000\040\002\uffee\003\uffee\016\uffee"
        + "\036\uffee\037\uffee\040\uffee\042\uffee\043\uffee\044\uffee\045"
        + "\uffee\046\uffee\047\uffee\050\uffee\051\uffee\060\uffee\001\002"
        + "\000\040\002\ufff0\003\ufff0\016\ufff0\036\ufff0\037\ufff0\040"
        + "\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0"
        + "\050\ufff0\051\ufff0\060\ufff0\001\002\000\032\007\062\012"
        + "\075\024\061\034\067\035\074\053\066\054\065\055\077"
        + "\056\076\057\073\060\072\061\064\001\002\000\044\004"
        + "\122\005\121\006\116\007\106\010\111\011\117\013\113"
        + "\022\123\023\105\026\114\027\112\030\115\031\104\032"
        + "\120\033\107\062\110\063\277\001\002\000\034\003\171"
        + "\016\uffe8\036\030\037\052\040\022\042\006\043\uffe8\044"
        + "\uffe8\045\013\046\027\047\044\050\011\060\014\001\002"
        + "\000\034\003\171\016\uffe9\036\030\037\052\040\022\042"
        + "\006\043\uffe9\044\uffe9\045\013\046\027\047\044\050\011"
        + "\060\014\001\002\000\026\003\171\036\030\037\052\040"
        + "\022\042\006\045\013\046\027\047\044\050\011\060\014"
        + "\001\002\000\030\003\171\016\303\036\030\037\052\040"
        + "\022\042\006\045\013\046\027\047\044\050\011\060\014"
        + "\001\002\000\040\002\uffef\003\uffef\016\uffef\036\uffef\037"
        + "\uffef\040\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef"
        + "\047\uffef\050\uffef\051\uffef\060\uffef\001\002\000\010\016"
        + "\uffeb\043\uffeb\044\uffeb\001\002\000\040\002\uffed\003\uffed"
        + "\016\uffed\036\uffed\037\uffed\040\uffed\042\uffed\043\uffed\044"
        + "\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\060\uffed"
        + "\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\303\000\040\005\017\017\024\020\023\022\015\030"
        + "\006\040\030\056\025\057\007\060\011\061\004\063\003"
        + "\124\020\125\031\127\016\130\014\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\014\002\070\032\246\125\101\132\100\133\062\001\001"
        + "\000\006\131\202\134\204\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\034"
        + "\017\024\020\023\022\015\030\006\040\244\056\025\057"
        + "\007\060\011\061\004\063\003\125\031\127\016\130\014"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\130\201\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\116\036"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\036\012\041\013\046\017\024\020\023\022\045"
        + "\030\042\056\025\057\007\060\011\061\004\125\054\127"
        + "\047\130\044\135\053\001\001\000\032\017\024\020\023"
        + "\022\045\030\042\056\025\057\007\060\011\061\004\125"
        + "\054\127\047\130\044\135\171\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\014"
        + "\002\070\032\067\125\101\132\100\133\062\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\014\002"
        + "\070\032\164\125\101\132\100\133\062\001\001\000\014"
        + "\002\070\032\163\125\101\132\100\133\062\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\014\002\070\032\102\125\101\132\100\133\062\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\014\002\070\032\141\125\101\132\100\133\062\001\001"
        + "\000\014\002\070\032\140\125\101\132\100\133\062\001"
        + "\001\000\014\002\070\032\137\125\101\132\100\133\062"
        + "\001\001\000\014\002\070\032\136\125\101\132\100\133"
        + "\062\001\001\000\014\002\070\032\135\125\101\132\100"
        + "\133\062\001\001\000\014\002\070\032\134\125\101\132"
        + "\100\133\062\001\001\000\014\002\070\032\133\125\101"
        + "\132\100\133\062\001\001\000\014\002\070\032\132\125"
        + "\101\132\100\133\062\001\001\000\014\002\070\032\131"
        + "\125\101\132\100\133\062\001\001\000\014\002\070\032"
        + "\130\125\101\132\100\133\062\001\001\000\014\002\070"
        + "\032\127\125\101\132\100\133\062\001\001\000\014\002"
        + "\070\032\126\125\101\132\100\133\062\001\001\000\014"
        + "\002\070\032\125\125\101\132\100\133\062\001\001\000"
        + "\002\001\001\000\002\001\001\000\014\002\070\032\124"
        + "\125\101\132\100\133\062\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\016\002\070\023\150"
        + "\032\146\125\101\132\100\133\062\001\001\000\014\002"
        + "\070\032\145\125\101\132\100\133\062\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\014\002\070\032\153\125\101\132\100\133\062"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\016\002\070\023\157\032\146\125\101\132\100"
        + "\133\062\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\036\012\041\013"
        + "\175\017\024\020\023\022\045\030\042\056\025\057\007"
        + "\060\011\061\004\125\054\127\047\130\044\135\053\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\006\131\202\134\204\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\020\002\070\015\216\032\215\034\214\125"
        + "\101\132\100\133\062\001\001\000\014\002\070\032\211"
        + "\125\101\132\100\133\062\001\001\000\002\001\001\000"
        + "\002\001\001\000\006\131\213\134\204\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\014\002\070\032\220\125\101\132\100\133\062"
        + "\001\001\000\002\001\001\000\014\002\070\032\223\125"
        + "\101\132\100\133\062\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\014\002\070\032\230\125\101\132\100\133\062"
        + "\001\001\000\002\001\001\000\002\001\001\000\036\012"
        + "\041\013\233\017\024\020\023\022\045\030\042\056\025"
        + "\057\007\060\011\061\004\125\054\127\047\130\044\135"
        + "\053\001\001\000\002\001\001\000\014\002\070\032\235"
        + "\125\101\132\100\133\062\001\001\000\002\001\001\000"
        + "\002\001\001\000\036\012\041\013\240\017\024\020\023"
        + "\022\045\030\042\056\025\057\007\060\011\061\004\125"
        + "\054\127\047\130\044\135\053\001\001\000\002\001\001"
        + "\000\002\001\001\000\036\012\041\013\243\017\024\020"
        + "\023\022\045\030\042\056\025\057\007\060\011\061\004"
        + "\125\054\127\047\130\044\135\053\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\014\002\070\032\250\125\101\132\100\133\062\001"
        + "\001\000\002\001\001\000\014\002\070\032\252\125\101"
        + "\132\100\133\062\001\001\000\002\001\001\000\002\001"
        + "\001\000\036\012\041\013\255\017\024\020\023\022\045"
        + "\030\042\056\025\057\007\060\011\061\004\125\054\127"
        + "\047\130\044\135\053\001\001\000\002\001\001\000\014"
        + "\002\070\032\257\125\101\132\100\133\062\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\014"
        + "\002\070\032\263\125\101\132\100\133\062\001\001\000"
        + "\002\001\001\000\002\001\001\000\012\070\270\071\271"
        + "\072\273\115\266\001\001\000\006\070\303\071\304\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\014\002\070\032"
        + "\275\125\101\132\100\133\062\001\001\000\002\001\001"
        + "\000\034\012\277\017\024\020\023\022\045\030\042\056"
        + "\025\057\007\060\011\061\004\125\054\127\047\130\044"
        + "\135\053\001\001\000\032\017\024\020\023\022\045\030"
        + "\042\056\025\057\007\060\011\061\004\125\054\127\047"
        + "\130\044\135\171\001\001\000\034\012\301\017\024\020"
        + "\023\022\045\030\042\056\025\057\007\060\011\061\004"
        + "\125\054\127\047\130\044\135\053\001\001\000\032\017"
        + "\024\020\023\022\045\030\042\056\025\057\007\060\011"
        + "\061\004\125\054\127\047\130\044\135\171\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

//Codigo visible
    public ParserTree parserTree = new ParserTree("hola");
    public ArrayList<Symbol> error = new ArrayList<Symbol>();
    public Metodo metodo = new Metodo();
    public ArrayList<String> ejecucion = new ArrayList();
    public ArrayList<ParserTree> declaracion = new ArrayList<ParserTree>();
    String expresion = "";

    public void syntax_error(Symbol s) {
        System.err.println("Error Sintactico en la Linea " + (s.right + 1) + " Columna " + s.left + ".  " + s.value + " no reconocido.");
        this.error.add(s);
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.err.println("Error Sintactico en la Linea " + (s.right + 1) + "Columna " + s.left + ". " + s.value + " no reconocido.");
        this.error.add(s);
        System.err.println(s);
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$parser$actions {

//Codigo de acciones
    private final parser parser;

    /**
     * Constructor
     */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack CUP$parser$stack,
            int CUP$parser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 99: // parametro ::= exp 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("parametro");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro", 17, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 98: // parametro ::= parametro COMA exp 
            {
                ParserTree RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                b.addChildren(a);
                RESULT = b;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro", 17, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 97: // getMetodo ::= ID PUNTO ID PAREA parametro PAREC 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                String b = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                ParserTree arbol = new ParserTree("getMetodo");
                Node nodo = new Node(new Term("ID"), new Token(new Location(aleft, aright), a, "ID"));
                Node nodob = new Node(new Term("ID"), new Token(new Location(bleft, bright), b, "ID"));
                arbol.addChildren(nodo, nodob);
                arbol.addChildren(c);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("getMetodo", 83, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // getMetodo ::= ID PUNTO ID PAREA PAREC 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                String b = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                ParserTree arbol = new ParserTree("getMetodo");
                Node nodo = new Node(new Term("ID"), new Token(new Location(aleft, aright), a, "ID"));
                Node nodob = new Node(new Term("ID"), new Token(new Location(bleft, bright), b, "ID"));
                arbol.addChildren(nodo, nodob);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("getMetodo", 83, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // getMetodo ::= ID PAREA PAREC 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                ParserTree arbol = new ParserTree("getMetodo");
                Node nodo = new Node(new Term("ID"), new Token(new Location(aleft, aright), a, "ID"));
                arbol.addChildren(nodo);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("getMetodo", 83, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // getMetodo ::= ID PAREA parametro PAREC 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                ParserTree arbol = new ParserTree("getMetodo");
                Node nodo = new Node(new Term("ID"), new Token(new Location(aleft, aright), a, "ID"));
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("getMetodo", 83, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // arreglo ::= arreglo COMA exp 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                a.addChildren(b);
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // arreglo ::= LLV1 exp 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("arreglo");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // arreglo_asignar ::= arreglo LLV2 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_asignar", 26, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // vector ::= ID LLV1 exp 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("vector");
                Node nodo = new Node(new Term("ID"), new Token(new Location(aleft, aright), a, "ID"));
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("vector", 89, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // valorVector ::= vector LLV2 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("valorVector", 88, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // valor ::= FALSO 
            {
                Node RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("FALSO"), new Token(new Location(aleft, aright), a, "VERDADERO"));
                RESULT = nodo;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("valor", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // valor ::= VERDADERO 
            {
                Node RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("VERDADERO"), new Token(new Location(aleft, aright), a, "VERDADERO"));
                RESULT = nodo;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("valor", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // valor ::= CADENA 
            {
                Node RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("CADE"), new Token(new Location(aleft, aright), a, "CADE"));
                RESULT = nodo;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("valor", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // valor ::= CARACTER 
            {
                Node RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("CARACTER"), new Token(new Location(aleft, aright), a, "CARACTER"));
                RESULT = nodo;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("valor", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // valor ::= DATETIME 
            {
                Node RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("DATETIME"), new Token(new Location(aleft, aright), a, "DATETIME"));
                RESULT = nodo;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("valor", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // valor ::= DATE 
            {
                Node RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("DATE"), new Token(new Location(aleft, aright), a, "DATE"));
                RESULT = nodo;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("valor", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // valor ::= NDECIMAL 
            {
                Node RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("NDECIMAL"), new Token(new Location(aleft, aright), a, "NDECIMAL"));
                RESULT = nodo;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("valor", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // valor ::= NUMERO 
            {
                Node RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("NUMERO"), new Token(new Location(aleft, aright), a, "NUMERO"));
                RESULT = nodo;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("valor", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // valor ::= ID 
            {
                Node RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("ID"), new Token(new Location(aleft, aright), a, "ID"));
                RESULT = nodo;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("valor", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // exp ::= valorVector 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // exp ::= getMetodo 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // exp ::= valor 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Node a = (Node) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // exp ::= PAREA exp PAREC 
            {
                ParserTree RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = c;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // exp ::= exp MENOSMENOS 
            {
                ParserTree RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("MENOSMENOS"), new Token(new Location(aleft, aright), a, "MENOSMENOS"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(b);
                arbol.addChildren(nodo);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // exp ::= exp MASMAS 
            {
                ParserTree RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("MASMAS"), new Token(new Location(aleft, aright), a, "MASMAS"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(b);
                arbol.addChildren(nodo);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // exp ::= MENOS exp 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("MENOS"), new Token(new Location(aleft, aright), a, "MENOS"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // exp ::= NEL exp 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("NEL"), new Token(new Location(aleft, aright), a, "NEL"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // exp ::= exp Y exp 
            {
                ParserTree RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("AND"), new Token(new Location(aleft, aright), a, "AND"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(c);
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // exp ::= exp OR exp 
            {
                ParserTree RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("OR"), new Token(new Location(aleft, aright), a, "OR"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(c);
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // exp ::= exp NOIGUAL exp 
            {
                ParserTree RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("NOIGUAL"), new Token(new Location(aleft, aright), a, "NOIGUAL"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(c);
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // exp ::= exp IGUALIGUAL exp 
            {
                ParserTree RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("IGUAL"), new Token(new Location(aleft, aright), a, "IGUAL"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(c);
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // exp ::= exp MENORIGUAL exp 
            {
                ParserTree RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("MENORIGUAL"), new Token(new Location(aleft, aright), a, "MENORIGUAL"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(c);
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // exp ::= exp MAYORIGUAL exp 
            {
                ParserTree RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("MAYORIGUAL"), new Token(new Location(aleft, aright), a, "MAYORIGUAL"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(c);
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // exp ::= exp MENORQUE exp 
            {
                ParserTree RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("MENORQUE"), new Token(new Location(aleft, aright), a, "MENORQUE"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(c);
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // exp ::= exp MAYORQUE exp 
            {
                ParserTree RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("MAYORQUE"), new Token(new Location(aleft, aright), a, "MAYORQUE"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(c);
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // exp ::= exp ELEVA exp 
            {
                ParserTree RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("ELEVA"), new Token(new Location(aleft, aright), a, "ELEVA"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(c);
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // exp ::= exp MOD exp 
            {
                ParserTree RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("MOD"), new Token(new Location(aleft, aright), a, "MOD"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(c);
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // exp ::= exp DIV exp 
            {
                ParserTree RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("DIV"), new Token(new Location(aleft, aright), a, "DIV"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(c);
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // exp ::= exp POR exp 
            {
                ParserTree RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("POR"), new Token(new Location(aleft, aright), a, "POR"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(c);
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // exp ::= exp MENOS exp 
            {
                ParserTree RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("MENOS"), new Token(new Location(aleft, aright), a, "MENOS"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(c);
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // exp ::= exp MAS exp 
            {
                ParserTree RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("MAS"), new Token(new Location(aleft, aright), a, "MAS"));
                ParserTree arbol = new ParserTree("exp");
                arbol.addChildren(c);
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("exp", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // asigna ::= DOSPUNTOS arreglo_asignar 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("asignall");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna", 90, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // asigna ::= DOSPUNTOS exp 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("asigna");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna", 90, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // asignar ::= PUNTOCOMA 
            {
                ParserTree RESULT = null;
                ParserTree arbol = new ParserTree("nada");
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar", 87, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // asignar ::= asigna PUNTOCOMA 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                ParserTree arbol = new ParserTree("asignar");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar", 87, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // asignacion ::= ID MENOSMENOS PUNTOCOMA 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                ParserTree arbol = new ParserTree("asignacion--");
                Node nodo = new Node(new Term("ID"), new Token(new Location(aleft, aright), a, "ID"));
                arbol.addChildren(nodo);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion", 86, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // asignacion ::= ID MASMAS PUNTOCOMA 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                ParserTree arbol = new ParserTree("asignacion++");
                Node nodo = new Node(new Term("ID"), new Token(new Location(aleft, aright), a, "ID"));
                arbol.addChildren(nodo);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion", 86, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // asignacion ::= ID LLV1 exp LLV2 asignar 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("asignacionll");
                Node nodo = new Node(new Term("ID"), new Token(new Location(aleft, aright), a, "ID"));
                arbol.addChildren(nodo);
                arbol.addChildren(c);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion", 86, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // asignacion ::= ID asignar 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("asignacion");
                Node nodo = new Node(new Term("ID"), new Token(new Location(aleft, aright), a, "ID"));
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion", 86, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // declaracion ::= DIMV asignacion 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("declaracion");
                arbol.addChildren(a);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion", 85, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // control ::= hacer 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("control");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("control", 16, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // control ::= switch 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("control");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("control", 16, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // control ::= para 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("control");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("control", 16, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // control ::= mientras 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("control");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("control", 16, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // control ::= if2 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("control");;
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("control", 16, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // control ::= if1 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("control");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("control", 16, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // imprimir ::= IMPRIMIR PAREA exp PAREC 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                ParserTree arbol = new ParserTree("imprimir");
                Node nodo = new Node(new Term("imprimir"), new Token(new Location(aleft, aright), a, "imprimir"));
                arbol.addChildren(b);
                arbol.addChildren(nodo);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("imprimir", 22, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // listacuerpo ::= getMetodo PUNTOCOMA 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                if (a.root.childNode.size() > 1) {
                    this.parser.ejecucion.add(a.root.childNode.get(0).token.getValueString() + "_" + a.root.childNode.get(1).childNode.size());
                } else {
                    this.parser.ejecucion.add(a.root.childNode.get(0).token.getValueString() + "_0");
                }
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo", 91, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // listacuerpo ::= error PUNTOCOMA 
            {
                ParserTree RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo", 91, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // listacuerpo ::= RETORNAR PUNTOCOMA 
            {
                ParserTree RESULT = null;
                ParserTree arbol = new ParserTree("retornar");
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo", 91, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // listacuerpo ::= RETORNAR exp PUNTOCOMA 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                ParserTree arbol = new ParserTree("retornar");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo", 91, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // listacuerpo ::= TERMINAR PUNTOCOMA 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

                ParserTree arbol = new ParserTree("TERMINAR");
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo", 91, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // listacuerpo ::= imprimir PUNTOCOMA 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo", 91, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // listacuerpo ::= asignacion 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo", 91, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // listacuerpo ::= declaracion 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo", 91, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // listacuerpo ::= control 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo", 91, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // cuerpo ::= listacuerpo 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("cuerpo");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo", 8, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // cuerpo ::= cuerpo listacuerpo 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                a.addChildren(b);
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo", 8, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // cuerpo1 ::= error LLV2 
            {
                ParserTree RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo1", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // cuerpo1 ::= LLV2 
            {
                ParserTree RESULT = null;
                ParserTree arbol = new ParserTree("nada");
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo1", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // cuerpo1 ::= cuerpo LLV2 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo1", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // mientras ::= MIENTRAS PAREA exp PAREC LLV1 cuerpo1 
            {
                ParserTree RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
                String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("mientras", eleft, eright);
                arbol.addChildren(a);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras", 45, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // para ::= PARA exp DOSPUNTOS exp DOSPUNTOS exp DOSPUNTOS LLV1 cuerpo1 
            {
                ParserTree RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)).right;
                String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                ParserTree d = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("para");
                arbol.addChildren(a);
                arbol.addChildren(c);
                arbol.addChildren(d);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("para", 47, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // caso ::= CASO exp DOSPUNTOS 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                ParserTree arbol = new ParserTree("caso");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("caso", 54, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // caso ::= CASO exp DOSPUNTOS cuerpo 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("caso");
                arbol.addChildren(a);
                arbol.addChildren(b);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("caso", 54, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // swich_cuerpo1 ::= caso 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("cuerpo_switch");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("swich_cuerpo1", 75, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // swich_cuerpo1 ::= swich_cuerpo1 caso 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                a.addChildren(b);
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("swich_cuerpo1", 75, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // swich_cuerpo ::= defecto 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("cuerpo_switch");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("swich_cuerpo", 56, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // swich_cuerpo ::= swich_cuerpo1 defecto 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                a.addChildren(b);
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("swich_cuerpo", 56, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // defecto ::= LLV2 
            {
                ParserTree RESULT = null;

                ParserTree arbol = new ParserTree("defecto");
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("defecto", 55, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // defecto ::= DEFECTO DOSPUNTOS cuerpo LLV2 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                ParserTree arbol = new ParserTree("defecto");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("defecto", 55, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // switch ::= SELECCIONA PAREA exp PAREC LLV1 swich_cuerpo 
            {
                ParserTree RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
                String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("selecciona", eleft, eright);
                arbol.addChildren(a);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("switch", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // if2 ::= SI PAREA exp PAREC LLV1 cuerpo1 SINO LLV1 cuerpo1 
            {
                ParserTree RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)).right;
                String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("if2", eleft, eright);
                arbol.addChildren(a);
                arbol.addChildren(b);
                arbol.addChildren(c);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if2", 14, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // if1 ::= SI PAREA exp PAREC LLV1 cuerpo1 
            {
                ParserTree RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
                String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("if1", eleft, eright);
                arbol.addChildren(a);
                arbol.addChildren(b);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if1", 13, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // metodo ::= FUNCION ID PAREA PAREC LLV1 cuerpo1 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Node nodo = new Node(new Term("ID"), new Token(new Location(aleft, aright), a, "ID"));
                ParserTree arbol = new ParserTree("metodo");
                arbol.addChildren(nodo);
                arbol.addChildren(c);
                this.parser.metodo.insertar(a + "_" + 0, null, c.root);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo", 49, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // metodo ::= FUNCION ID PAREA parametroID PAREC LLV1 cuerpo1 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree c = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Node nodo = new Node(new Term("ID"), new Token(new Location(aleft, aright), a, "ID"));
                ParserTree arbol = new ParserTree("metodo");
                arbol.addChildren(nodo);
                arbol.addChildren(b);
                arbol.addChildren(c);
                this.parser.metodo.insertar(a + "_" + b.root.childNode.size(), b.root, c.root);
                RESULT = arbol;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo", 49, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // parametroID ::= ID 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                ParserTree arbol = new ParserTree("parametro");
                Node nodo = new Node(new Term("ID"), new Token(new Location(aleft, aright), a, "ID"));
                arbol.addChildren(nodo);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroID", 76, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // parametroID ::= parametroID COMA ID 
            {
                ParserTree RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Node nodo = new Node(new Term("ID"), new Token(new Location(aleft, aright), a, "ID"));
                b.addChildren(nodo);
                RESULT = b;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroID", 76, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // principal ::= error 
            {
                ParserTree RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("principal", 30, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // principal ::= asignacion 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("principal", 30, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // principal ::= control 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("principal", 30, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // principal ::= imprimir PUNTOCOMA 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("principal", 30, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // principal ::= getMetodo PUNTOCOMA 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                if (a.root.childNode.size() > 1) {
                    this.parser.ejecucion.add(a.root.childNode.get(0).token.getValueString() + "_" + a.root.childNode.get(1).childNode.size());
                } else {
                    this.parser.ejecucion.add(a.root.childNode.get(0).token.getValueString() + "_0");
                }
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("principal", 30, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // principal ::= declaracion 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                this.parser.declaracion.add(a);
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("principal", 30, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // principal ::= metodo 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("principal", 30, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // js ::= principal 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                ParserTree arbol = new ParserTree("principal");
                arbol.addChildren(a);
                RESULT = arbol;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("js", 82, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // js ::= js principal 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree b = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                a.addChildren(b);
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("js", 82, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // inicial ::= js 
            {
                ParserTree RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ParserTree a = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                this.parser.parserTree = a;
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= inicial EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ParserTree start_val = (ParserTree) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}
