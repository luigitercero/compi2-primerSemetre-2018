
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 09 16:51:10 CST 2018
//----------------------------------------------------

package js.org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;
import com.TreeParser.*;
import java.util.ArrayList;
import Simbol.Metodo.Metodo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 09 16:51:10 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\006\003\000\002\125" +
    "\004\000\002\125\003\000\002\041\003\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\003\000" +
    "\002\041\004\000\002\041\004\000\002\041\003\000\002" +
    "\041\004\000\002\137\010\000\002\140\012\000\002\140" +
    "\012\000\002\140\012\000\002\140\012\000\002\140\015" +
    "\000\002\140\015\000\002\022\007\000\002\022\003\000" +
    "\002\117\005\000\002\117\003\000\002\064\011\000\002" +
    "\064\010\000\002\020\010\000\002\021\013\000\002\057" +
    "\010\000\002\072\006\000\002\072\003\000\002\073\004" +
    "\000\002\073\003\000\002\116\004\000\002\116\003\000" +
    "\002\071\006\000\002\071\005\000\002\062\014\000\002" +
    "\060\010\000\002\014\004\000\002\014\003\000\002\013" +
    "\004\000\002\013\003\000\002\136\003\000\002\136\004" +
    "\000\002\136\004\000\002\136\004\000\002\136\004\000" +
    "\002\136\004\000\002\136\005\000\002\136\005\000\002" +
    "\136\004\000\002\136\003\000\002\136\004\000\002\136" +
    "\004\000\002\136\004\000\002\031\006\000\002\004\006" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\130\004\000\002\131\004\000\002\131\007\000\002\131" +
    "\004\000\002\131\004\000\002\131\003\000\002\131\006" +
    "\000\002\132\003\000\002\135\004\000\002\135\004\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\004\000\002\033\004\000\002" +
    "\033\004\000\002\033\004\000\002\033\005\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\133\004\000\002\134\005\000\002\134\005" +
    "\000\002\035\004\000\002\016\004\000\002\016\005\000" +
    "\002\142\007\000\002\142\005\000\002\143\003\000\002" +
    "\143\003\000\002\126\006\000\002\126\005\000\002\024" +
    "\005\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\030\003\025\036\035\040\024\042\007\045" +
    "\014\046\034\050\011\051\040\060\015\064\021\065\037" +
    "\001\002\000\032\002\ufffd\003\ufffd\036\ufffd\040\ufffd\042" +
    "\ufffd\045\ufffd\046\ufffd\050\ufffd\051\ufffd\060\ufffd\064\ufffd" +
    "\065\ufffd\001\002\000\044\002\uffc4\003\uffc4\016\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\051\uffc4\060\uffc4\064\uffc4\065" +
    "\uffc4\001\002\000\004\021\u0114\001\002\000\004\012\u0101" +
    "\001\002\000\044\002\uffc5\003\uffc5\016\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\060\uffc5\064\uffc5\065\uffc5\001" +
    "\002\000\004\012\376\001\002\000\044\002\uffc2\003\uffc2" +
    "\016\uffc2\036\uffc2\037\uffc2\040\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\060\uffc2" +
    "\064\uffc2\065\uffc2\001\002\000\004\021\375\001\002\000" +
    "\004\012\364\001\002\000\020\004\273\005\272\012\165" +
    "\015\344\021\uffbc\025\343\063\274\001\002\000\004\021" +
    "\342\001\002\000\032\002\ufff9\003\ufff9\036\ufff9\040\ufff9" +
    "\042\ufff9\045\ufff9\046\ufff9\050\ufff9\051\ufff9\060\ufff9\064" +
    "\ufff9\065\ufff9\001\002\000\004\021\341\001\002\000\004" +
    "\025\332\001\002\000\004\002\331\001\002\000\032\002" +
    "\000\003\025\036\035\040\024\042\007\045\014\046\034" +
    "\050\011\051\040\060\015\064\021\065\037\001\002\000" +
    "\004\012\320\001\002\000\032\002\ufff6\003\ufff6\036\ufff6" +
    "\040\ufff6\042\ufff6\045\ufff6\046\ufff6\050\ufff6\051\ufff6\060" +
    "\ufff6\064\ufff6\065\ufff6\001\002\000\004\021\317\001\002" +
    "\000\044\002\uffc6\003\uffc6\016\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\060\uffc6\064\uffc6\065\uffc6\001\002\000" +
    "\044\002\uffc7\003\uffc7\016\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\060\uffc7\064\uffc7\065\uffc7\001\002\000\004" +
    "\025\310\001\002\000\044\002\uffc3\003\uffc3\016\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\051\uffc3\060\uffc3\064\uffc3\065" +
    "\uffc3\001\002\000\032\002\ufffe\003\ufffe\036\ufffe\040\ufffe" +
    "\042\ufffe\045\ufffe\046\ufffe\050\ufffe\051\ufffe\060\ufffe\064" +
    "\ufffe\065\ufffe\001\002\000\004\012\303\001\002\000\004" +
    "\060\266\001\002\000\010\015\067\021\265\025\066\001" +
    "\002\000\004\012\262\001\002\000\004\060\041\001\002" +
    "\000\004\012\042\001\002\000\006\014\045\060\043\001" +
    "\002\000\006\014\uffea\017\uffea\001\002\000\006\014\256" +
    "\017\255\001\002\000\004\015\046\001\002\000\034\003" +
    "\062\016\060\036\035\037\061\040\024\042\007\045\014" +
    "\046\034\047\052\050\011\060\015\064\021\065\037\001" +
    "\002\000\034\003\062\016\253\036\035\037\061\040\024" +
    "\042\007\045\014\046\034\047\052\050\011\060\015\064" +
    "\021\065\037\001\002\000\004\021\252\001\002\000\004" +
    "\021\251\001\002\000\004\021\250\001\002\000\004\021" +
    "\247\001\002\000\004\021\246\001\002\000\040\003\uffd6" +
    "\016\uffd6\036\uffd6\037\uffd6\040\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\060\uffd6\064\uffd6" +
    "\065\uffd6\001\002\000\004\021\245\001\002\000\032\002" +
    "\uffe8\003\uffe8\036\uffe8\040\uffe8\042\uffe8\045\uffe8\046\uffe8" +
    "\050\uffe8\051\uffe8\060\uffe8\064\uffe8\065\uffe8\001\002\000" +
    "\050\002\uffd9\003\uffd9\014\uffd9\016\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\060\uffd9\064\uffd9\065\uffd9" +
    "\001\002\000\040\007\072\012\107\015\235\021\236\024" +
    "\071\034\077\035\105\053\076\054\075\055\111\056\110" +
    "\057\104\060\103\061\074\064\106\001\002\000\040\003" +
    "\uffcd\016\uffcd\036\uffcd\037\uffcd\040\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\060\uffcd\064" +
    "\uffcd\065\uffcd\001\002\000\004\021\231\001\002\000\040" +
    "\003\uffd7\016\uffd7\036\uffd7\037\uffd7\040\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\060\uffd7" +
    "\064\uffd7\065\uffd7\001\002\000\010\015\067\021\070\025" +
    "\066\001\002\000\004\060\223\001\002\000\034\007\072" +
    "\012\107\024\071\034\077\035\105\053\076\054\075\055" +
    "\111\056\110\057\104\060\103\061\074\064\106\001\002" +
    "\000\040\003\uffcc\016\uffcc\036\uffcc\037\uffcc\040\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\060\uffcc\064\uffcc\065\uffcc\001\002\000\034\007\072\012" +
    "\107\024\071\034\077\035\105\053\076\054\075\055\111" +
    "\056\110\057\104\060\103\061\074\064\106\001\002\000" +
    "\034\007\072\012\107\024\071\034\077\035\105\053\076" +
    "\054\075\055\111\056\110\057\104\060\103\061\074\064" +
    "\106\001\002\000\004\016\220\001\002\000\054\004\uff99" +
    "\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\013\uff99\014" +
    "\uff99\016\uff99\017\uff99\021\uff99\022\uff99\023\uff99\026\uff99" +
    "\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\062\uff99\063" +
    "\uff99\001\002\000\054\004\uff9b\005\uff9b\006\uff9b\007\uff9b" +
    "\010\uff9b\011\uff9b\013\uff9b\014\uff9b\016\uff9b\017\uff9b\021" +
    "\uff9b\022\uff9b\023\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\062\uff9b\063\uff9b\001\002\000\054\004" +
    "\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\013\uff9c" +
    "\014\uff9c\016\uff9c\017\uff9c\021\uff9c\022\uff9c\023\uff9c\026" +
    "\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\062\uff9c" +
    "\063\uff9c\001\002\000\054\004\uff98\005\uff98\006\uff98\007" +
    "\uff98\010\uff98\011\uff98\013\uff98\014\uff98\016\uff98\017\uff98" +
    "\021\uff98\022\uff98\023\uff98\026\uff98\027\uff98\030\uff98\031" +
    "\uff98\032\uff98\033\uff98\062\uff98\063\uff98\001\002\000\004" +
    "\025\214\001\002\000\044\004\136\005\135\006\131\007" +
    "\122\010\125\011\133\013\127\016\176\022\137\023\121" +
    "\026\130\027\126\030\132\031\120\032\134\033\123\062" +
    "\124\001\002\000\054\004\uffa4\005\uffa4\006\uffa4\007\uffa4" +
    "\010\uffa4\011\uffa4\013\uffa4\014\uffa4\016\uffa4\017\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\062\uffa4\063\uffa4\001\002\000\062\004" +
    "\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\165" +
    "\013\uff9f\014\uff9f\015\166\016\uff9f\017\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\025\uff8e\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\033\uff9f\062\uff9f\063\uff9f\001\002\000\054\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\013\uff9a" +
    "\014\uff9a\016\uff9a\017\uff9a\021\uff9a\022\uff9a\023\uff9a\026" +
    "\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\062\uff9a" +
    "\063\uff9a\001\002\000\054\004\uff97\005\uff97\006\uff97\007" +
    "\uff97\010\uff97\011\uff97\013\uff97\014\uff97\016\uff97\017\uff97" +
    "\021\uff97\022\uff97\023\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\032\uff97\033\uff97\062\uff97\063\uff97\001\002\000\004" +
    "\025\160\001\002\000\034\007\072\012\107\024\071\034" +
    "\077\035\105\053\076\054\075\055\111\056\110\057\104" +
    "\060\103\061\074\064\106\001\002\000\054\004\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\013\uff9d\014\uff9d" +
    "\016\uff9d\017\uff9d\021\uff9d\022\uff9d\023\uff9d\026\uff9d\027" +
    "\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\062\uff9d\063\uff9d" +
    "\001\002\000\054\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010" +
    "\uff9e\011\uff9e\013\uff9e\014\uff9e\016\uff9e\017\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\062\uff9e\063\uff9e\001\002\000\054\004\uffa1" +
    "\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\013\uffa1\014" +
    "\uffa1\016\uffa1\017\uffa1\021\uffa1\022\uffa1\023\uffa1\026\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\062\uffa1\063" +
    "\uffa1\001\002\000\054\004\uffa2\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\013\uffa2\014\uffa2\016\uffa2\017\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\062\uffa2\063\uffa2\001\002\000\054\004" +
    "\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\013\uffa0" +
    "\014\uffa0\016\uffa0\017\uffa0\021\uffa0\022\uffa0\023\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\062\uffa0" +
    "\063\uffa0\001\002\000\060\004\uffa3\005\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\013\uffa3\014\uffa3\015\116\016\uffa3" +
    "\017\uffa3\021\uffa3\022\uffa3\023\uffa3\025\uff8d\026\uffa3\027" +
    "\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\062\uffa3\063\uffa3" +
    "\001\002\000\034\007\072\012\107\024\071\034\077\035" +
    "\105\053\076\054\075\055\111\056\110\057\104\060\103" +
    "\061\074\064\106\001\002\000\044\004\136\005\135\006" +
    "\131\007\122\010\125\011\133\013\127\016\uff94\022\137" +
    "\023\121\026\130\027\126\030\132\031\120\032\134\033" +
    "\123\062\124\001\002\000\034\007\072\012\107\024\071" +
    "\034\077\035\105\053\076\054\075\055\111\056\110\057" +
    "\104\060\103\061\074\064\106\001\002\000\034\007\072" +
    "\012\107\024\071\034\077\035\105\053\076\054\075\055" +
    "\111\056\110\057\104\060\103\061\074\064\106\001\002" +
    "\000\034\007\072\012\107\024\071\034\077\035\105\053" +
    "\076\054\075\055\111\056\110\057\104\060\103\061\074" +
    "\064\106\001\002\000\034\007\072\012\107\024\071\034" +
    "\077\035\105\053\076\054\075\055\111\056\110\057\104" +
    "\060\103\061\074\064\106\001\002\000\034\007\072\012" +
    "\107\024\071\034\077\035\105\053\076\054\075\055\111" +
    "\056\110\057\104\060\103\061\074\064\106\001\002\000" +
    "\034\007\072\012\107\024\071\034\077\035\105\053\076" +
    "\054\075\055\111\056\110\057\104\060\103\061\074\064" +
    "\106\001\002\000\034\007\072\012\107\024\071\034\077" +
    "\035\105\053\076\054\075\055\111\056\110\057\104\060" +
    "\103\061\074\064\106\001\002\000\034\007\072\012\107" +
    "\024\071\034\077\035\105\053\076\054\075\055\111\056" +
    "\110\057\104\060\103\061\074\064\106\001\002\000\034" +
    "\007\072\012\107\024\071\034\077\035\105\053\076\054" +
    "\075\055\111\056\110\057\104\060\103\061\074\064\106" +
    "\001\002\000\034\007\072\012\107\024\071\034\077\035" +
    "\105\053\076\054\075\055\111\056\110\057\104\060\103" +
    "\061\074\064\106\001\002\000\034\007\072\012\107\024" +
    "\071\034\077\035\105\053\076\054\075\055\111\056\110" +
    "\057\104\060\103\061\074\064\106\001\002\000\034\007" +
    "\072\012\107\024\071\034\077\035\105\053\076\054\075" +
    "\055\111\056\110\057\104\060\103\061\074\064\106\001" +
    "\002\000\034\007\072\012\107\024\071\034\077\035\105" +
    "\053\076\054\075\055\111\056\110\057\104\060\103\061" +
    "\074\064\106\001\002\000\054\004\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\013\uffa6\014\uffa6\016\uffa6\017" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\062\uffa6\063\uffa6\001\002\000" +
    "\054\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7" +
    "\013\uffa7\014\uffa7\016\uffa7\017\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\062\uffa7\063\uffa7\001\002\000\034\007\072\012\107\024" +
    "\071\034\077\035\105\053\076\054\075\055\111\056\110" +
    "\057\104\060\103\061\074\064\106\001\002\000\054\004" +
    "\136\005\135\006\131\007\122\010\125\011\133\013\127" +
    "\014\uffab\016\uffab\017\uffab\021\uffab\022\uffab\023\121\026" +
    "\130\027\126\030\132\031\120\032\134\033\123\062\124" +
    "\063\uffab\001\002\000\054\004\136\005\135\006\131\007" +
    "\122\010\125\011\133\013\127\014\uffad\016\uffad\017\uffad" +
    "\021\uffad\022\uffad\023\uffad\026\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\033\uffad\062\124\063\uffad\001\002\000\054" +
    "\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\013" +
    "\127\014\uffb4\016\uffb4\017\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\062" +
    "\uffb4\063\uffb4\001\002\000\054\004\136\005\135\006\131" +
    "\007\122\010\125\011\133\013\127\014\uffaf\016\uffaf\017" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\062\124\063\uffaf\001\002\000" +
    "\054\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\125\011\133" +
    "\013\127\014\uffb7\016\uffb7\017\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\062\124\063\uffb7\001\002\000\054\004\136\005\135\006" +
    "\131\007\122\010\125\011\133\013\127\014\uffb1\016\uffb1" +
    "\017\uffb1\021\uffb1\022\uffb1\023\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\062\124\063\uffb1\001\002" +
    "\000\054\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011" +
    "\uffb2\013\uffb2\014\uffb2\016\uffb2\017\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\062\uffb2\063\uffb2\001\002\000\054\004\136\005\135" +
    "\006\131\007\122\010\125\011\133\013\127\014\uffb0\016" +
    "\uffb0\017\uffb0\021\uffb0\022\uffb0\023\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\062\124\063\uffb0\001" +
    "\002\000\054\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\013\127\014\uffb5\016\uffb5\017\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\062\uffb5\063\uffb5\001\002\000\054\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\013\127\014\uffb3" +
    "\016\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\062\uffb3\063\uffb3" +
    "\001\002\000\054\004\136\005\135\006\131\007\122\010" +
    "\125\011\133\013\127\014\uffac\016\uffac\017\uffac\021\uffac" +
    "\022\uffac\023\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032" +
    "\uffac\033\uffac\062\124\063\uffac\001\002\000\054\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\010\125\011\133\013\127\014" +
    "\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6\023\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\062\124\063" +
    "\uffb6\001\002\000\054\004\136\005\135\006\131\007\122" +
    "\010\125\011\133\013\127\014\uffaa\016\uffaa\017\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\026\130\027\126\030\132\031\120" +
    "\032\134\033\123\062\124\063\uffaa\001\002\000\054\004" +
    "\136\005\135\006\131\007\122\010\125\011\133\013\127" +
    "\014\uffae\016\uffae\017\uffae\021\uffae\022\uffae\023\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\062\124" +
    "\063\uffae\001\002\000\044\004\136\005\135\006\131\007" +
    "\122\010\125\011\133\013\127\014\157\022\137\023\121" +
    "\026\130\027\126\030\132\031\120\032\134\033\123\062" +
    "\124\001\002\000\054\004\uffa5\005\uffa5\006\uffa5\007\uffa5" +
    "\010\uffa5\011\uffa5\013\uffa5\014\uffa5\016\uffa5\017\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\062\uffa5\063\uffa5\001\002\000\004\060" +
    "\161\001\002\000\004\012\162\001\002\000\034\007\072" +
    "\012\107\024\071\034\077\035\105\053\076\054\075\055" +
    "\111\056\110\057\104\060\103\061\074\064\106\001\002" +
    "\000\044\004\136\005\135\006\131\007\122\010\125\011" +
    "\133\013\127\014\164\022\137\023\121\026\130\027\126" +
    "\030\132\031\120\032\134\033\123\062\124\001\002\000" +
    "\056\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\013\ufff4\014\ufff4\016\ufff4\017\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\062\ufff4\063\ufff4\001\002\000\036\007\072\012" +
    "\107\014\171\024\071\034\077\035\105\053\076\054\075" +
    "\055\111\056\110\057\104\060\103\061\074\064\106\001" +
    "\002\000\034\007\072\012\107\024\071\034\077\035\105" +
    "\053\076\054\075\055\111\056\110\057\104\060\103\061" +
    "\074\064\106\001\002\000\044\004\136\005\135\006\131" +
    "\007\122\010\125\011\133\013\127\016\uff95\022\137\023" +
    "\121\026\130\027\126\030\132\031\120\032\134\033\123" +
    "\062\124\001\002\000\046\004\136\005\135\006\131\007" +
    "\122\010\125\011\133\013\127\014\uff89\017\uff89\022\137" +
    "\023\121\026\130\027\126\030\132\031\120\032\134\033" +
    "\123\062\124\001\002\000\060\004\uff8b\005\uff8b\006\uff8b" +
    "\007\uff8b\010\uff8b\011\uff8b\013\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\021\uff8b\022\uff8b\023\uff8b\025\uff8b\026\uff8b" +
    "\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\062\uff8b\063" +
    "\uff8b\001\002\000\006\014\174\017\173\001\002\000\034" +
    "\007\072\012\107\024\071\034\077\035\105\053\076\054" +
    "\075\055\111\056\110\057\104\060\103\061\074\064\106" +
    "\001\002\000\060\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010" +
    "\uff8c\011\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c" +
    "\021\uff8c\022\uff8c\023\uff8c\025\uff8c\026\uff8c\027\uff8c\030" +
    "\uff8c\031\uff8c\032\uff8c\033\uff8c\062\uff8c\063\uff8c\001\002" +
    "\000\046\004\136\005\135\006\131\007\122\010\125\011" +
    "\133\013\127\014\uff8a\017\uff8a\022\137\023\121\026\130" +
    "\027\126\030\132\031\120\032\134\033\123\062\124\001" +
    "\002\000\004\025\177\001\002\000\004\060\200\001\002" +
    "\000\004\012\201\001\002\000\034\007\072\012\107\024" +
    "\071\034\077\035\105\053\076\054\075\055\111\056\110" +
    "\057\104\060\103\061\074\064\106\001\002\000\044\004" +
    "\136\005\135\006\131\007\122\010\125\011\133\013\127" +
    "\017\203\022\137\023\121\026\130\027\126\030\132\031" +
    "\120\032\134\033\123\062\124\001\002\000\036\007\072" +
    "\012\107\024\071\034\077\035\105\051\206\053\076\054" +
    "\075\055\111\056\110\057\104\060\103\061\074\064\106" +
    "\001\002\000\044\004\136\005\135\006\131\007\122\010" +
    "\125\011\133\013\127\014\uffec\022\137\023\121\026\130" +
    "\027\126\030\132\031\120\032\134\033\123\062\124\001" +
    "\002\000\004\014\213\001\002\000\004\012\207\001\002" +
    "\000\004\014\210\001\002\000\004\015\211\001\002\000" +
    "\034\003\062\016\060\036\035\037\061\040\024\042\007" +
    "\045\014\046\034\047\052\050\011\060\015\064\021\065" +
    "\037\001\002\000\004\014\uffed\001\002\000\004\021\uffee" +
    "\001\002\000\004\060\215\001\002\000\056\004\uff8f\005" +
    "\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\216\013\uff8f" +
    "\014\uff8f\016\uff8f\017\uff8f\021\uff8f\022\uff8f\023\uff8f\026" +
    "\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\062\uff8f" +
    "\063\uff8f\001\002\000\004\014\217\001\002\000\054\004" +
    "\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\013\uff90" +
    "\014\uff90\016\uff90\017\uff90\021\uff90\022\uff90\023\uff90\026" +
    "\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\062\uff90" +
    "\063\uff90\001\002\000\054\004\uff96\005\uff96\006\uff96\007" +
    "\uff96\010\uff96\011\uff96\013\uff96\014\uff96\016\uff96\017\uff96" +
    "\021\uff96\022\uff96\023\uff96\026\uff96\027\uff96\030\uff96\031" +
    "\uff96\032\uff96\033\uff96\062\uff96\063\uff96\001\002\000\054" +
    "\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\125\011\133\013" +
    "\127\014\uffa8\016\uffa8\017\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\062" +
    "\124\063\uffa8\001\002\000\054\004\136\005\135\006\131" +
    "\007\122\010\125\011\133\013\127\014\uffa9\016\uffa9\017" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\062\124\063\uffa9\001\002\000" +
    "\004\012\224\001\002\000\034\007\072\012\107\024\071" +
    "\034\077\035\105\053\076\054\075\055\111\056\110\057" +
    "\104\060\103\061\074\064\106\001\002\000\044\004\136" +
    "\005\135\006\131\007\122\010\125\011\133\013\127\017" +
    "\226\022\137\023\121\026\130\027\126\030\132\031\120" +
    "\032\134\033\123\062\124\001\002\000\036\007\072\012" +
    "\107\024\071\034\077\035\105\051\206\053\076\054\075" +
    "\055\111\056\110\057\104\060\103\061\074\064\106\001" +
    "\002\000\004\014\230\001\002\000\004\021\ufff0\001\002" +
    "\000\040\003\uffca\016\uffca\036\uffca\037\uffca\040\uffca\042" +
    "\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca" +
    "\060\uffca\064\uffca\065\uffca\001\002\000\004\021\244\001" +
    "\002\000\044\004\136\005\135\006\131\007\122\010\125" +
    "\011\133\013\127\021\243\022\137\023\121\026\130\027" +
    "\126\030\132\031\120\032\134\033\123\062\124\001\002" +
    "\000\006\016\241\017\240\001\002\000\034\007\072\012" +
    "\107\024\071\034\077\035\105\053\076\054\075\055\111" +
    "\056\110\057\104\060\103\061\074\064\106\001\002\000" +
    "\040\003\uffce\016\uffce\036\uffce\037\uffce\040\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\060" +
    "\uffce\064\uffce\065\uffce\001\002\000\046\004\136\005\135" +
    "\006\131\007\122\010\125\011\133\013\127\016\uff92\017" +
    "\uff92\022\137\023\121\026\130\027\126\030\132\031\120" +
    "\032\134\033\123\062\124\001\002\000\034\007\072\012" +
    "\107\024\071\034\077\035\105\053\076\054\075\055\111" +
    "\056\110\057\104\060\103\061\074\064\106\001\002\000" +
    "\006\014\uff93\021\uff93\001\002\000\046\004\136\005\135" +
    "\006\131\007\122\010\125\011\133\013\127\016\uff91\017" +
    "\uff91\022\137\023\121\026\130\027\126\030\132\031\120" +
    "\032\134\033\123\062\124\001\002\000\040\003\uffd0\016" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\060\uffd0\064\uffd0\065" +
    "\uffd0\001\002\000\040\003\uffcf\016\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\060\uffcf\064\uffcf\065\uffcf\001\002\000\040" +
    "\003\uffd5\016\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\060\uffd5" +
    "\064\uffd5\065\uffd5\001\002\000\040\003\uffd2\016\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\060\uffd2\064\uffd2\065\uffd2\001" +
    "\002\000\040\003\uffd4\016\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\060\uffd4\064\uffd4\065\uffd4\001\002\000\040\003\uffd1" +
    "\016\uffd1\036\uffd1\037\uffd1\040\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\060\uffd1\064\uffd1" +
    "\065\uffd1\001\002\000\040\003\uffcb\016\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\060\uffcb\064\uffcb\065\uffcb\001\002\000" +
    "\040\003\uffd3\016\uffd3\036\uffd3\037\uffd3\040\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\060" +
    "\uffd3\064\uffd3\065\uffd3\001\002\000\050\002\uffda\003\uffda" +
    "\014\uffda\016\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042" +
    "\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda" +
    "\051\uffda\060\uffda\064\uffda\065\uffda\001\002\000\040\003" +
    "\uffd8\016\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\060\uffd8\064" +
    "\uffd8\065\uffd8\001\002\000\004\060\261\001\002\000\004" +
    "\015\257\001\002\000\034\003\062\016\060\036\035\037" +
    "\061\040\024\042\007\045\014\046\034\047\052\050\011" +
    "\060\015\064\021\065\037\001\002\000\032\002\uffe9\003" +
    "\uffe9\036\uffe9\040\uffe9\042\uffe9\045\uffe9\046\uffe9\050\uffe9" +
    "\051\uffe9\060\uffe9\064\uffe9\065\uffe9\001\002\000\006\014" +
    "\uffeb\017\uffeb\001\002\000\034\007\072\012\107\024\071" +
    "\034\077\035\105\053\076\054\075\055\111\056\110\057" +
    "\104\060\103\061\074\064\106\001\002\000\044\004\136" +
    "\005\135\006\131\007\122\010\125\011\133\013\127\014" +
    "\264\022\137\023\121\026\130\027\126\030\132\031\120" +
    "\032\134\033\123\062\124\001\002\000\004\021\uffc8\001" +
    "\002\000\032\002\ufffb\003\ufffb\036\ufffb\040\ufffb\042\ufffb" +
    "\045\ufffb\046\ufffb\050\ufffb\051\ufffb\060\ufffb\064\ufffb\065" +
    "\ufffb\001\002\000\016\004\273\005\272\014\uffbc\015\275" +
    "\021\uffbc\063\274\001\002\000\004\021\uffc1\001\002\000" +
    "\006\014\uffc0\021\uffc0\001\002\000\006\014\uffba\021\uffba" +
    "\001\002\000\006\014\uffbd\021\uffbd\001\002\000\006\014" +
    "\uffbe\021\uffbe\001\002\000\036\007\072\012\107\015\235" +
    "\024\071\034\077\035\105\053\076\054\075\055\111\056" +
    "\110\057\104\060\103\061\074\064\106\001\002\000\034" +
    "\007\072\012\107\024\071\034\077\035\105\053\076\054" +
    "\075\055\111\056\110\057\104\060\103\061\074\064\106" +
    "\001\002\000\044\004\136\005\135\006\131\007\122\010" +
    "\125\011\133\013\127\016\277\022\137\023\121\026\130" +
    "\027\126\030\132\031\120\032\134\033\123\062\124\001" +
    "\002\000\010\014\uffbb\021\uffbb\063\274\001\002\000\006" +
    "\014\uffbf\021\uffbf\001\002\000\006\014\uffb8\021\uffb8\001" +
    "\002\000\046\004\136\005\135\006\131\007\122\010\125" +
    "\011\133\013\127\014\uffb9\021\uffb9\022\137\023\121\026" +
    "\130\027\126\030\132\031\120\032\134\033\123\062\124" +
    "\001\002\000\034\007\072\012\107\024\071\034\077\035" +
    "\105\053\076\054\075\055\111\056\110\057\104\060\103" +
    "\061\074\064\106\001\002\000\044\004\136\005\135\006" +
    "\131\007\122\010\125\011\133\013\127\014\305\022\137" +
    "\023\121\026\130\027\126\030\132\031\120\032\134\033" +
    "\123\062\124\001\002\000\004\015\306\001\002\000\034" +
    "\003\062\016\060\036\035\037\061\040\024\042\007\045" +
    "\014\046\034\047\052\050\011\060\015\064\021\065\037" +
    "\001\002\000\044\002\uffdb\003\uffdb\016\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\060\uffdb\064\uffdb\065\uffdb\001" +
    "\002\000\004\060\311\001\002\000\004\012\312\001\002" +
    "\000\034\007\072\012\107\024\071\034\077\035\105\053" +
    "\076\054\075\055\111\056\110\057\104\060\103\061\074" +
    "\064\106\001\002\000\044\004\136\005\135\006\131\007" +
    "\122\010\125\011\133\013\127\017\314\022\137\023\121" +
    "\026\130\027\126\030\132\031\120\032\134\033\123\062" +
    "\124\001\002\000\036\007\072\012\107\024\071\034\077" +
    "\035\105\051\206\053\076\054\075\055\111\056\110\057" +
    "\104\060\103\061\074\064\106\001\002\000\004\014\316" +
    "\001\002\000\004\021\ufff2\001\002\000\032\002\ufff5\003" +
    "\ufff5\036\ufff5\040\ufff5\042\ufff5\045\ufff5\046\ufff5\050\ufff5" +
    "\051\ufff5\060\ufff5\064\ufff5\065\ufff5\001\002\000\034\007" +
    "\072\012\107\024\071\034\077\035\105\053\076\054\075" +
    "\055\111\056\110\057\104\060\103\061\074\064\106\001" +
    "\002\000\044\004\136\005\135\006\131\007\122\010\125" +
    "\011\133\013\127\014\322\022\137\023\121\026\130\027" +
    "\126\030\132\031\120\032\134\033\123\062\124\001\002" +
    "\000\004\015\323\001\002\000\034\003\062\016\060\036" +
    "\035\037\061\040\024\042\007\045\014\046\034\047\052" +
    "\050\011\060\015\064\021\065\037\001\002\000\046\002" +
    "\uffe7\003\uffe7\016\uffe7\036\uffe7\037\uffe7\040\uffe7\041\325" +
    "\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050" +
    "\uffe7\051\uffe7\060\uffe7\064\uffe7\065\uffe7\001\002\000\004" +
    "\015\326\001\002\000\034\003\062\016\060\036\035\037" +
    "\061\040\024\042\007\045\014\046\034\047\052\050\011" +
    "\060\015\064\021\065\037\001\002\000\044\002\uffe6\003" +
    "\uffe6\016\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\060" +
    "\uffe6\064\uffe6\065\uffe6\001\002\000\032\002\uffff\003\uffff" +
    "\036\uffff\040\uffff\042\uffff\045\uffff\046\uffff\050\uffff\051" +
    "\uffff\060\uffff\064\uffff\065\uffff\001\002\000\004\002\001" +
    "\001\002\000\004\060\333\001\002\000\004\012\334\001" +
    "\002\000\034\007\072\012\107\024\071\034\077\035\105" +
    "\053\076\054\075\055\111\056\110\057\104\060\103\061" +
    "\074\064\106\001\002\000\046\004\136\005\135\006\131" +
    "\007\122\010\125\011\133\013\127\014\164\017\336\022" +
    "\137\023\121\026\130\027\126\030\132\031\120\032\134" +
    "\033\123\062\124\001\002\000\036\007\072\012\107\024" +
    "\071\034\077\035\105\051\206\053\076\054\075\055\111" +
    "\056\110\057\104\060\103\061\074\064\106\001\002\000" +
    "\004\014\340\001\002\000\004\021\ufff3\001\002\000\032" +
    "\002\ufffc\003\ufffc\036\ufffc\040\ufffc\042\ufffc\045\ufffc\046" +
    "\ufffc\050\ufffc\051\ufffc\060\ufffc\064\ufffc\065\ufffc\001\002" +
    "\000\032\002\ufff7\003\ufff7\036\ufff7\040\ufff7\042\ufff7\045" +
    "\ufff7\046\ufff7\050\ufff7\051\ufff7\060\ufff7\064\ufff7\065\ufff7" +
    "\001\002\000\004\060\356\001\002\000\034\007\072\012" +
    "\107\024\071\034\077\035\105\053\076\054\075\055\111" +
    "\056\110\057\104\060\103\061\074\064\106\001\002\000" +
    "\044\004\136\005\135\006\131\007\122\010\125\011\133" +
    "\013\127\016\346\022\137\023\121\026\130\027\126\030" +
    "\132\031\120\032\134\033\123\062\124\001\002\000\010" +
    "\021\uffbb\025\347\063\274\001\002\000\004\060\350\001" +
    "\002\000\004\012\351\001\002\000\034\007\072\012\107" +
    "\024\071\034\077\035\105\053\076\054\075\055\111\056" +
    "\110\057\104\060\103\061\074\064\106\001\002\000\044" +
    "\004\136\005\135\006\131\007\122\010\125\011\133\013" +
    "\127\017\353\022\137\023\121\026\130\027\126\030\132" +
    "\031\120\032\134\033\123\062\124\001\002\000\036\007" +
    "\072\012\107\024\071\034\077\035\105\051\206\053\076" +
    "\054\075\055\111\056\110\057\104\060\103\061\074\064" +
    "\106\001\002\000\004\014\355\001\002\000\004\021\uffef" +
    "\001\002\000\004\012\357\001\002\000\034\007\072\012" +
    "\107\024\071\034\077\035\105\053\076\054\075\055\111" +
    "\056\110\057\104\060\103\061\074\064\106\001\002\000" +
    "\044\004\136\005\135\006\131\007\122\010\125\011\133" +
    "\013\127\017\361\022\137\023\121\026\130\027\126\030" +
    "\132\031\120\032\134\033\123\062\124\001\002\000\036" +
    "\007\072\012\107\024\071\034\077\035\105\051\206\053" +
    "\076\054\075\055\111\056\110\057\104\060\103\061\074" +
    "\064\106\001\002\000\004\014\363\001\002\000\004\021" +
    "\ufff1\001\002\000\004\060\266\001\002\000\004\021\366" +
    "\001\002\000\034\007\072\012\107\024\071\034\077\035" +
    "\105\053\076\054\075\055\111\056\110\057\104\060\103" +
    "\061\074\064\106\001\002\000\044\004\136\005\135\006" +
    "\131\007\122\010\125\011\133\013\127\021\370\022\137" +
    "\023\121\026\130\027\126\030\132\031\120\032\134\033" +
    "\123\062\124\001\002\000\004\060\266\001\002\000\004" +
    "\014\372\001\002\000\004\015\373\001\002\000\034\003" +
    "\062\016\060\036\035\037\061\040\024\042\007\045\014" +
    "\046\034\047\052\050\011\060\015\064\021\065\037\001" +
    "\002\000\044\002\uffdc\003\uffdc\016\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\060\uffdc\064\uffdc\065\uffdc\001\002" +
    "\000\032\002\ufff8\003\ufff8\036\ufff8\040\ufff8\042\ufff8\045" +
    "\ufff8\046\ufff8\050\ufff8\051\ufff8\060\ufff8\064\ufff8\065\ufff8" +
    "\001\002\000\034\007\072\012\107\024\071\034\077\035" +
    "\105\053\076\054\075\055\111\056\110\057\104\060\103" +
    "\061\074\064\106\001\002\000\044\004\136\005\135\006" +
    "\131\007\122\010\125\011\133\013\127\014\u0100\022\137" +
    "\023\121\026\130\027\126\030\132\031\120\032\134\033" +
    "\123\062\124\001\002\000\004\021\uffc9\001\002\000\034" +
    "\007\072\012\107\024\071\034\077\035\105\053\076\054" +
    "\075\055\111\056\110\057\104\060\103\061\074\064\106" +
    "\001\002\000\044\004\136\005\135\006\131\007\122\010" +
    "\125\011\133\013\127\014\u0103\022\137\023\121\026\130" +
    "\027\126\030\132\031\120\032\134\033\123\062\124\001" +
    "\002\000\004\015\u0104\001\002\000\010\016\u0109\043\u010b" +
    "\044\u0106\001\002\000\010\016\u0109\043\u010b\044\u0106\001" +
    "\002\000\004\063\u010f\001\002\000\010\016\uffdf\043\uffdf" +
    "\044\uffdf\001\002\000\044\002\uffe1\003\uffe1\016\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\051\uffe1\060\uffe1\064\uffe1\065" +
    "\uffe1\001\002\000\044\002\uffe3\003\uffe3\016\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046" +
    "\uffe3\047\uffe3\050\uffe3\051\uffe3\060\uffe3\064\uffe3\065\uffe3" +
    "\001\002\000\044\002\uffe5\003\uffe5\016\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\060\uffe5\064\uffe5\065\uffe5\001" +
    "\002\000\034\007\072\012\107\024\071\034\077\035\105" +
    "\053\076\054\075\055\111\056\110\057\104\060\103\061" +
    "\074\064\106\001\002\000\044\004\136\005\135\006\131" +
    "\007\122\010\125\011\133\013\127\022\137\023\121\026" +
    "\130\027\126\030\132\031\120\032\134\033\123\062\124" +
    "\063\u010d\001\002\000\040\003\062\016\uffdd\036\035\037" +
    "\061\040\024\042\007\043\uffdd\044\uffdd\045\014\046\034" +
    "\047\052\050\011\060\015\064\021\065\037\001\002\000" +
    "\040\003\062\016\uffde\036\035\037\061\040\024\042\007" +
    "\043\uffde\044\uffde\045\014\046\034\047\052\050\011\060" +
    "\015\064\021\065\037\001\002\000\032\003\062\036\035" +
    "\037\061\040\024\042\007\045\014\046\034\047\052\050" +
    "\011\060\015\064\021\065\037\001\002\000\034\003\062" +
    "\016\u0111\036\035\037\061\040\024\042\007\045\014\046" +
    "\034\047\052\050\011\060\015\064\021\065\037\001\002" +
    "\000\044\002\uffe4\003\uffe4\016\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\060\uffe4\064\uffe4\065\uffe4\001\002\000" +
    "\010\016\uffe0\043\uffe0\044\uffe0\001\002\000\044\002\uffe2" +
    "\003\uffe2\016\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\060\uffe2\064\uffe2\065\uffe2\001\002\000\032\002\ufffa\003" +
    "\ufffa\036\ufffa\040\ufffa\042\ufffa\045\ufffa\046\ufffa\050\ufffa" +
    "\051\ufffa\060\ufffa\064\ufffa\065\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\046\004\012\006\021\020\027\021\026\023" +
    "\016\031\005\041\032\057\031\060\007\061\011\062\004" +
    "\064\003\125\022\126\035\130\017\131\015\137\030\140" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\132\267\135\270\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\012\020\027\021\026\023\016\031" +
    "\005\041\327\057\031\060\007\061\011\062\004\064\003" +
    "\126\035\130\017\131\015\137\030\140\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\131\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\117\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\004" +
    "\053\013\046\014\056\020\027\021\026\023\054\031\047" +
    "\057\031\060\007\061\011\062\004\126\064\130\055\131" +
    "\052\136\063\137\030\140\062\141\050\001\001\000\042" +
    "\004\053\020\027\021\026\023\054\031\047\057\031\060" +
    "\007\061\011\062\004\126\064\130\055\131\052\136\253" +
    "\137\030\140\062\141\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\101\016\233\033\232" +
    "\035\231\126\114\133\112\134\072\137\111\142\113\143" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\101\033\100\126\114\133\112\134\072\137\111\142\113" +
    "\143\077\001\001\000\002\001\001\000\022\002\101\033" +
    "\221\126\114\133\112\134\072\137\111\142\113\143\077" +
    "\001\001\000\022\002\101\033\220\126\114\133\112\134" +
    "\072\137\111\142\113\143\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\101\033\155\126\114" +
    "\133\112\134\072\137\111\142\113\143\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\101\033\116\126\114\133\112\134\072\137\111\142\113" +
    "\143\077\001\001\000\002\001\001\000\022\002\101\033" +
    "\154\126\114\133\112\134\072\137\111\142\113\143\077" +
    "\001\001\000\022\002\101\033\153\126\114\133\112\134" +
    "\072\137\111\142\113\143\077\001\001\000\022\002\101" +
    "\033\152\126\114\133\112\134\072\137\111\142\113\143" +
    "\077\001\001\000\022\002\101\033\151\126\114\133\112" +
    "\134\072\137\111\142\113\143\077\001\001\000\022\002" +
    "\101\033\150\126\114\133\112\134\072\137\111\142\113" +
    "\143\077\001\001\000\022\002\101\033\147\126\114\133" +
    "\112\134\072\137\111\142\113\143\077\001\001\000\022" +
    "\002\101\033\146\126\114\133\112\134\072\137\111\142" +
    "\113\143\077\001\001\000\022\002\101\033\145\126\114" +
    "\133\112\134\072\137\111\142\113\143\077\001\001\000" +
    "\022\002\101\033\144\126\114\133\112\134\072\137\111" +
    "\142\113\143\077\001\001\000\022\002\101\033\143\126" +
    "\114\133\112\134\072\137\111\142\113\143\077\001\001" +
    "\000\022\002\101\033\142\126\114\133\112\134\072\137" +
    "\111\142\113\143\077\001\001\000\022\002\101\033\141" +
    "\126\114\133\112\134\072\137\111\142\113\143\077\001" +
    "\001\000\022\002\101\033\140\126\114\133\112\134\072" +
    "\137\111\142\113\143\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\101\033\137\126\114\133\112" +
    "\134\072\137\111\142\113\143\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\101\033\162\126\114\133" +
    "\112\134\072\137\111\142\113\143\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\101\024\171\033" +
    "\167\126\114\133\112\134\072\137\111\142\113\143\077" +
    "\001\001\000\022\002\101\033\166\126\114\133\112\134" +
    "\072\137\111\142\113\143\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\002\101\033\174\126\114\133\112\134\072\137\111" +
    "\142\113\143\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\101\033\201\126\114\133\112\134\072\137" +
    "\111\142\113\143\077\001\001\000\002\001\001\000\024" +
    "\002\101\022\204\033\203\126\114\133\112\134\072\137" +
    "\111\142\113\143\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\004\053\013\046\014\211\020\027\021\026" +
    "\023\054\031\047\057\031\060\007\061\011\062\004\126" +
    "\064\130\055\131\052\136\063\137\030\140\062\141\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\101\033\224\126\114\133\112" +
    "\134\072\137\111\142\113\143\077\001\001\000\002\001" +
    "\001\000\024\002\101\022\226\033\203\126\114\133\112" +
    "\134\072\137\111\142\113\143\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\101\033" +
    "\236\126\114\133\112\134\072\137\111\142\113\143\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\101\033\241\126\114\133\112\134\072\137\111\142\113" +
    "\143\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\004\053\013" +
    "\046\014\257\020\027\021\026\023\054\031\047\057\031" +
    "\060\007\061\011\062\004\126\064\130\055\131\052\136" +
    "\063\137\030\140\062\141\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\101\033\262\126\114\133" +
    "\112\134\072\137\111\142\113\143\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\132" +
    "\267\135\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\002\101\016\233\033\301\035\300\126\114\133\112" +
    "\134\072\137\111\142\113\143\077\001\001\000\022\002" +
    "\101\033\275\126\114\133\112\134\072\137\111\142\113" +
    "\143\077\001\001\000\002\001\001\000\006\132\277\135" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\002\101\033\303\126\114\133\112\134" +
    "\072\137\111\142\113\143\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\004\053\013\046\014\306\020" +
    "\027\021\026\023\054\031\047\057\031\060\007\061\011" +
    "\062\004\126\064\130\055\131\052\136\063\137\030\140" +
    "\062\141\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\101\033\312\126\114\133" +
    "\112\134\072\137\111\142\113\143\077\001\001\000\002" +
    "\001\001\000\024\002\101\022\314\033\203\126\114\133" +
    "\112\134\072\137\111\142\113\143\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\101\033\320\126\114\133\112\134\072\137\111\142\113" +
    "\143\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\004\053\013\046\014\323\020\027\021\026\023\054" +
    "\031\047\057\031\060\007\061\011\062\004\126\064\130" +
    "\055\131\052\136\063\137\030\140\062\141\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\004\053\013" +
    "\046\014\326\020\027\021\026\023\054\031\047\057\031" +
    "\060\007\061\011\062\004\126\064\130\055\131\052\136" +
    "\063\137\030\140\062\141\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\101\033\334\126\114\133\112" +
    "\134\072\137\111\142\113\143\077\001\001\000\002\001" +
    "\001\000\024\002\101\022\336\033\203\126\114\133\112" +
    "\134\072\137\111\142\113\143\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\101\033\344\126\114\133" +
    "\112\134\072\137\111\142\113\143\077\001\001\000\002" +
    "\001\001\000\006\132\277\135\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\101\033\351\126\114" +
    "\133\112\134\072\137\111\142\113\143\077\001\001\000" +
    "\002\001\001\000\024\002\101\022\353\033\203\126\114" +
    "\133\112\134\072\137\111\142\113\143\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\002\101\033\357\126\114\133\112\134\072\137\111\142" +
    "\113\143\077\001\001\000\002\001\001\000\024\002\101" +
    "\022\361\033\203\126\114\133\112\134\072\137\111\142" +
    "\113\143\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\131\364\001\001\000\002\001\001\000\022\002" +
    "\101\033\366\126\114\133\112\134\072\137\111\142\113" +
    "\143\077\001\001\000\002\001\001\000\004\131\370\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\004\053" +
    "\013\046\014\373\020\027\021\026\023\054\031\047\057" +
    "\031\060\007\061\011\062\004\126\064\130\055\131\052" +
    "\136\063\137\030\140\062\141\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\101\033\376\126\114" +
    "\133\112\134\072\137\111\142\113\143\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\002\101\033\u0101" +
    "\126\114\133\112\134\072\137\111\142\113\143\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\071\u0106" +
    "\072\u0107\073\u0109\116\u0104\001\001\000\006\071\u0111\072" +
    "\u0112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\101\033\u010b\126\114\133\112\134\072\137\111\142\113" +
    "\143\077\001\001\000\002\001\001\000\044\004\053\013" +
    "\u010d\020\027\021\026\023\054\031\047\057\031\060\007" +
    "\061\011\062\004\126\064\130\055\131\052\136\063\137" +
    "\030\140\062\141\050\001\001\000\042\004\053\020\027" +
    "\021\026\023\054\031\047\057\031\060\007\061\011\062" +
    "\004\126\064\130\055\131\052\136\253\137\030\140\062" +
    "\141\050\001\001\000\044\004\053\013\u010f\020\027\021" +
    "\026\023\054\031\047\057\031\060\007\061\011\062\004" +
    "\126\064\130\055\131\052\136\063\137\030\140\062\141" +
    "\050\001\001\000\042\004\053\020\027\021\026\023\054" +
    "\031\047\057\031\060\007\061\011\062\004\126\064\130" +
    "\055\131\052\136\253\137\030\140\062\141\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
 public ParserTree parserTree = new ParserTree("hola");
public ArrayList<Symbol> error = new ArrayList<Symbol>();
 public Metodo metodo = new Metodo();
  public ArrayList<String> ejecucion = new ArrayList();
   public ArrayList<ParserTree> declaracion = new ArrayList<ParserTree>();
    String expresion = "";
    public String ruta ="";

   public observador.errores.RecibirError enviar;
    public String enviarError(String s){
        if (enviar != null){
            enviar.recibirError(ruta +"\n   "+s);
        }
    return s;
    }
    
    public void syntax_error(Symbol s){
    System.err.println( enviarError("Error Sintactico en la Linea  " + (s.right+1) +" Columna "+s.left+ ". Simbolo \'" +s.value + "\' no reconocido." ));

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         System.err.println(enviarError("Error Sintactico en la Linea no se logro recuperar de error" + (s.right+1)+ "Columna "+s.left+". " + s.value + " no reconocido."));
        //this.error.add(s);
        //System.err.println(s);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

//Codigo de acciones
      

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametro ::= exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree ("parametro"); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parametro ::= parametro COMA exp 
            {
              ParserTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 b.addChildren(a); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // getMetodo ::= ID PAREA PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ParserTree arbol = new ParserTree("getMetodo",aright,aleft);Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
           arbol.addChildren(nodo); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("getMetodo",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // getMetodo ::= ID PAREA parametro PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("getMetodo",aright,aleft);Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
           arbol.addChildren(nodo);arbol.addChildren(b); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("getMetodo",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parVerctor ::= getMetodo 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parVerctor",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parVerctor ::= ID 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID")); ParserTree arbol = new ParserTree(nodo);  RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parVerctor",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // funcioVector ::= parVerctor PUNTO ID 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("Vectorconteo"); Node nodo = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));arbol.addChildren(a);arbol.addChildren(nodo); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcioVector",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // funcioVector ::= parVerctor PUNTO ID PAREA PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ParserTree arbol = new ParserTree("VectorAtexto"); Node nodo = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));arbol.addChildren(a);arbol.addChildren(nodo); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcioVector",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // arreglo ::= arreglo COMA exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addChildren(b);RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // arreglo ::= LLV1 exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("arreglo"); arbol.addChildren(a);RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // arreglo_asignar ::= arreglo LLV2 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_asignar",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // vector ::= getMetodo LLV1 exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ParserTree arbol = new ParserTree("vectorMetodo"); 

    arbol.addChildren(a);
    arbol.addChildren(b);      
          RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // vector ::= ID LLV1 exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("vector"); Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
    arbol.addChildren(nodo);
    arbol.addChildren(b);      
          RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valorVector ::= vector LLV2 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorVector",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // valor ::= FALSO 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("FALSO"),new Token (new Location(aleft,aright),a,"VERDADERO"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // valor ::= VERDADERO 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("VERDADERO"),new Token (new Location(aleft,aright),a,"VERDADERO"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valor ::= CADENA 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("CADE"),new Token (new Location(aleft,aright),a,"CADE"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valor ::= CARACTER 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("CARACTER"),new Token (new Location(aleft,aright),a,"CARACTER"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valor ::= DATETIME 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("DATETIME"),new Token (new Location(aleft,aright),a,"DATETIME"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valor ::= DATE 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("DATE"),new Token (new Location(aleft,aright),a,"DATE"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor ::= NDECIMAL 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("NDECIMAL"),new Token (new Location(aleft,aright),a,"NDECIMAL"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor ::= NUMERO 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("NUMERO"),new Token (new Location(aleft,aright),a,"NUMERO"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor ::= ID 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // exp ::= funcioVector 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("FuncionVector"); arbol.addChildren(a); RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // exp ::= documento 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("documento"); arbol.addChildren(a); RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exp ::= valorVector 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("exp"); arbol.addChildren(a); RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exp ::= getMetodo 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree ("exp"); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exp ::= valor 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree ("exp"); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exp ::= PAREA exp PAREC 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exp ::= exp MENOSMENOS 
            {
              ParserTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MENOSMENOS"),new Token (new Location(aleft,aright),a,"MENOSMENOS"));
        ParserTree arbol = new ParserTree("exp");
         arbol.addChildren(b);
         arbol.addChildren(nodo);
         RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exp ::= exp MASMAS 
            {
              ParserTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MASMAS"),new Token (new Location(aleft,aright),a,"MASMAS"));
        ParserTree arbol = new ParserTree("exp");
         arbol.addChildren(b);
         arbol.addChildren(nodo);
         RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exp ::= MENOS exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MENOS"),new Token (new Location(aleft,aright),a,"MENOS"));
        ParserTree arbol = new ParserTree("exp");
         arbol.addChildren(nodo);
         arbol.addChildren(b);
         RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exp ::= NEL exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("NEL"),new Token(new Location(aleft,aright),a,"NEL"));
        ParserTree arbol = new ParserTree("exp");
         arbol.addChildren(nodo);
         arbol.addChildren(b);
         RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exp ::= exp Y exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("AND"),          new Token(new Location(aleft,aright),a,"AND"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exp ::= exp OR exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("OR"),         new Token(new Location(aleft,aright),a,"OR"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exp ::= exp NOIGUAL exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("NOIGUAL"),    new Token(new Location(aleft,aright),a,"NOIGUAL"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exp ::= exp IGUALIGUAL exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("IGUAL"),      new Token(new Location(aleft,aright),a,"IGUAL"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exp ::= exp MENORIGUAL exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MENORIGUAL"), new Token(new Location(aleft,aright),a,"MENORIGUAL"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // exp ::= exp MAYORIGUAL exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MAYORIGUAL"), new Token(new Location(aleft,aright),a,"MAYORIGUAL"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exp ::= exp MENORQUE exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MENORQUE"),   new Token(new Location(aleft,aright),a,"MENORQUE"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exp ::= exp MAYORQUE exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MAYORQUE"),   new Token(new Location(aleft,aright),a,"MAYORQUE"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exp ::= exp ELEVA exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("ELEVA"),      new Token(new Location(aleft,aright),a,"ELEVA"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exp ::= exp MOD exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MOD"),         new Token(new Location(aleft,aright),a,"MOD"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exp ::= exp DIV exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("DIV"),         new Token(new Location(aleft,aright),a,"DIV"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp ::= exp POR exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("POR"),       new Token(new Location(aleft,aright),a,"POR"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp ::= exp MENOS exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MENOS"),     new Token(new Location(aleft,aright),a,"MENOS"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp ::= exp MAS exp 
            {
              ParserTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MAS"),       new Token(new Location(aleft,aright),a,"MAS"));
          ParserTree arbol = new ParserTree("exp");
          arbol.addChildren(c);
          arbol.addChildren(nodo);
          arbol.addChildren(b);
          RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asigna ::= DOSPUNTOS arreglo_asignar 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("asignall"); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asigna ::= DOSPUNTOS exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("asigna"); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asignar ::= asigna 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("asignar"); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // asignacion ::= ID LLV1 exp LLV2 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("asignacionll");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo);arbol.addChildren(c);arbol.addChildren(new ParserTree("nada")); RESULT=arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // asignacion ::= ID 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("asignacion");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo);arbol.addChildren(new ParserTree("nada")); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // asignacion ::= ID MENOSMENOS 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("asignacion--");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // asignacion ::= ID MASMAS 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("asignacion++");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo);RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // asignacion ::= ID LLV1 exp LLV2 asignar 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("asignacionll");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo);arbol.addChildren(c);arbol.addChildren(b); RESULT=arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // asignacion ::= ID asignar 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("asignacion");Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        arbol.addChildren(nodo);arbol.addChildren(b); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracion ::= DIMV asignacion 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("declaracion");
    arbol.addChildren(a); RESULT=arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // control ::= hacer 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("control"); arbol.addChildren(a);RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // control ::= switch 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("control"); arbol.addChildren(a);RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // control ::= para 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("control"); arbol.addChildren(a);RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // control ::= mientras 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("control"); arbol.addChildren(a);RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // control ::= if2 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree ("control"); ; arbol.addChildren(a);RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // control ::= if1 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("control"); arbol.addChildren(a);RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // mensaje ::= MENSAJE PAREA exp PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("mensaje"); Node nodo = new Node(new Term("imprimir"),new Token (new Location(aleft,aright),a,"imprimir")); arbol.addChildren(b); arbol.addChildren(nodo);RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // imprimir ::= IMPRIMIR PAREA exp PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("imprimir"); Node nodo = new Node(new Term("imprimir"),new Token (new Location(aleft,aright),a,"imprimir")); arbol.addChildren(b); arbol.addChildren(nodo);RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imprimir",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listacuerpo ::= setelemento PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("observador"); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listacuerpo ::= observador PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listacuerpo ::= getMetodo PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(a.root.childNode.size()>1)
                this.parser.ejecucion.add(a.root.childNode.get(0).
                        token.getValueString()+"_"+a.root.childNode.get(1).childNode.size());
                else this.parser.ejecucion.add(a.root.childNode.get(0).
                        token.getValueString()+"_0"); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listacuerpo ::= error 
            {
              ParserTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ParserTree("error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listacuerpo ::= RETORNAR PUNTOCOMA 
            {
              ParserTree RESULT =null;
		ParserTree arbol = new ParserTree("retornar"); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listacuerpo ::= RETORNAR arreglo_asignar PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("retornar");  ParserTree arbol2 = new ParserTree("retoronoArreglo"); arbol2.addChildren(a);arbol.addChildren(arbol2);RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listacuerpo ::= RETORNAR exp PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("retornar");  arbol.addChildren(a);RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listacuerpo ::= TERMINAR PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ParserTree arbol = new ParserTree("TERMINAR");
         RESULT = arbol; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listacuerpo ::= mensaje PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // listacuerpo ::= imprimir PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listacuerpo ::= asignacion PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listacuerpo ::= declaracion PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listacuerpo ::= control 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listacuerpo",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cuerpo ::= listacuerpo 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("cuerpo");  arbol.addChildren(a);RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo ::= cuerpo listacuerpo 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addChildren(b);RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo1 ::= LLV2 
            {
              ParserTree RESULT =null;
		ParserTree arbol = new ParserTree("nada");RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo1 ::= cuerpo LLV2 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mientras ::= MIENTRAS PAREA exp PAREC LLV1 cuerpo1 
            {
              ParserTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("mientras",eleft,eright);
      arbol.addChildren(a);
      arbol.addChildren(b);
      RESULT =arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // para ::= PARA PAREA asignacion PUNTOCOMA exp PUNTOCOMA asignacion PAREC LLV1 cuerpo1 
            {
              ParserTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree d = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("para");
      arbol.addChildren(a);
      arbol.addChildren(c);
      arbol.addChildren(d);
      arbol.addChildren(b);
      RESULT =arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // caso ::= CASO exp DOSPUNTOS 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("caso"); arbol.addChildren(a); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // caso ::= CASO exp DOSPUNTOS cuerpo 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("caso"); arbol.addChildren(a);arbol.addChildren(b); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // swich_cuerpo1 ::= caso 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("cuerpo_switch"); arbol.addChildren(a); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("swich_cuerpo1",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // swich_cuerpo1 ::= swich_cuerpo1 caso 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addChildren(b); RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("swich_cuerpo1",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // swich_cuerpo ::= defecto 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("cuerpo_switch"); arbol.addChildren(a); RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("swich_cuerpo",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // swich_cuerpo ::= swich_cuerpo1 defecto 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addChildren(b);RESULT =a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("swich_cuerpo",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // defecto ::= LLV2 
            {
              ParserTree RESULT =null;
		
           ParserTree arbol = new ParserTree("defecto"); 
           RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defecto",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // defecto ::= DEFECTO DOSPUNTOS cuerpo LLV2 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("defecto"); arbol.addChildren(a); RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defecto",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // switch ::= SELECCIONA PAREA exp PAREC LLV1 swich_cuerpo 
            {
              ParserTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("selecciona",eleft,eright);
      arbol.addChildren(a);
      arbol.addChildren(b);
      RESULT =arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if2 ::= SI PAREA exp PAREC LLV1 cuerpo1 SINO LLV1 cuerpo1 
            {
              ParserTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("if2",eleft,eright);
      arbol.addChildren(a);
      arbol.addChildren(b);
      arbol.addChildren(c);
      RESULT =arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if1 ::= SI PAREA exp PAREC LLV1 cuerpo1 
            {
              ParserTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("if1",eleft,eright);
      arbol.addChildren(a);
      arbol.addChildren(b);
      RESULT =arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // metodo ::= FUNCION ID PAREA PAREC LLV1 cuerpo1 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
        Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        ParserTree arbol = new ParserTree("metodo");
        arbol.addChildren(nodo);
        arbol.addChildren(c);
        this.parser.metodo.insertar(a+"_"+0, null,c.root);
        RESULT = arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // metodo ::= FUNCION ID PAREA parametroID PAREC LLV1 cuerpo1 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
        Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
        ParserTree arbol = new ParserTree("metodo");
        arbol.addChildren(nodo);
        arbol.addChildren(b);
        arbol.addChildren(c);
        this.parser.metodo.insertar(a+"_"+b.root.childNode.size(), b.root,c.root);
        RESULT = arbol;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametroID ::= ID 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ParserTree arbol = new ParserTree("parametro");
    Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
    arbol.addChildren(nodo); RESULT =arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroID",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametroID ::= parametroID COMA ID 
            {
              ParserTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
    b.addChildren(nodo); RESULT =b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroID",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcion ::= exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcion ::= FUNCION PAREA PAREC LLV1 cuerpo1 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("funcion");
   arbol.addChildren(a);
   RESULT =a;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // setelemento ::= getMetodo LLV1 exp LLV2 PUNTO ID PAREA exp COMA funcion PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParserTree e = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree d = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ParserTree arbol = new ParserTree("setelementoConfuncionVector");
          Node nodob = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));
          ParserTree arbol2 = new ParserTree("vector");
          //Node nodoc = new Node(new Term("CADENA"),new Token (new Location(cleft,cright),c,"CADENA"));
          //Node nodod = new Node(new Term("CADENA"),new Token (new Location(dleft,dright),d,"CADENA"));
          arbol2.addChildren(a,e);
          arbol.addChildren(arbol2);
          arbol.addChildren(nodob);
          arbol.addChildren(c,d);
          RESULT=arbol;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setelemento",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // setelemento ::= ID LLV1 exp LLV2 PUNTO ID PAREA exp COMA funcion PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParserTree e = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree d = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ParserTree arbol = new ParserTree("setelementoConIDVector");
          Node nodoa = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
          Node nodob = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));
          ParserTree arbol2 = new ParserTree("vector");
          //Node nodoc = new Node(new Term("CADENA"),new Token (new Location(cleft,cright),c,"CADENA"));
          //Node nodod = new Node(new Term("CADENA"),new Token (new Location(dleft,dright),d,"CADENA"));
          arbol2.addChildren(nodoa);
          arbol2.addChildren(e);
          arbol.addChildren(arbol2); 
          arbol.addChildren(nodob);
                   
          arbol.addChildren(c,d);
          RESULT=arbol;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setelemento",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // setelemento ::= getMetodo PUNTO ID PAREA exp COMA funcion PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree d = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ParserTree arbol = new ParserTree("setelementoConfuncion");
          Node nodob = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));
          arbol.addChildren(a);
          arbol.addChildren(nodob);
          arbol.addChildren(c,d);
          RESULT=arbol;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setelemento",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // setelemento ::= ID PUNTO ID PAREA exp COMA funcion PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree d = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ParserTree arbol = new ParserTree("setelementoID");
          Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
          Node nodob = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));
          
          arbol.addChildren(nodo,nodob);
          arbol.addChildren(c,d);
          RESULT=arbol;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setelemento",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // setelemento ::= documento PUNTO ID PAREA exp COMA funcion PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree d = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ParserTree arbol = new ParserTree("setelementoDocumento");
          Node nodob = new Node(new Term("ID"),new Token (new Location(bleft,bright),b,"ID"));
          //Node nodoc = new Node(new Term("CADENA"),new Token (new Location(cleft,cright),c,"CADENA"));
          arbol.addChildren(a);
          arbol.addChildren(nodob);
          arbol.addChildren(c);
          arbol.addChildren(d);
          RESULT=arbol;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setelemento",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // setelemento ::= DOCUMENTO PUNTO ID PAREA exp COMA funcion PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree c = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ParserTree arbol = new ParserTree("observadorUniversal");
          Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
          //Node nodob = new Node(new Term("CADENA"),new Token (new Location(bleft,bright),b,"CADENA"));
          //arbol.addChildren(nodo,nodob);
          //arbol.addChildren(nodo,exp.root);
          arbol.addChildren(nodo);
          arbol.addChildren(b,c);
          RESULT=arbol;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("setelemento",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // documento ::= DOCUMENTO PUNTO ID PAREA exp PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ParserTree arbol = new ParserTree("getComponente");
          Node nodo = new Node(new Term("ID"),new Token (new Location(aleft,aright),a,"ID"));
          //Node nodob = new Node(new Term("CADENA"),new Token (new Location(bleft,bright),b,"CADENA"));
          //arbol.addChildren(nodo,nodob);
          //arbol.addChildren(nodo,exp.root);
          arbol.addChildren(nodo,b.root);
          RESULT=arbol;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("documento",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // principal ::= setelemento PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ParserTree arbol = new ParserTree("observador"); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // principal ::= error 
            {
              ParserTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParserTree("error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // principal ::= asignacion PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // principal ::= mensaje PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // principal ::= control 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // principal ::= imprimir PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // principal ::= getMetodo PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(a.root.childNode.size()>1)
                this.parser.ejecucion.add(a.root.childNode.get(0).
                        token.getValueString()+"_"+a.root.childNode.get(1).childNode.size());
                else this.parser.ejecucion.add(a.root.childNode.get(0).
                        token.getValueString()+"_0"); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // principal ::= declaracion PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		this.parser.declaracion.add(a); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // principal ::= metodo 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // js ::= principal 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("principal"); arbol.addChildren(a);RESULT=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("js",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // js ::= js principal 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addChildren(b); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("js",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicial ::= js 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		this.parser.parserTree = a; RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree start_val = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

