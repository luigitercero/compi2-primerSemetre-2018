/* The following code was generated by JFlex 1.6.1 */

package css.org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;
import css.org.compi2.codigo3d.parser.sym;
//Scanner para generar C3D

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/css/org/compi2/codigo3d/parser/lexico.flex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPRESION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\24\1\2\1\60\1\24\1\24\22\0\1\24\1\0\1\25"+
    "\5\0\1\7\1\10\1\3\1\13\1\16\1\12\1\23\1\1\12\21"+
    "\1\22\1\11\1\6\1\5\1\4\2\0\1\43\1\45\1\36\1\30"+
    "\1\41\1\53\1\31\1\55\1\27\1\56\1\17\1\37\1\51\1\52"+
    "\1\35\1\34\1\44\1\32\1\50\1\40\1\33\1\46\1\17\1\42"+
    "\1\57\1\54\1\14\1\0\1\15\1\0\1\20\1\0\1\43\1\45"+
    "\1\36\1\30\1\41\1\53\1\31\1\55\1\27\1\56\1\17\1\37"+
    "\1\51\1\52\1\35\1\34\1\44\1\32\1\50\1\40\1\33\1\46"+
    "\1\17\1\42\1\57\1\54\12\0\1\60\252\0\2\26\115\0\1\47"+
    "\u1ea8\0\1\60\1\60\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\1\1\22\1\23\1\1\16\20\1\24"+
    "\1\25\1\22\2\0\1\26\1\27\1\0\1\27\17\20"+
    "\1\0\1\20\1\0\6\20\1\0\1\30\1\0\15\20"+
    "\1\0\2\20\1\0\1\20\1\0\6\20\1\0\1\20"+
    "\1\3\1\0\4\20\1\0\3\20\1\0\2\20\1\31"+
    "\1\32\2\20\1\0\2\20\1\0\1\20\1\0\5\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\1\33\1\20"+
    "\1\0\3\20\1\0\1\20\1\34\2\20\1\0\1\20"+
    "\1\35\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\3\20\2\36\1\0\1\20\1\0\2\20\1\37\1\0"+
    "\3\20\1\0\3\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\3\20\1\0\1\20\1\0"+
    "\1\20\1\40\2\41\2\20\1\0\1\20\1\42\1\20"+
    "\1\0\1\20\2\43\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\44\1\20\1\0\1\20\1\0\2\20\1\45"+
    "\2\0\1\20\2\46\1\0\1\20\1\0\1\20\2\47"+
    "\1\20\1\0\1\20\2\50\1\51\1\52\1\0\1\20"+
    "\2\53\2\54\1\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\1\0\2\20\2\55\1\0\2\20\1\0\1\20"+
    "\1\56\1\0\1\20\2\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\142\0\142\0\142\0\142"+
    "\0\142\0\142\0\142\0\142\0\142\0\142\0\142\0\142"+
    "\0\142\0\304\0\365\0\u0126\0\142\0\142\0\u0157\0\u0188"+
    "\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310"+
    "\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\142\0\142\0\u0436"+
    "\0\u0467\0\u0498\0\142\0\142\0\u04c9\0\304\0\u04fa\0\u052b"+
    "\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3"+
    "\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u0498"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0467\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\304\0\304\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f"+
    "\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7"+
    "\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\304"+
    "\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\304"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\304\0\u175a\0\u178b\0\u17bc"+
    "\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\142"+
    "\0\304\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\304\0\u1a39"+
    "\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1"+
    "\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49"+
    "\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\304"+
    "\0\142\0\304\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\304\0\u1f95"+
    "\0\u1fc6\0\u1ff7\0\142\0\304\0\u2028\0\u2059\0\u208a\0\u20bb"+
    "\0\u20ec\0\u211d\0\304\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212"+
    "\0\u2243\0\304\0\u2274\0\u22a5\0\u22d6\0\142\0\304\0\u2307"+
    "\0\u2338\0\u2369\0\u239a\0\142\0\304\0\u23cb\0\u23fc\0\u242d"+
    "\0\142\0\304\0\304\0\142\0\u245e\0\u248f\0\142\0\304"+
    "\0\142\0\304\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5"+
    "\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\142\0\304\0\u26db"+
    "\0\u270c\0\u273d\0\u276e\0\u279f\0\304\0\u27d0\0\u2801\0\142"+
    "\0\304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\3\1\23\1\24\1\3\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\3\22\1\33\1\34\1\35\1\36\2\22"+
    "\1\37\1\22\1\40\1\41\1\3\1\22\1\42\1\43"+
    "\1\44\2\22\1\45\1\22\1\0\25\46\1\47\33\46"+
    "\62\0\1\50\1\0\1\51\74\0\3\22\5\0\20\22"+
    "\1\0\10\22\22\0\1\23\1\0\1\52\42\0\1\53"+
    "\103\0\1\54\23\0\1\55\23\0\3\22\5\0\1\22"+
    "\1\56\16\22\1\0\4\22\1\57\3\22\20\0\3\22"+
    "\5\0\12\22\1\60\5\22\1\0\10\22\20\0\3\22"+
    "\5\0\3\22\1\61\14\22\1\0\10\22\20\0\3\22"+
    "\5\0\5\22\1\62\12\22\1\0\10\22\20\0\3\22"+
    "\5\0\4\22\1\63\1\22\1\64\3\22\1\65\1\22"+
    "\1\66\3\22\1\0\10\22\20\0\3\22\5\0\12\22"+
    "\1\67\5\22\1\0\10\22\20\0\3\22\5\0\3\22"+
    "\1\70\6\22\1\71\1\22\1\72\3\22\1\0\10\22"+
    "\20\0\3\22\5\0\4\22\1\73\3\22\1\74\7\22"+
    "\1\0\10\22\20\0\3\22\5\0\6\22\1\75\11\22"+
    "\1\0\10\22\20\0\3\22\4\0\1\76\1\77\17\22"+
    "\1\0\10\22\20\0\3\22\4\0\1\100\1\101\13\22"+
    "\1\102\3\22\1\0\10\22\20\0\3\22\5\0\12\22"+
    "\1\103\5\22\1\0\10\22\20\0\3\22\5\0\6\22"+
    "\1\104\5\22\1\105\3\22\1\0\10\22\20\0\3\22"+
    "\5\0\4\22\1\106\13\22\1\0\10\22\1\0\2\50"+
    "\1\0\56\50\3\51\1\107\55\51\21\0\1\110\103\0"+
    "\1\111\33\0\3\22\5\0\15\22\1\112\2\22\1\0"+
    "\10\22\20\0\3\22\5\0\3\22\1\113\14\22\1\0"+
    "\10\22\20\0\3\22\5\0\4\22\1\114\13\22\1\0"+
    "\10\22\20\0\3\22\5\0\14\22\1\115\3\22\1\0"+
    "\10\22\20\0\3\22\5\0\3\22\1\116\14\22\1\0"+
    "\10\22\20\0\3\22\5\0\10\22\1\117\7\22\1\0"+
    "\10\22\20\0\3\22\5\0\20\22\1\0\2\22\1\120"+
    "\5\22\20\0\3\22\5\0\5\22\1\121\12\22\1\0"+
    "\10\22\20\0\3\22\5\0\11\22\1\122\6\22\1\0"+
    "\10\22\20\0\3\22\5\0\4\22\1\123\13\22\1\0"+
    "\10\22\20\0\3\22\5\0\13\22\1\124\4\22\1\0"+
    "\10\22\20\0\3\22\5\0\20\22\1\0\1\22\1\125"+
    "\6\22\20\0\3\22\5\0\11\22\1\126\6\22\1\0"+
    "\10\22\20\0\3\22\4\0\1\127\1\130\17\22\1\0"+
    "\10\22\20\0\3\22\5\0\3\22\1\131\14\22\1\0"+
    "\10\22\50\0\2\132\27\0\3\22\5\0\20\22\1\132"+
    "\1\133\7\22\53\0\1\134\25\0\3\22\5\0\20\22"+
    "\1\0\2\22\1\135\5\22\20\0\3\22\5\0\20\22"+
    "\1\0\7\22\1\136\20\0\3\22\5\0\2\22\1\137"+
    "\15\22\1\0\10\22\20\0\3\22\5\0\3\22\1\140"+
    "\14\22\1\0\2\22\1\141\5\22\20\0\3\22\5\0"+
    "\10\22\1\142\7\22\1\0\10\22\20\0\3\22\5\0"+
    "\20\22\1\143\1\144\7\22\1\0\1\51\1\145\1\51"+
    "\1\107\55\51\33\0\1\146\44\0\3\22\5\0\4\22"+
    "\1\147\13\22\1\0\10\22\20\0\3\22\5\0\12\22"+
    "\1\150\5\22\1\0\10\22\20\0\3\22\5\0\5\22"+
    "\1\151\12\22\1\0\10\22\20\0\3\22\5\0\15\22"+
    "\1\152\2\22\1\0\10\22\20\0\3\22\5\0\20\22"+
    "\1\153\1\154\7\22\20\0\3\22\5\0\6\22\1\155"+
    "\11\22\1\0\10\22\20\0\3\22\5\0\11\22\1\156"+
    "\6\22\1\0\10\22\20\0\3\22\4\0\1\157\1\160"+
    "\17\22\1\0\10\22\20\0\3\22\5\0\3\22\1\161"+
    "\14\22\1\0\10\22\20\0\3\22\5\0\12\22\1\162"+
    "\5\22\1\0\10\22\20\0\3\22\5\0\11\22\1\163"+
    "\6\22\1\0\10\22\20\0\3\22\5\0\11\22\1\164"+
    "\6\22\1\0\10\22\20\0\3\22\5\0\6\22\1\165"+
    "\11\22\1\0\10\22\53\0\1\166\25\0\3\22\5\0"+
    "\20\22\1\0\2\22\1\167\5\22\20\0\3\22\5\0"+
    "\1\22\1\170\16\22\1\0\10\22\27\0\2\171\50\0"+
    "\3\22\4\0\1\171\1\172\17\22\1\0\10\22\34\0"+
    "\1\173\44\0\3\22\5\0\4\22\1\174\13\22\1\0"+
    "\10\22\20\0\3\22\5\0\4\22\1\175\13\22\1\0"+
    "\10\22\20\0\3\22\5\0\3\22\1\176\14\22\1\0"+
    "\10\22\20\0\3\22\5\0\20\22\1\0\1\22\1\177"+
    "\6\22\20\0\3\22\5\0\1\22\1\200\16\22\1\0"+
    "\10\22\20\0\3\22\5\0\20\22\1\201\1\202\7\22"+
    "\41\0\1\203\37\0\3\22\5\0\11\22\1\204\6\22"+
    "\1\0\10\22\27\0\2\205\50\0\3\22\4\0\1\205"+
    "\1\206\17\22\1\0\10\22\20\0\3\22\5\0\7\22"+
    "\1\207\10\22\1\0\10\22\20\0\3\22\5\0\6\22"+
    "\1\210\11\22\1\0\10\22\20\0\3\22\5\0\4\22"+
    "\1\211\13\22\1\0\10\22\27\0\2\212\50\0\3\22"+
    "\4\0\1\212\1\213\17\22\1\0\10\22\20\0\3\22"+
    "\5\0\3\22\1\214\14\22\1\0\10\22\20\0\3\22"+
    "\5\0\3\22\1\215\14\22\1\0\10\22\41\0\1\216"+
    "\37\0\3\22\5\0\11\22\1\217\6\22\1\0\10\22"+
    "\20\0\3\22\5\0\14\22\1\220\3\22\1\0\10\22"+
    "\20\0\3\22\5\0\12\22\1\221\5\22\1\0\10\22"+
    "\20\0\3\22\5\0\3\22\1\222\14\22\1\0\10\22"+
    "\42\0\1\223\36\0\3\22\5\0\12\22\1\224\5\22"+
    "\1\0\10\22\20\0\3\22\5\0\12\22\1\225\5\22"+
    "\1\0\10\22\46\0\1\226\32\0\3\22\5\0\16\22"+
    "\1\227\1\22\1\0\10\22\50\0\2\230\27\0\3\22"+
    "\5\0\20\22\1\230\1\231\7\22\20\0\3\22\5\0"+
    "\20\22\1\232\1\233\7\22\20\0\3\22\4\0\1\234"+
    "\1\235\17\22\1\0\10\22\20\0\3\22\5\0\14\22"+
    "\1\236\3\22\1\0\10\22\20\0\3\22\5\0\6\22"+
    "\1\237\11\22\1\0\10\22\42\0\1\240\36\0\3\22"+
    "\5\0\12\22\1\241\5\22\1\0\10\22\27\0\2\242"+
    "\50\0\3\22\4\0\1\242\1\243\17\22\1\0\10\22"+
    "\42\0\1\244\36\0\3\22\5\0\12\22\1\245\5\22"+
    "\1\0\10\22\20\0\3\22\5\0\20\22\1\0\5\22"+
    "\1\246\2\22\20\0\3\22\5\0\12\22\1\247\5\22"+
    "\1\0\10\22\47\0\1\250\31\0\3\22\5\0\17\22"+
    "\1\251\1\0\10\22\20\0\3\22\5\0\11\22\1\252"+
    "\6\22\1\0\10\22\20\0\3\22\5\0\14\22\1\253"+
    "\3\22\1\0\10\22\44\0\1\254\34\0\3\22\5\0"+
    "\14\22\1\255\3\22\1\0\10\22\20\0\3\22\5\0"+
    "\13\22\1\256\4\22\1\0\10\22\20\0\3\22\5\0"+
    "\12\22\1\257\5\22\1\0\10\22\44\0\1\260\34\0"+
    "\3\22\5\0\14\22\1\261\3\22\1\0\10\22\40\0"+
    "\1\262\40\0\3\22\5\0\10\22\1\263\7\22\1\0"+
    "\10\22\37\0\1\264\41\0\3\22\5\0\7\22\1\265"+
    "\10\22\1\0\10\22\37\0\1\266\41\0\3\22\5\0"+
    "\7\22\1\267\10\22\1\0\10\22\40\0\1\270\40\0"+
    "\3\22\5\0\10\22\1\271\7\22\1\0\10\22\20\0"+
    "\3\22\5\0\11\22\1\272\6\22\1\0\10\22\20\0"+
    "\3\22\5\0\12\22\1\273\5\22\1\0\10\22\54\0"+
    "\1\274\24\0\3\22\5\0\20\22\1\0\3\22\1\275"+
    "\4\22\33\0\1\276\45\0\3\22\5\0\3\22\1\277"+
    "\14\22\1\0\10\22\20\0\3\22\5\0\14\22\1\300"+
    "\3\22\1\0\10\22\44\0\1\301\34\0\3\22\5\0"+
    "\14\22\1\302\3\22\1\0\10\22\20\0\3\22\5\0"+
    "\12\22\1\303\5\22\1\0\10\22\20\0\3\22\5\0"+
    "\1\22\1\304\16\22\1\0\10\22\40\0\1\305\40\0"+
    "\3\22\5\0\10\22\1\306\7\22\1\0\10\22\20\0"+
    "\3\22\5\0\11\22\1\307\6\22\1\0\10\22\20\0"+
    "\3\22\5\0\1\22\1\310\16\22\1\0\10\22\31\0"+
    "\1\311\47\0\3\22\5\0\1\22\1\312\16\22\1\0"+
    "\10\22\42\0\1\313\36\0\3\22\5\0\12\22\1\314"+
    "\5\22\1\0\10\22\34\0\1\315\44\0\3\22\5\0"+
    "\4\22\1\316\13\22\1\0\10\22\34\0\1\317\44\0"+
    "\3\22\5\0\4\22\1\320\13\22\1\0\10\22\40\0"+
    "\1\321\40\0\3\22\5\0\10\22\1\322\7\22\1\0"+
    "\10\22\20\0\3\22\5\0\6\22\1\323\11\22\1\0"+
    "\10\22\20\0\3\22\5\0\10\22\1\324\7\22\1\0"+
    "\10\22\27\0\2\325\50\0\3\22\4\0\1\325\1\326"+
    "\17\22\1\0\10\22\31\0\1\327\47\0\3\22\5\0"+
    "\1\22\1\330\16\22\1\0\10\22\20\0\3\22\5\0"+
    "\13\22\1\331\4\22\1\0\10\22\20\0\3\22\5\0"+
    "\6\22\1\332\11\22\1\0\10\22\13\0\1\333\60\0"+
    "\1\333\4\0\3\22\5\0\20\22\1\0\10\22\20\0"+
    "\3\22\4\0\1\334\1\335\17\22\1\0\10\22\36\0"+
    "\1\336\42\0\3\22\5\0\6\22\1\337\11\22\1\0"+
    "\10\22\40\0\1\340\40\0\3\22\5\0\10\22\1\341"+
    "\7\22\1\0\10\22\40\0\1\342\40\0\3\22\5\0"+
    "\10\22\1\343\7\22\1\0\10\22\44\0\1\344\34\0"+
    "\3\22\5\0\14\22\1\345\3\22\1\0\10\22\20\0"+
    "\3\22\5\0\12\22\1\346\5\22\1\0\10\22\37\0"+
    "\1\347\41\0\3\22\5\0\7\22\1\350\10\22\1\0"+
    "\10\22\44\0\1\351\34\0\3\22\5\0\14\22\1\352"+
    "\3\22\1\0\10\22\20\0\3\22\5\0\11\22\1\353"+
    "\6\22\1\0\10\22\41\0\1\354\71\0\1\355\26\0"+
    "\3\22\5\0\20\22\1\0\1\22\1\356\6\22\44\0"+
    "\1\357\34\0\3\22\5\0\14\22\1\360\3\22\1\0"+
    "\10\22\44\0\1\361\34\0\3\22\5\0\14\22\1\362"+
    "\3\22\1\0\10\22\20\0\3\22\5\0\20\22\1\0"+
    "\1\22\1\363\6\22\44\0\1\364\34\0\3\22\5\0"+
    "\14\22\1\365\3\22\1\0\10\22\42\0\1\366\36\0"+
    "\3\22\5\0\12\22\1\367\5\22\1\0\10\22\20\0"+
    "\3\22\5\0\12\22\1\370\5\22\1\0\10\22\31\0"+
    "\1\371\47\0\3\22\5\0\1\22\1\372\16\22\1\0"+
    "\10\22\53\0\1\373\25\0\3\22\5\0\20\22\1\0"+
    "\2\22\1\374\5\22\20\0\3\22\5\0\20\22\1\0"+
    "\2\22\1\375\5\22\36\0\1\376\42\0\3\22\5\0"+
    "\6\22\1\377\11\22\1\0\10\22\50\0\2\u0100\27\0"+
    "\3\22\5\0\20\22\1\u0100\1\u0101\7\22\20\0\3\22"+
    "\5\0\11\22\1\u0102\6\22\1\0\10\22\27\0\2\u0103"+
    "\50\0\3\22\4\0\1\u0103\1\u0104\17\22\1\0\10\22"+
    "\20\0\3\22\5\0\6\22\1\u0105\11\22\1\0\10\22"+
    "\36\0\1\u0106\42\0\3\22\5\0\6\22\1\u0107\11\22"+
    "\1\0\10\22\53\0\1\u0108\25\0\3\22\5\0\20\22"+
    "\1\0\2\22\1\u0109\5\22\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10290];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\15\11\3\1\2\11\17\1\2\11"+
    "\1\1\2\0\2\11\1\0\20\1\1\0\1\1\1\0"+
    "\6\1\1\0\1\1\1\0\15\1\1\0\2\1\1\0"+
    "\1\1\1\0\6\1\1\0\2\1\1\0\4\1\1\0"+
    "\3\1\1\0\6\1\1\0\2\1\1\0\1\1\1\0"+
    "\5\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0"+
    "\3\1\1\0\4\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\11\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\1\1\0\2\1\1\11\3\1\1\0"+
    "\3\1\1\0\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\3\1\2\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\2\1\1\0\1\1\1\11\2\1\1\11\1\0\1\1"+
    "\1\11\1\1\1\11\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\11\1\1\1\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de usuario
    

//VARIALES Y METODOS DEL SCANER
String expresion="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String errLex = "Error léxico, caracter irreconocible: '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+yycolumn;
        System.err.println(errLex);
            }
          case 48: break;
          case 2: 
            { System.out.println("DIV");return new Symbol(sym.DIV	          , yyline, yycolumn, yytext());
            }
          case 49: break;
          case 3: 
            { /*Saltos de linea, ignorados*/
            }
          case 50: break;
          case 4: 
            { System.out.println("POR");return new Symbol(sym.POR	          , yyline, yycolumn, yytext());
            }
          case 51: break;
          case 5: 
            { System.out.println("MAYORQUE");return new Symbol(sym.MAYORQUE       , yyline, yycolumn, yytext());
            }
          case 52: break;
          case 6: 
            { System.out.println("IGUAL");return new Symbol(sym.IGUAL	      , yyline, yycolumn, yytext());
            }
          case 53: break;
          case 7: 
            { System.out.println("MENORQUE");return new Symbol(sym.MENORQUE       , yyline, yycolumn, yytext());
            }
          case 54: break;
          case 8: 
            { System.out.println("PAREA");return new Symbol(sym.PAREA	      , yyline, yycolumn, yytext());
            }
          case 55: break;
          case 9: 
            { System.out.println("PAREC");return new Symbol(sym.PAREC	      , yyline, yycolumn, yytext());
            }
          case 56: break;
          case 10: 
            { System.out.println("PUNTOCOMA");return new Symbol(sym.PUNTOCOMA      , yyline, yycolumn, yytext());
            }
          case 57: break;
          case 11: 
            { System.out.println("MENOS");return new Symbol(sym.MENOS	      , yyline, yycolumn, yytext());
            }
          case 58: break;
          case 12: 
            { System.out.println("MAS");return new Symbol(sym.MAS	          , yyline, yycolumn, yytext());
            }
          case 59: break;
          case 13: 
            { System.out.println("CORCHA");return new Symbol(sym.CORCHA	      , yyline, yycolumn, yytext());
            }
          case 60: break;
          case 14: 
            { System.out.println("CORCHC");return new Symbol(sym.CORCHC	      , yyline, yycolumn, yytext());
            }
          case 61: break;
          case 15: 
            { System.out.println("COMA");return new Symbol(sym.COMA           , yyline, yycolumn, yytext());
            }
          case 62: break;
          case 16: 
            { System.out.println("ID");return new Symbol(sym.ID 	      , yyline, yycolumn, yytext());
            }
          case 63: break;
          case 17: 
            { System.out.println("ENTERO");return new Symbol(sym.ENTERO	      , yyline, yycolumn, yytext());
            }
          case 64: break;
          case 18: 
            { /*Espacios en blanco, ignorados*/
            }
          case 65: break;
          case 19: 
            { yybegin (EXPRESION);
            }
          case 66: break;
          case 20: 
            { expresion +=yytext();
            }
          case 67: break;
          case 21: 
            { String temporal=expresion; 
        expresion=""; 
        yybegin(YYINITIAL); 
     
        return new Symbol(sym.CADENA, yyline+1, yyline, temporal);
            }
          case 68: break;
          case 22: 
            { System.out.println("DOSPI");return new Symbol(sym.DOSPI	      , yyline, yycolumn, yytext());
            }
          case 69: break;
          case 23: 
            { System.out.println("ids ");return new Symbol(sym.IDE, yyline,yycolumn, yytext());
            }
          case 70: break;
          case 24: 
            { System.out.println("DECIMAL");return new Symbol(sym.DECIMAL        , yyline, yycolumn, yytext());
            }
          case 71: break;
          case 25: 
            { System.out.println("TRUE");return new Symbol(sym.TRUE           , yyline,yycolumn, yytext());
            }
          case 72: break;
          case 26: 
            { System.out.println("TEXT");return new Symbol(sym.TEXT            , yyline,yycolumn, yytext());
            }
          case 73: break;
          case 27: 
            { System.out.println("GRUPO");return new Symbol(sym.GRUPO  , yyline,yycolumn, yytext());
            }
          case 74: break;
          case 28: 
            { System.out.println("LETRA");return new Symbol(sym.LETRA           , yyline,yycolumn, yytext());
            }
          case 75: break;
          case 29: 
            { System.out.println("BORDE");return new Symbol(sym.BORDE           , yyline,yycolumn, yytext());
            }
          case 76: break;
          case 30: 
            { System.out.println("FALSE");return new Symbol(sym.FALSE          , yyline,yycolumn, yytext());
            }
          case 77: break;
          case 31: 
            { System.out.println("OPAQUE");return new Symbol(sym.OPAQUE , yyline,yycolumn, yytext());
            }
          case 78: break;
          case 32: 
            { System.out.println("DERECHA");return new Symbol(sym.DERECHA        , yyline,yycolumn, yytext());
            }
          case 79: break;
          case 33: 
            { System.out.println("CURSIVA");return new Symbol(sym.CURSIVA        , yyline,yycolumn, yytext());
            }
          case 80: break;
          case 34: 
            { System.out.println("TAMTEXT");return new Symbol(sym.TAMTEXT         , yyline,yycolumn, yytext());
            }
          case 81: break;
          case 35: 
            { System.out.println("VISIBLE");return new Symbol(sym.VISIBLE         , yyline,yycolumn, yytext());
            }
          case 82: break;
          case 36: 
            { System.out.println("FORMATO");return new Symbol(sym.FORMATO         , yyline,yycolumn, yytext());
            }
          case 83: break;
          case 37: 
            { System.out.println("CENTRADO");return new Symbol(sym.CENTRADO       , yyline,yycolumn, yytext());
            }
          case 84: break;
          case 38: 
            { System.out.println("ALINEADO");return new Symbol(sym.ALINEADO        , yyline,yycolumn, yytext());
            }
          case 85: break;
          case 39: 
            { System.out.println("NEGRILLA");return new Symbol(sym.NEGRILLA       , yyline,yycolumn, yytext());
            }
          case 86: break;
          case 40: 
            { System.out.println("IZQUIERDA");return new Symbol(sym.IZQUIERDA      , yyline,yycolumn, yytext());
            }
          case 87: break;
          case 41: 
            { System.out.println("COLORTEXT");return new Symbol(sym.COLORTEXT, yyline,yycolumn, yytext());
            }
          case 88: break;
          case 42: 
            { System.out.println("CAPITAL");return new Symbol(sym.CAPITAL        , yyline,yycolumn, yytext());
            }
          case 89: break;
          case 43: 
            { System.out.println("MINUSCULA");return new Symbol(sym.MINUSCULA      , yyline,yycolumn, yytext());
            }
          case 90: break;
          case 44: 
            { System.out.println("MAYUSCULA");return new Symbol(sym.MAYUSCULA      , yyline,yycolumn, yytext());
            }
          case 91: break;
          case 45: 
            { System.out.println("JUSTIFICADO");return new Symbol(sym.JUSTIFICADO    , yyline,yycolumn, yytext());
            }
          case 92: break;
          case 46: 
            { System.out.println("FONDOELEMENTO");return new Symbol(sym.FONDOELEMENTO   , yyline,yycolumn, yytext());
            }
          case 93: break;
          case 47: 
            { System.out.println("AUTOREDIMENSION");return new Symbol(sym.AUTOREDIMENSION , yyline,yycolumn,yytext());
            }
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
