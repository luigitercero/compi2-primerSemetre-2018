
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 12 22:38:08 CST 2018
//----------------------------------------------------

package org.compi2.codigo3d.parser.css;

import java_cup.runtime.Symbol;
import com.ParserTree.Node;
import com.ParserTree.ParserTree;
import com.ParserTree.Location;
import com.ParserTree.Term;
import com.ParserTree.Token;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 12 22:38:08 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\005\004" +
    "\000\002\005\003\000\002\006\004\000\002\006\003\000" +
    "\002\007\004\000\002\007\007\000\002\007\003\000\002" +
    "\012\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\003\000\002\013\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\004\020\004\001\002\000\004\016\012\001" +
    "\002\000\006\002\000\020\004\001\002\000\004\002\010" +
    "\001\002\000\006\002\ufffe\020\ufffe\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\020\uffff\001\002\000\036" +
    "\003\030\017\026\020\020\030\015\031\034\032\023\033" +
    "\032\034\035\035\017\036\031\037\014\040\022\041\033" +
    "\054\024\001\002\000\036\003\ufff9\017\ufff9\020\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\054\ufff9\001\002\000\004\023" +
    "\uffd4\001\002\000\004\023\uffdb\001\002\000\006\002\ufffd" +
    "\020\ufffd\001\002\000\004\023\uffd6\001\002\000\004\023" +
    "\uffd1\001\002\000\004\023\045\001\002\000\004\023\uffd3" +
    "\001\002\000\004\023\uffd9\001\002\000\004\007\041\001" +
    "\002\000\004\011\040\001\002\000\006\002\ufffb\020\ufffb" +
    "\001\002\000\036\003\030\017\037\020\020\030\015\031" +
    "\034\032\023\033\032\034\035\035\017\036\031\037\014" +
    "\040\022\041\033\054\024\001\002\000\036\003\ufff6\017" +
    "\ufff6\020\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\054\ufff6\001" +
    "\002\000\004\023\uffd5\001\002\000\004\023\uffd8\001\002" +
    "\000\004\023\uffd2\001\002\000\004\023\uffda\001\002\000" +
    "\004\023\uffd7\001\002\000\036\003\ufffa\017\ufffa\020\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036" +
    "\ufffa\037\ufffa\040\ufffa\041\ufffa\054\ufffa\001\002\000\006" +
    "\002\ufffc\020\ufffc\001\002\000\036\003\ufff8\017\ufff8\020" +
    "\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\054\ufff8\001\002\000" +
    "\004\020\042\001\002\000\004\010\043\001\002\000\004" +
    "\011\044\001\002\000\036\003\ufff7\017\ufff7\020\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\054\ufff7\001\002\000\046\007" +
    "\057\016\063\020\054\021\071\022\050\025\051\026\064" +
    "\027\046\042\062\043\061\044\072\045\055\046\070\047" +
    "\060\050\065\051\067\052\056\053\047\001\002\000\022" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017" +
    "\uffe7\024\uffe7\001\002\000\022\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\017\uffdc\024\uffdc\001\002\000" +
    "\022\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\017\uffe8\024\uffe8\001\002\000\022\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\024\uffeb\001\002" +
    "\000\016\011\ufff5\012\077\013\076\014\101\015\100\024" +
    "\074\001\002\000\022\010\uffec\011\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\017\uffec\024\uffec\001\002\000\022\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6" +
    "\024\uffe6\001\002\000\022\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\017\uffe2\024\uffe2\001\002\000\022" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017" +
    "\uffdd\024\uffdd\001\002\000\046\007\057\016\063\020\054" +
    "\021\071\022\050\025\051\026\064\027\046\042\062\043" +
    "\061\044\072\045\055\046\070\047\060\050\065\051\067" +
    "\052\056\053\047\001\002\000\022\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\017\uffe0\024\uffe0\001\002" +
    "\000\022\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\017\uffe4\024\uffe4\001\002\000\022\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\024\uffe5\001" +
    "\002\000\046\007\057\016\063\020\054\021\071\022\050" +
    "\025\051\026\064\027\046\042\062\043\061\044\072\045" +
    "\055\046\070\047\060\050\065\051\067\052\056\053\047" +
    "\001\002\000\022\010\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\017\uffea\024\uffea\001\002\000\022\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\017\uffdf\024" +
    "\uffdf\001\002\000\022\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\017\uffed\024\uffed\001\002\000\022\010" +
    "\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\017\uffde" +
    "\024\uffde\001\002\000\022\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\017\uffe1\024\uffe1\001\002\000\022" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\017" +
    "\uffe9\024\uffe9\001\002\000\022\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\017\uffe3\024\uffe3\001\002\000" +
    "\016\012\077\013\076\014\101\015\100\017\075\024\074" +
    "\001\002\000\046\007\057\016\063\020\054\021\071\022" +
    "\050\025\051\026\064\027\046\042\062\043\061\044\072" +
    "\045\055\046\070\047\060\050\065\051\067\052\056\053" +
    "\047\001\002\000\022\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\017\uffef\024\uffef\001\002\000\046\007" +
    "\057\016\063\020\054\021\071\022\050\025\051\026\064" +
    "\027\046\042\062\043\061\044\072\045\055\046\070\047" +
    "\060\050\065\051\067\052\056\053\047\001\002\000\046" +
    "\007\057\016\063\020\054\021\071\022\050\025\051\026" +
    "\064\027\046\042\062\043\061\044\072\045\055\046\070" +
    "\047\060\050\065\051\067\052\056\053\047\001\002\000" +
    "\046\007\057\016\063\020\054\021\071\022\050\025\051" +
    "\026\064\027\046\042\062\043\061\044\072\045\055\046" +
    "\070\047\060\050\065\051\067\052\056\053\047\001\002" +
    "\000\046\007\057\016\063\020\054\021\071\022\050\025" +
    "\051\026\064\027\046\042\062\043\061\044\072\045\055" +
    "\046\070\047\060\050\065\051\067\052\056\053\047\001" +
    "\002\000\022\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\017\ufff3\024\ufff3\001\002\000\022\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\017\ufff1\024\ufff1" +
    "\001\002\000\022\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\101\015\100\017\ufff2\024\ufff2\001\002\000\022\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\101\015\100\017\ufff4\024" +
    "\ufff4\001\002\000\022\010\ufff0\011\ufff0\012\077\013\076" +
    "\014\101\015\100\017\ufff0\024\ufff0\001\002\000\016\010" +
    "\110\012\077\013\076\014\101\015\100\024\074\001\002" +
    "\000\022\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\017\uffee\024\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\010\002\005\003\004\004\006\001\001\000" +
    "\002\001\001\000\004\004\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\015\006\026\007\012\012\024\015\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\035" +
    "\012\024\015\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\051\016\065\017" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\106\016\065\017\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\072" +
    "\016\065\017\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\105\016\065\017\052\001\001\000\002\001\001" +
    "\000\010\013\104\016\065\017\052\001\001\000\010\013" +
    "\103\016\065\017\052\001\001\000\010\013\102\016\065" +
    "\017\052\001\001\000\010\013\101\016\065\017\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
 public ParserTree parserTree ;
public ArrayList<Symbol> error = new ArrayList<Symbol>();

    String expresion = "";
    public void syntax_error(Symbol s){
    System.err.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ".  " +s.value + " no reconocido." );
        this.error.add(s);
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         System.err.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". " + s.value + " no reconocido.");
        this.error.add(s);
        System.err.println(s);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

//Codigo de acciones
      

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // propiedad ::= ID 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("ID"), new Token(new Location(aleft,aright),a,"ID"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // propiedad ::= TEXT 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("TEXT"), new Token(new Location(aleft,aright),a,"TEXT")); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // propiedad ::= FORMATO 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("FORMATO"), new Token(new Location(aleft,aright),a,"FORMATO")); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // propiedad ::= LETRA 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("LETRA"), new Token(new Location(aleft,aright),a,"LETRA")); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // propiedad ::= TAMTEXT 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("TAMTEXT"), new Token(new Location(aleft,aright),a,"TAMTEXT")); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // propiedad ::= FONDOELEMENTO 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("FONDOELEMENTO"), new Token(new Location(aleft,aright),a,"FONDOELEMENTO")); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // propiedad ::= AUTOREDIMENSION 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("AUTOREDIMENSION"), new Token(new Location(aleft,aright),a,"AUTOREDIMENSION")); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // propiedad ::= VISIBLE 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("VISIBLE"), new Token(new Location(aleft,aright),a,"VISIBLE")); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // propiedad ::= BORDE 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("BORDE"), new Token(new Location(aleft,aright),a,"BORDE")); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // propiedad ::= OPAQUE 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("OPAQUE"), new Token(new Location(aleft,aright),a,"OPAQUE")); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // propiedad ::= COLORTEXT 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("COLORTEXT"), new Token(new Location(aleft,aright),a,"COLORTEXT")); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("propiedad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // reservada ::= CAPITAL 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("CAPITAL"), new Token(new Location(aleft,aright),a,"CAPITAL"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservada",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // reservada ::= MINUSCULA 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MINUSCULA"), new Token(new Location(aleft,aright),a,"MINUSCULA"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservada",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // reservada ::= MAYUSCULA 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("MAYUSCULA"), new Token(new Location(aleft,aright),a,"MAYUSCULA"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservada",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // reservada ::= CURSIVA 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("CURSIVA"), new Token(new Location(aleft,aright),a,"CURSIVA"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservada",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // reservada ::= NEGRILLA 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("NEGRILLA"), new Token(new Location(aleft,aright),a,"NEGRILLA"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservada",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // reservada ::= JUSTIFICADO 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("JUSTIFICADO"), new Token(new Location(aleft,aright),a,"JUSTIFICADO"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservada",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // reservada ::= CENTRADO 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("CENTRADO"), new Token(new Location(aleft,aright),a,"CENTRADO"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservada",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // reservada ::= DERECHA 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("DERECHA"), new Token(new Location(aleft,aright),a,"DERECHA"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservada",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // reservada ::= IZQUIERDA 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("IZQUIERDA"), new Token(new Location(aleft,aright),a,"IZQUIERDA"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservada",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // reservada ::= ALINEADO 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("ALINEADO"), new Token(new Location(aleft,aright),a,"ALINEADO"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservada",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valor ::= ID 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("ID"), new Token(new Location(aleft,aright),a,"ID"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valor ::= CADENA 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("CADENA"), new Token(new Location(aleft,aright),a,"CADENA"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= DECIMAL 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("DECIMAL"), new Token(new Location(aleft,aright),a,"DECIMAL"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor ::= ENTERO 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("ENTERO"), new Token(new Location(aleft,aright),a,"ENTERO"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor ::= FALSE 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("FALSE"), new Token(new Location(aleft,aright),a,"FALSE"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor ::= TRUE 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("TRUE"), new Token(new Location(aleft,aright),a,"TRUE"));RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= valor 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree(new Node(new Term("EXP"))); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= reservada 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree(new Node(new Term("EXP"))); arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= PAREA exp PAREC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= CORCHA exp CORCHC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp COMA exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree(new Node(new Term("EXP")));  arbol.addChildren(a); Node nodo = new Node(new Term("COMA")) ; arbol.addChildren(nodo); arbol.addChildren(b); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp DIV exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree(new Node(new Term("EXP")));   arbol.addChildren(a); Node nodo = new Node(new Term("DIV"))  ; arbol.addChildren(nodo); arbol.addChildren(b); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp MENOS exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree(new Node(new Term("EXP"))); arbol.addChildren(a); Node nodo = new Node(new Term("MENOS")); arbol.addChildren(nodo); arbol.addChildren(b); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp POR exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree(new Node(new Term("EXP")));   arbol.addChildren(a); Node nodo = new Node(new Term("POR"))  ; arbol.addChildren(nodo); arbol.addChildren(b); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp MAS exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree(new Node(new Term("EXP")));arbol.addChildren(a); Node nodo = new Node(new Term("MAS"))  ; arbol.addChildren(nodo); arbol.addChildren(b); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // elemento ::= propiedad DOSPI exp 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("elemento");arbol.addChildren(a); arbol.addChildren(b);RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // definir ::= error 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node nodo = new Node(new Term("error"), new Token(new Location(aleft,aright),a,"error"));
        ParserTree arbol = new ParserTree("error");arbol.addChildren(nodo); RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definir",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // definir ::= GRUPO PAREA ID PAREC PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ParserTree arbol = new ParserTree("GURPO");
     Node nodo = new Node(new Term("ID"), new Token(new Location(aleft,aright),a,"ID"));
     arbol.addChildren(nodo); RESULT = arbol;
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definir",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definir ::= elemento PUNTOCOMA 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definir",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definicion ::= definir 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol = new ParserTree("Definicion");arbol.addChildren(a); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definicion ::= definicion definir 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addChildren(b); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definicionii ::= CORCHC 
            {
              ParserTree RESULT =null;
		ParserTree arbol = new ParserTree("Definicion"); RESULT = arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicionii",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // definicionii ::= definicion CORCHC 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicionii",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // encabezado ::= ID CORCHA definicionii 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Node nodo = new Node(new Term("ID"), new Token(new Location(aleft,aright),a,"ID"));
         ParserTree arbol = new ParserTree("encabezado"); 
         arbol.addChildren(nodo); 
         arbol.addChildren(b);
         RESULT = arbol;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // css ::= encabezado 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParserTree arbol= new ParserTree("css");arbol.addChildren(a); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("css",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // css ::= css encabezado 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree b = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.addChildren(b); RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("css",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicial ::= css 
            {
              ParserTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserTree a = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		this.parser.parserTree = a; RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserTree start_val = (ParserTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

